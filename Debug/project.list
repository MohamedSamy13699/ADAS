
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a348  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800a4e8  0800a4e8  0001a4e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a634  0800a634  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800a634  0800a634  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a634  0800a634  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a634  0800a634  0001a634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a638  0800a638  0001a638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800a63c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00001d8c  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001da0  20001da0  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d267  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004300  00000000  00000000  0003d2ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001670  00000000  00000000  000415f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001167  00000000  00000000  00042c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023def  00000000  00000000  00043dc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f5ed  00000000  00000000  00067bb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dcdaf  00000000  00000000  000871a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005ce8  00000000  00000000  00163f54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  00169c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a4d0 	.word	0x0800a4d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	0800a4d0 	.word	0x0800a4d0

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2uiz>:
 800097c:	004a      	lsls	r2, r1, #1
 800097e:	d211      	bcs.n	80009a4 <__aeabi_d2uiz+0x28>
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d211      	bcs.n	80009aa <__aeabi_d2uiz+0x2e>
 8000986:	d50d      	bpl.n	80009a4 <__aeabi_d2uiz+0x28>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d40e      	bmi.n	80009b0 <__aeabi_d2uiz+0x34>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	fa23 f002 	lsr.w	r0, r3, r2
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d102      	bne.n	80009b6 <__aeabi_d2uiz+0x3a>
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	4770      	bx	lr
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	4770      	bx	lr

080009bc <IRSensor_Read>:
 * @param  Select which IR you need to get it's state
 * @retval return the value of IR sensor
 */

uint8_t IRSensor_Read(uint8_t IRSensor)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_IRSensorReturnValue = 1;
 80009c6:	2301      	movs	r3, #1
 80009c8:	73fb      	strb	r3, [r7, #15]
	switch(IRSensor)
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d002      	beq.n	80009d6 <IRSensor_Read+0x1a>
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d008      	beq.n	80009e6 <IRSensor_Read+0x2a>
		break;
	case RIGHT_IR:
		Local_IRSensorReturnValue = HAL_GPIO_ReadPin(IR_RIGHT_GPIO_Port, IR_RIGHT_Pin);
		break;
	default:
		break;
 80009d4:	e00f      	b.n	80009f6 <IRSensor_Read+0x3a>
		Local_IRSensorReturnValue = HAL_GPIO_ReadPin(IR_LEFT_GPIO_Port, IR_LEFT_Pin);
 80009d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009da:	4809      	ldr	r0, [pc, #36]	; (8000a00 <IRSensor_Read+0x44>)
 80009dc:	f002 fe32 	bl	8003644 <HAL_GPIO_ReadPin>
 80009e0:	4603      	mov	r3, r0
 80009e2:	73fb      	strb	r3, [r7, #15]
		break;
 80009e4:	e007      	b.n	80009f6 <IRSensor_Read+0x3a>
		Local_IRSensorReturnValue = HAL_GPIO_ReadPin(IR_RIGHT_GPIO_Port, IR_RIGHT_Pin);
 80009e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <IRSensor_Read+0x44>)
 80009ec:	f002 fe2a 	bl	8003644 <HAL_GPIO_ReadPin>
 80009f0:	4603      	mov	r3, r0
 80009f2:	73fb      	strb	r3, [r7, #15]
		break;
 80009f4:	bf00      	nop
	}
	return Local_IRSensorReturnValue;
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3710      	adds	r7, #16
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	48000400 	.word	0x48000400

08000a04 <LDR_u8GetValue>:
  * @brief  Get the Value measured by LDR sensor.
  * @param  None
  * @retval The LDR value
  */
uint8_t LDR_u8GetValue(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0

	uint32_t lux = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
	uint8_t LDR_value = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	70fb      	strb	r3, [r7, #3]
	HAL_ADC_Start(&hadc1);
 8000a12:	4814      	ldr	r0, [pc, #80]	; (8000a64 <LDR_u8GetValue+0x60>)
 8000a14:	f001 fcde 	bl	80023d4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 20);
 8000a18:	2114      	movs	r1, #20
 8000a1a:	4812      	ldr	r0, [pc, #72]	; (8000a64 <LDR_u8GetValue+0x60>)
 8000a1c:	f001 fdf0 	bl	8002600 <HAL_ADC_PollForConversion>
	lux = HAL_ADC_GetValue(&hadc1);
 8000a20:	4810      	ldr	r0, [pc, #64]	; (8000a64 <LDR_u8GetValue+0x60>)
 8000a22:	f001 feef 	bl	8002804 <HAL_ADC_GetValue>
 8000a26:	6078      	str	r0, [r7, #4]
	LDR_value = (lux/4096.0)*100.0;
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f7ff fd1b 	bl	8000464 <__aeabi_ui2d>
 8000a2e:	f04f 0200 	mov.w	r2, #0
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <LDR_u8GetValue+0x64>)
 8000a34:	f7ff feba 	bl	80007ac <__aeabi_ddiv>
 8000a38:	4602      	mov	r2, r0
 8000a3a:	460b      	mov	r3, r1
 8000a3c:	4610      	mov	r0, r2
 8000a3e:	4619      	mov	r1, r3
 8000a40:	f04f 0200 	mov.w	r2, #0
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <LDR_u8GetValue+0x68>)
 8000a46:	f7ff fd87 	bl	8000558 <__aeabi_dmul>
 8000a4a:	4602      	mov	r2, r0
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	4610      	mov	r0, r2
 8000a50:	4619      	mov	r1, r3
 8000a52:	f7ff ff93 	bl	800097c <__aeabi_d2uiz>
 8000a56:	4603      	mov	r3, r0
 8000a58:	70fb      	strb	r3, [r7, #3]
	return LDR_value;
 8000a5a:	78fb      	ldrb	r3, [r7, #3]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000040 	.word	0x20000040
 8000a68:	40b00000 	.word	0x40b00000
 8000a6c:	40590000 	.word	0x40590000

08000a70 <delay>:
#include "main.h"
/*edit timer*/
extern TIM_HandleTypeDef htim4;
/*edit timer*/
void delay (uint16_t time)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	80fb      	strh	r3, [r7, #6]
	/*edit timer*/
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <delay+0x30>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim4) < time);
 8000a82:	bf00      	nop
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <delay+0x30>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a8a:	88fb      	ldrh	r3, [r7, #6]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d3f9      	bcc.n	8000a84 <delay+0x14>
}
 8000a90:	bf00      	nop
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	2000014c 	.word	0x2000014c
 8000aa4:	00000000 	.word	0x00000000

08000aa8 <HAL_TIM_IC_CaptureCallback>:

static Ultrasonic_t HCSR04_sensor;

//The callback function
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	/*		edit tim 									edit channel	*/
	if (   (htim == &htim4)  && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel1
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a4b      	ldr	r2, [pc, #300]	; (8000be0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	f040 8088 	bne.w	8000bca <HAL_TIM_IC_CaptureCallback+0x122>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	7f1b      	ldrb	r3, [r3, #28]
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	f040 8083 	bne.w	8000bca <HAL_TIM_IC_CaptureCallback+0x122>
	{
		if (HCSR04_sensor.Is_First_Captured==0) // if the first value is not captured
 8000ac4:	4b47      	ldr	r3, [pc, #284]	; (8000be4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000ac6:	7b1b      	ldrb	r3, [r3, #12]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d11a      	bne.n	8000b02 <HAL_TIM_IC_CaptureCallback+0x5a>
		{
			/*														edit channel	*/
			HCSR04_sensor.IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3); // read the first value
 8000acc:	2108      	movs	r1, #8
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f005 fa58 	bl	8005f84 <HAL_TIM_ReadCapturedValue>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	4a43      	ldr	r2, [pc, #268]	; (8000be4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000ad8:	6013      	str	r3, [r2, #0]
			HCSR04_sensor.Is_First_Captured = 1;  // set the first captured as true
 8000ada:	4b42      	ldr	r3, [pc, #264]	; (8000be4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	731a      	strb	r2, [r3, #12]
			// Now change the polarity to falling edge
			/*									edit channel	*/
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	6a1a      	ldr	r2, [r3, #32]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8000aee:	621a      	str	r2, [r3, #32]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	6a1a      	ldr	r2, [r3, #32]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000afe:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
			/*		    	edit  timer    channel	*/
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC3);
		}
	}
}
 8000b00:	e063      	b.n	8000bca <HAL_TIM_IC_CaptureCallback+0x122>
		else if (HCSR04_sensor.Is_First_Captured==1)   // if the first is already captured
 8000b02:	4b38      	ldr	r3, [pc, #224]	; (8000be4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b04:	7b1b      	ldrb	r3, [r3, #12]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d15f      	bne.n	8000bca <HAL_TIM_IC_CaptureCallback+0x122>
			HCSR04_sensor.IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 8000b0a:	2108      	movs	r1, #8
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f005 fa39 	bl	8005f84 <HAL_TIM_ReadCapturedValue>
 8000b12:	4603      	mov	r3, r0
 8000b14:	4a33      	ldr	r2, [pc, #204]	; (8000be4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b16:	6053      	str	r3, [r2, #4]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	625a      	str	r2, [r3, #36]	; 0x24
			if (HCSR04_sensor.IC_Val2 > HCSR04_sensor.IC_Val1)
 8000b20:	4b30      	ldr	r3, [pc, #192]	; (8000be4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b22:	685a      	ldr	r2, [r3, #4]
 8000b24:	4b2f      	ldr	r3, [pc, #188]	; (8000be4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d907      	bls.n	8000b3c <HAL_TIM_IC_CaptureCallback+0x94>
				HCSR04_sensor.Difference = HCSR04_sensor.IC_Val2-HCSR04_sensor.IC_Val1;
 8000b2c:	4b2d      	ldr	r3, [pc, #180]	; (8000be4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b2e:	685a      	ldr	r2, [r3, #4]
 8000b30:	4b2c      	ldr	r3, [pc, #176]	; (8000be4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	4a2b      	ldr	r2, [pc, #172]	; (8000be4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b38:	6093      	str	r3, [r2, #8]
 8000b3a:	e00f      	b.n	8000b5c <HAL_TIM_IC_CaptureCallback+0xb4>
			else if (HCSR04_sensor.IC_Val1 > HCSR04_sensor.IC_Val2)
 8000b3c:	4b29      	ldr	r3, [pc, #164]	; (8000be4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b28      	ldr	r3, [pc, #160]	; (8000be4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d909      	bls.n	8000b5c <HAL_TIM_IC_CaptureCallback+0xb4>
				HCSR04_sensor.Difference = (0xffff - HCSR04_sensor.IC_Val1) + HCSR04_sensor.IC_Val2;
 8000b48:	4b26      	ldr	r3, [pc, #152]	; (8000be4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b4a:	685a      	ldr	r2, [r3, #4]
 8000b4c:	4b25      	ldr	r3, [pc, #148]	; (8000be4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000b56:	33ff      	adds	r3, #255	; 0xff
 8000b58:	4a22      	ldr	r2, [pc, #136]	; (8000be4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b5a:	6093      	str	r3, [r2, #8]
			HCSR04_sensor.Distance = HCSR04_sensor.Difference * .034/2;
 8000b5c:	4b21      	ldr	r3, [pc, #132]	; (8000be4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fc7f 	bl	8000464 <__aeabi_ui2d>
 8000b66:	a31c      	add	r3, pc, #112	; (adr r3, 8000bd8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b6c:	f7ff fcf4 	bl	8000558 <__aeabi_dmul>
 8000b70:	4602      	mov	r2, r0
 8000b72:	460b      	mov	r3, r1
 8000b74:	4610      	mov	r0, r2
 8000b76:	4619      	mov	r1, r3
 8000b78:	f04f 0200 	mov.w	r2, #0
 8000b7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b80:	f7ff fe14 	bl	80007ac <__aeabi_ddiv>
 8000b84:	4602      	mov	r2, r0
 8000b86:	460b      	mov	r3, r1
 8000b88:	4610      	mov	r0, r2
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	f7ff fef6 	bl	800097c <__aeabi_d2uiz>
 8000b90:	4603      	mov	r3, r0
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b96:	735a      	strb	r2, [r3, #13]
			HCSR04_sensor.Is_First_Captured = 0; // set it back to false
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	731a      	strb	r2, [r3, #12]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	6a1a      	ldr	r2, [r3, #32]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8000bac:	621a      	str	r2, [r3, #32]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	6a12      	ldr	r2, [r2, #32]
 8000bb8:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC3);
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	68da      	ldr	r2, [r3, #12]
 8000bc0:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f022 0208 	bic.w	r2, r2, #8
 8000bc8:	60da      	str	r2, [r3, #12]
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	f3af 8000 	nop.w
 8000bd8:	b020c49c 	.word	0xb020c49c
 8000bdc:	3fa16872 	.word	0x3fa16872
 8000be0:	2000014c 	.word	0x2000014c
 8000be4:	20000030 	.word	0x20000030

08000be8 <HCSR04_Init>:

/*This function to start the timer*/
void HCSR04_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	/*				edit  timer		channel  */
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3);
 8000bec:	2108      	movs	r1, #8
 8000bee:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <HCSR04_Init+0x10>)
 8000bf0:	f004 fce4 	bl	80055bc <HAL_TIM_IC_Start_IT>
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	2000014c 	.word	0x2000014c

08000bfc <HCSR04_Read1>:

void HCSR04_Read1 (void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000c00:	2201      	movs	r2, #1
 8000c02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c06:	480b      	ldr	r0, [pc, #44]	; (8000c34 <HCSR04_Read1+0x38>)
 8000c08:	f002 fd34 	bl	8003674 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8000c0c:	200a      	movs	r0, #10
 8000c0e:	f7ff ff2f 	bl	8000a70 <delay>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000c12:	2200      	movs	r2, #0
 8000c14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c18:	4806      	ldr	r0, [pc, #24]	; (8000c34 <HCSR04_Read1+0x38>)
 8000c1a:	f002 fd2b 	bl	8003674 <HAL_GPIO_WritePin>
	/*edit 				timer    channel */
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC3);
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HCSR04_Read1+0x3c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	68da      	ldr	r2, [r3, #12]
 8000c24:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <HCSR04_Read1+0x3c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f042 0208 	orr.w	r2, r2, #8
 8000c2c:	60da      	str	r2, [r3, #12]
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	48000400 	.word	0x48000400
 8000c38:	2000014c 	.word	0x2000014c

08000c3c <Get_Distance>:

uint8_t Get_Distance(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	HCSR04_Read1();
 8000c40:	f7ff ffdc 	bl	8000bfc <HCSR04_Read1>
	osDelay(100);
 8000c44:	2064      	movs	r0, #100	; 0x64
 8000c46:	f006 fe45 	bl	80078d4 <osDelay>
	return (HCSR04_sensor.Distance);
 8000c4a:	4b02      	ldr	r3, [pc, #8]	; (8000c54 <Get_Distance+0x18>)
 8000c4c:	7b5b      	ldrb	r3, [r3, #13]
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000030 	.word	0x20000030

08000c58 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c5e:	f107 031c 	add.w	r3, r7, #28
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
 8000c78:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c7a:	4b2e      	ldr	r3, [pc, #184]	; (8000d34 <MX_ADC1_Init+0xdc>)
 8000c7c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c80:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c82:	4b2c      	ldr	r3, [pc, #176]	; (8000d34 <MX_ADC1_Init+0xdc>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c88:	4b2a      	ldr	r3, [pc, #168]	; (8000d34 <MX_ADC1_Init+0xdc>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c8e:	4b29      	ldr	r3, [pc, #164]	; (8000d34 <MX_ADC1_Init+0xdc>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c94:	4b27      	ldr	r3, [pc, #156]	; (8000d34 <MX_ADC1_Init+0xdc>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c9a:	4b26      	ldr	r3, [pc, #152]	; (8000d34 <MX_ADC1_Init+0xdc>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ca2:	4b24      	ldr	r3, [pc, #144]	; (8000d34 <MX_ADC1_Init+0xdc>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ca8:	4b22      	ldr	r3, [pc, #136]	; (8000d34 <MX_ADC1_Init+0xdc>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cae:	4b21      	ldr	r3, [pc, #132]	; (8000d34 <MX_ADC1_Init+0xdc>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cb4:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <MX_ADC1_Init+0xdc>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cba:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <MX_ADC1_Init+0xdc>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cc2:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <MX_ADC1_Init+0xdc>)
 8000cc4:	2204      	movs	r2, #4
 8000cc6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cc8:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <MX_ADC1_Init+0xdc>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000cce:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <MX_ADC1_Init+0xdc>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cd4:	4817      	ldr	r0, [pc, #92]	; (8000d34 <MX_ADC1_Init+0xdc>)
 8000cd6:	f001 f983 	bl	8001fe0 <HAL_ADC_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000ce0:	f000 fcee 	bl	80016c0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ce8:	f107 031c 	add.w	r3, r7, #28
 8000cec:	4619      	mov	r1, r3
 8000cee:	4811      	ldr	r0, [pc, #68]	; (8000d34 <MX_ADC1_Init+0xdc>)
 8000cf0:	f002 f880 	bl	8002df4 <HAL_ADCEx_MultiModeConfigChannel>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000cfa:	f000 fce1 	bl	80016c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d02:	2301      	movs	r3, #1
 8000d04:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4806      	ldr	r0, [pc, #24]	; (8000d34 <MX_ADC1_Init+0xdc>)
 8000d1c:	f001 fd80 	bl	8002820 <HAL_ADC_ConfigChannel>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000d26:	f000 fccb 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d2a:	bf00      	nop
 8000d2c:	3728      	adds	r7, #40	; 0x28
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000040 	.word	0x20000040

08000d38 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	; 0x28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d58:	d124      	bne.n	8000da4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <HAL_ADC_MspInit+0x74>)
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	4a13      	ldr	r2, [pc, #76]	; (8000dac <HAL_ADC_MspInit+0x74>)
 8000d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d64:	6153      	str	r3, [r2, #20]
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <HAL_ADC_MspInit+0x74>)
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <HAL_ADC_MspInit+0x74>)
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	4a0d      	ldr	r2, [pc, #52]	; (8000dac <HAL_ADC_MspInit+0x74>)
 8000d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d7c:	6153      	str	r3, [r2, #20]
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <HAL_ADC_MspInit+0x74>)
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da0:	f002 fac6 	bl	8003330 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000da4:	bf00      	nop
 8000da6:	3728      	adds	r7, #40	; 0x28
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40021000 	.word	0x40021000

08000db0 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of LKS_semaphore */
	LKS_semaphoreHandle = osSemaphoreNew(1, 0, &LKS_semaphore_attributes);
 8000db4:	4a18      	ldr	r2, [pc, #96]	; (8000e18 <MX_FREERTOS_Init+0x68>)
 8000db6:	2100      	movs	r1, #0
 8000db8:	2001      	movs	r0, #1
 8000dba:	f006 fdb9 	bl	8007930 <osSemaphoreNew>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	4a16      	ldr	r2, [pc, #88]	; (8000e1c <MX_FREERTOS_Init+0x6c>)
 8000dc2:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of LKS_ */
	LKS_Handle = osThreadNew(LKS_TASK, NULL, &LKS__attributes);
 8000dc4:	4a16      	ldr	r2, [pc, #88]	; (8000e20 <MX_FREERTOS_Init+0x70>)
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4816      	ldr	r0, [pc, #88]	; (8000e24 <MX_FREERTOS_Init+0x74>)
 8000dca:	f006 fcd9 	bl	8007780 <osThreadNew>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	4a15      	ldr	r2, [pc, #84]	; (8000e28 <MX_FREERTOS_Init+0x78>)
 8000dd2:	6013      	str	r3, [r2, #0]

	/* creation of ACC_ */
	ACC_Handle = osThreadNew(ACC_TASK, NULL, &ACC__attributes);
 8000dd4:	4a15      	ldr	r2, [pc, #84]	; (8000e2c <MX_FREERTOS_Init+0x7c>)
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4815      	ldr	r0, [pc, #84]	; (8000e30 <MX_FREERTOS_Init+0x80>)
 8000dda:	f006 fcd1 	bl	8007780 <osThreadNew>
 8000dde:	4603      	mov	r3, r0
 8000de0:	4a14      	ldr	r2, [pc, #80]	; (8000e34 <MX_FREERTOS_Init+0x84>)
 8000de2:	6013      	str	r3, [r2, #0]

	/* creation of AB_ */
	AB_Handle = osThreadNew(AB_TASK, NULL, &AB__attributes);
 8000de4:	4a14      	ldr	r2, [pc, #80]	; (8000e38 <MX_FREERTOS_Init+0x88>)
 8000de6:	2100      	movs	r1, #0
 8000de8:	4814      	ldr	r0, [pc, #80]	; (8000e3c <MX_FREERTOS_Init+0x8c>)
 8000dea:	f006 fcc9 	bl	8007780 <osThreadNew>
 8000dee:	4603      	mov	r3, r0
 8000df0:	4a13      	ldr	r2, [pc, #76]	; (8000e40 <MX_FREERTOS_Init+0x90>)
 8000df2:	6013      	str	r3, [r2, #0]

	/* creation of BLUETOOTH_ */
	BLUETOOTH_Handle = osThreadNew(BLUETOOTH_TASK, NULL, &BLUETOOTH__attributes);
 8000df4:	4a13      	ldr	r2, [pc, #76]	; (8000e44 <MX_FREERTOS_Init+0x94>)
 8000df6:	2100      	movs	r1, #0
 8000df8:	4813      	ldr	r0, [pc, #76]	; (8000e48 <MX_FREERTOS_Init+0x98>)
 8000dfa:	f006 fcc1 	bl	8007780 <osThreadNew>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	4a12      	ldr	r2, [pc, #72]	; (8000e4c <MX_FREERTOS_Init+0x9c>)
 8000e02:	6013      	str	r3, [r2, #0]

	/* creation of ALC_ */
	ALC_Handle = osThreadNew(ALC_TASK, NULL, &ALC__attributes);
 8000e04:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <MX_FREERTOS_Init+0xa0>)
 8000e06:	2100      	movs	r1, #0
 8000e08:	4812      	ldr	r0, [pc, #72]	; (8000e54 <MX_FREERTOS_Init+0xa4>)
 8000e0a:	f006 fcb9 	bl	8007780 <osThreadNew>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	4a11      	ldr	r2, [pc, #68]	; (8000e58 <MX_FREERTOS_Init+0xa8>)
 8000e12:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	0800a5ec 	.word	0x0800a5ec
 8000e1c:	200000b0 	.word	0x200000b0
 8000e20:	0800a538 	.word	0x0800a538
 8000e24:	08000e5d 	.word	0x08000e5d
 8000e28:	2000009c 	.word	0x2000009c
 8000e2c:	0800a55c 	.word	0x0800a55c
 8000e30:	08001009 	.word	0x08001009
 8000e34:	200000a0 	.word	0x200000a0
 8000e38:	0800a580 	.word	0x0800a580
 8000e3c:	08001125 	.word	0x08001125
 8000e40:	200000a4 	.word	0x200000a4
 8000e44:	0800a5a4 	.word	0x0800a5a4
 8000e48:	0800117d 	.word	0x0800117d
 8000e4c:	200000a8 	.word	0x200000a8
 8000e50:	0800a5c8 	.word	0x0800a5c8
 8000e54:	08001405 	.word	0x08001405
 8000e58:	200000ac 	.word	0x200000ac

08000e5c <LKS_TASK>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_LKS_TASK */
void LKS_TASK(void *argument)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)

	{

		HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 8000e64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e68:	485e      	ldr	r0, [pc, #376]	; (8000fe4 <LKS_TASK+0x188>)
 8000e6a:	f002 fc1b 	bl	80036a4 <HAL_GPIO_TogglePin>
		/* if the driver do not turn on the turn signsl */
		if(Turn_Flag == T_OFF && speed > 20 &&  LKS_mode ==  LKS_ADAPTIVE  && (!AB_Flag))
 8000e6e:	4b5e      	ldr	r3, [pc, #376]	; (8000fe8 <LKS_TASK+0x18c>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d160      	bne.n	8000f38 <LKS_TASK+0xdc>
 8000e76:	4b5d      	ldr	r3, [pc, #372]	; (8000fec <LKS_TASK+0x190>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b14      	cmp	r3, #20
 8000e7c:	d95c      	bls.n	8000f38 <LKS_TASK+0xdc>
 8000e7e:	4b5c      	ldr	r3, [pc, #368]	; (8000ff0 <LKS_TASK+0x194>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b03      	cmp	r3, #3
 8000e84:	d158      	bne.n	8000f38 <LKS_TASK+0xdc>
 8000e86:	4b5b      	ldr	r3, [pc, #364]	; (8000ff4 <LKS_TASK+0x198>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d154      	bne.n	8000f38 <LKS_TASK+0xdc>
		{
			HAL_GPIO_WritePin(LKS_ALARM_GPIO_Port, LKS_ALARM_Pin, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2120      	movs	r1, #32
 8000e92:	4854      	ldr	r0, [pc, #336]	; (8000fe4 <LKS_TASK+0x188>)
 8000e94:	f002 fbee 	bl	8003674 <HAL_GPIO_WritePin>
			Left_IR = IRSensor_Read(LEFT_IR);
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f7ff fd8f 	bl	80009bc <IRSensor_Read>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b55      	ldr	r3, [pc, #340]	; (8000ff8 <LKS_TASK+0x19c>)
 8000ea4:	701a      	strb	r2, [r3, #0]
			Right_IR = IRSensor_Read(RIGHT_IR);
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f7ff fd88 	bl	80009bc <IRSensor_Read>
 8000eac:	4603      	mov	r3, r0
 8000eae:	461a      	mov	r2, r3
 8000eb0:	4b52      	ldr	r3, [pc, #328]	; (8000ffc <LKS_TASK+0x1a0>)
 8000eb2:	701a      	strb	r2, [r3, #0]
			/* If the car is inside the lane / No lane markings are detected on both sides */
			if ((Left_IR == BLACK) && (Right_IR == BLACK) )
 8000eb4:	4b50      	ldr	r3, [pc, #320]	; (8000ff8 <LKS_TASK+0x19c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d118      	bne.n	8000eee <LKS_TASK+0x92>
 8000ebc:	4b4f      	ldr	r3, [pc, #316]	; (8000ffc <LKS_TASK+0x1a0>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d114      	bne.n	8000eee <LKS_TASK+0x92>
			{

				if(Return_flag==1)
 8000ec4:	4b4e      	ldr	r3, [pc, #312]	; (8001000 <LKS_TASK+0x1a4>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d106      	bne.n	8000eda <LKS_TASK+0x7e>
				{
					Motor_voidMoveForward(speed);
 8000ecc:	4b47      	ldr	r3, [pc, #284]	; (8000fec <LKS_TASK+0x190>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 fc20 	bl	8001718 <Motor_voidMoveForward>
 8000ed8:	e005      	b.n	8000ee6 <LKS_TASK+0x8a>
				}else
				{
					Motor_voidMoveBackward(speed);
 8000eda:	4b44      	ldr	r3, [pc, #272]	; (8000fec <LKS_TASK+0x190>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 fc3d 	bl	8001760 <Motor_voidMoveBackward>
				}
				/* Reset (Lane Keeping Status) Flag */
				LKS_Flag = 0;
 8000ee6:	4b47      	ldr	r3, [pc, #284]	; (8001004 <LKS_TASK+0x1a8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
 8000eec:	e023      	b.n	8000f36 <LKS_TASK+0xda>

			}
			/* If the car drifts to the right / Lane markings are detected on the right side */
			else if (Left_IR == BLACK && Right_IR == WHITE)
 8000eee:	4b42      	ldr	r3, [pc, #264]	; (8000ff8 <LKS_TASK+0x19c>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d10d      	bne.n	8000f12 <LKS_TASK+0xb6>
 8000ef6:	4b41      	ldr	r3, [pc, #260]	; (8000ffc <LKS_TASK+0x1a0>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d109      	bne.n	8000f12 <LKS_TASK+0xb6>
			{
				/* Set (Lane Keeping Status) Flag */
				LKS_Flag = 1;
 8000efe:	4b41      	ldr	r3, [pc, #260]	; (8001004 <LKS_TASK+0x1a8>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	701a      	strb	r2, [r3, #0]
				// Steer the car to the left
				Motor_voidMoveLeft(speed);
 8000f04:	4b39      	ldr	r3, [pc, #228]	; (8000fec <LKS_TASK+0x190>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 fc70 	bl	80017f0 <Motor_voidMoveLeft>
 8000f10:	e011      	b.n	8000f36 <LKS_TASK+0xda>

			}
			/* If the car drifts to the left / Lane markings are detected on the left side */
			else if (Left_IR == WHITE && Right_IR == BLACK)
 8000f12:	4b39      	ldr	r3, [pc, #228]	; (8000ff8 <LKS_TASK+0x19c>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d15f      	bne.n	8000fda <LKS_TASK+0x17e>
 8000f1a:	4b38      	ldr	r3, [pc, #224]	; (8000ffc <LKS_TASK+0x1a0>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d15b      	bne.n	8000fda <LKS_TASK+0x17e>
			{
				/* Set (Lane Keeping Status) Flag */
				LKS_Flag = 1;
 8000f22:	4b38      	ldr	r3, [pc, #224]	; (8001004 <LKS_TASK+0x1a8>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	701a      	strb	r2, [r3, #0]

				// Steer the car to the right
				Motor_voidMoveRight(speed);
 8000f28:	4b30      	ldr	r3, [pc, #192]	; (8000fec <LKS_TASK+0x190>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 fc3a 	bl	80017a8 <Motor_voidMoveRight>
			if ((Left_IR == BLACK) && (Right_IR == BLACK) )
 8000f34:	e051      	b.n	8000fda <LKS_TASK+0x17e>
 8000f36:	e050      	b.n	8000fda <LKS_TASK+0x17e>
			}
			else
			{/* Nothing */}
		}else if(Turn_Flag == T_OFF && speed > 20 &&  LKS_mode == LKS_STANDARD && (!AB_Flag))
 8000f38:	4b2b      	ldr	r3, [pc, #172]	; (8000fe8 <LKS_TASK+0x18c>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d14d      	bne.n	8000fdc <LKS_TASK+0x180>
 8000f40:	4b2a      	ldr	r3, [pc, #168]	; (8000fec <LKS_TASK+0x190>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b14      	cmp	r3, #20
 8000f46:	d949      	bls.n	8000fdc <LKS_TASK+0x180>
 8000f48:	4b29      	ldr	r3, [pc, #164]	; (8000ff0 <LKS_TASK+0x194>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d145      	bne.n	8000fdc <LKS_TASK+0x180>
 8000f50:	4b28      	ldr	r3, [pc, #160]	; (8000ff4 <LKS_TASK+0x198>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d141      	bne.n	8000fdc <LKS_TASK+0x180>
		{

			Left_IR = IRSensor_Read(LEFT_IR);
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f7ff fd2f 	bl	80009bc <IRSensor_Read>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b25      	ldr	r3, [pc, #148]	; (8000ff8 <LKS_TASK+0x19c>)
 8000f64:	701a      	strb	r2, [r3, #0]
			Right_IR = IRSensor_Read(RIGHT_IR);
 8000f66:	2001      	movs	r0, #1
 8000f68:	f7ff fd28 	bl	80009bc <IRSensor_Read>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4b22      	ldr	r3, [pc, #136]	; (8000ffc <LKS_TASK+0x1a0>)
 8000f72:	701a      	strb	r2, [r3, #0]
			/* If the car is inside the lane / No lane markings are detected on both sides */
			if ((Left_IR == BLACK) && (Right_IR == BLACK) )
 8000f74:	4b20      	ldr	r3, [pc, #128]	; (8000ff8 <LKS_TASK+0x19c>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d10c      	bne.n	8000f96 <LKS_TASK+0x13a>
 8000f7c:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <LKS_TASK+0x1a0>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d108      	bne.n	8000f96 <LKS_TASK+0x13a>
			{
				HAL_GPIO_WritePin(LKS_ALARM_GPIO_Port, LKS_ALARM_Pin, GPIO_PIN_RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2120      	movs	r1, #32
 8000f88:	4816      	ldr	r0, [pc, #88]	; (8000fe4 <LKS_TASK+0x188>)
 8000f8a:	f002 fb73 	bl	8003674 <HAL_GPIO_WritePin>

				LKS_Flag = 0;
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <LKS_TASK+0x1a8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]
 8000f94:	e022      	b.n	8000fdc <LKS_TASK+0x180>

			}
			/* If the car drifts to the right / Lane markings are detected on the right side */
			else if (Left_IR == BLACK && Right_IR == WHITE)
 8000f96:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <LKS_TASK+0x19c>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d10c      	bne.n	8000fb8 <LKS_TASK+0x15c>
 8000f9e:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <LKS_TASK+0x1a0>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d108      	bne.n	8000fb8 <LKS_TASK+0x15c>
			{
				/* Set (Lane Keeping Status) Flag */
				LKS_Flag = 1;
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <LKS_TASK+0x1a8>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	701a      	strb	r2, [r3, #0]

				// Indication led
				HAL_GPIO_WritePin(LKS_ALARM_GPIO_Port, LKS_ALARM_Pin, GPIO_PIN_SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	2120      	movs	r1, #32
 8000fb0:	480c      	ldr	r0, [pc, #48]	; (8000fe4 <LKS_TASK+0x188>)
 8000fb2:	f002 fb5f 	bl	8003674 <HAL_GPIO_WritePin>
 8000fb6:	e011      	b.n	8000fdc <LKS_TASK+0x180>
			}
			/* If the car drifts to the left / Lane markings are detected on the left side */
			else if (Left_IR == WHITE && Right_IR == BLACK)
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <LKS_TASK+0x19c>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d10d      	bne.n	8000fdc <LKS_TASK+0x180>
 8000fc0:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <LKS_TASK+0x1a0>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d109      	bne.n	8000fdc <LKS_TASK+0x180>
			{
				/* Set (Lane Keeping Status) Flag */
				LKS_Flag = 1;
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <LKS_TASK+0x1a8>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	701a      	strb	r2, [r3, #0]

				// Indication led
				HAL_GPIO_WritePin(LKS_ALARM_GPIO_Port, LKS_ALARM_Pin, GPIO_PIN_SET);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	2120      	movs	r1, #32
 8000fd2:	4804      	ldr	r0, [pc, #16]	; (8000fe4 <LKS_TASK+0x188>)
 8000fd4:	f002 fb4e 	bl	8003674 <HAL_GPIO_WritePin>
 8000fd8:	e000      	b.n	8000fdc <LKS_TASK+0x180>
			if ((Left_IR == BLACK) && (Right_IR == BLACK) )
 8000fda:	bf00      	nop
			}
			else
			{/* Nothing */}
		}

		osDelay(100);
 8000fdc:	2064      	movs	r0, #100	; 0x64
 8000fde:	f006 fc79 	bl	80078d4 <osDelay>
		HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 8000fe2:	e73f      	b.n	8000e64 <LKS_TASK+0x8>
 8000fe4:	48000400 	.word	0x48000400
 8000fe8:	20000094 	.word	0x20000094
 8000fec:	20000095 	.word	0x20000095
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	20000097 	.word	0x20000097
 8000ff8:	20000092 	.word	0x20000092
 8000ffc:	20000093 	.word	0x20000093
 8001000:	20000098 	.word	0x20000098
 8001004:	20000091 	.word	0x20000091

08001008 <ACC_TASK>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ACC_TASK */
void ACC_TASK(void *argument)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN ACC_TASK */

	uint8_t distance =0;
 8001010:	2300      	movs	r3, #0
 8001012:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for(;;)
	{


		distance = Get_Distance();
 8001014:	f7ff fe12 	bl	8000c3c <Get_Distance>
 8001018:	4603      	mov	r3, r0
 800101a:	73fb      	strb	r3, [r7, #15]
		if((!LKS_Flag) && (ACC_Flag) && speed > 20 && (!AB_Flag))
 800101c:	4b3c      	ldr	r3, [pc, #240]	; (8001110 <ACC_TASK+0x108>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d170      	bne.n	8001106 <ACC_TASK+0xfe>
 8001024:	4b3b      	ldr	r3, [pc, #236]	; (8001114 <ACC_TASK+0x10c>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d06c      	beq.n	8001106 <ACC_TASK+0xfe>
 800102c:	4b3a      	ldr	r3, [pc, #232]	; (8001118 <ACC_TASK+0x110>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b14      	cmp	r3, #20
 8001032:	d968      	bls.n	8001106 <ACC_TASK+0xfe>
 8001034:	4b39      	ldr	r3, [pc, #228]	; (800111c <ACC_TASK+0x114>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d164      	bne.n	8001106 <ACC_TASK+0xfe>
		{
			if(rxData==speed_0 || rxData==speed_1 ||rxData==speed_2 ||rxData==speed_3 ||rxData==speed_4 ||rxData==speed_5 ||rxData==speed_6 ||rxData==speed_7 ||rxData==speed_8 ||rxData==speed_9 ||rxData==speed_10 )
 800103c:	4b38      	ldr	r3, [pc, #224]	; (8001120 <ACC_TASK+0x118>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b30      	cmp	r3, #48	; 0x30
 8001042:	d027      	beq.n	8001094 <ACC_TASK+0x8c>
 8001044:	4b36      	ldr	r3, [pc, #216]	; (8001120 <ACC_TASK+0x118>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b31      	cmp	r3, #49	; 0x31
 800104a:	d023      	beq.n	8001094 <ACC_TASK+0x8c>
 800104c:	4b34      	ldr	r3, [pc, #208]	; (8001120 <ACC_TASK+0x118>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b32      	cmp	r3, #50	; 0x32
 8001052:	d01f      	beq.n	8001094 <ACC_TASK+0x8c>
 8001054:	4b32      	ldr	r3, [pc, #200]	; (8001120 <ACC_TASK+0x118>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b33      	cmp	r3, #51	; 0x33
 800105a:	d01b      	beq.n	8001094 <ACC_TASK+0x8c>
 800105c:	4b30      	ldr	r3, [pc, #192]	; (8001120 <ACC_TASK+0x118>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b34      	cmp	r3, #52	; 0x34
 8001062:	d017      	beq.n	8001094 <ACC_TASK+0x8c>
 8001064:	4b2e      	ldr	r3, [pc, #184]	; (8001120 <ACC_TASK+0x118>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b35      	cmp	r3, #53	; 0x35
 800106a:	d013      	beq.n	8001094 <ACC_TASK+0x8c>
 800106c:	4b2c      	ldr	r3, [pc, #176]	; (8001120 <ACC_TASK+0x118>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b36      	cmp	r3, #54	; 0x36
 8001072:	d00f      	beq.n	8001094 <ACC_TASK+0x8c>
 8001074:	4b2a      	ldr	r3, [pc, #168]	; (8001120 <ACC_TASK+0x118>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b37      	cmp	r3, #55	; 0x37
 800107a:	d00b      	beq.n	8001094 <ACC_TASK+0x8c>
 800107c:	4b28      	ldr	r3, [pc, #160]	; (8001120 <ACC_TASK+0x118>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b38      	cmp	r3, #56	; 0x38
 8001082:	d007      	beq.n	8001094 <ACC_TASK+0x8c>
 8001084:	4b26      	ldr	r3, [pc, #152]	; (8001120 <ACC_TASK+0x118>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b39      	cmp	r3, #57	; 0x39
 800108a:	d003      	beq.n	8001094 <ACC_TASK+0x8c>
 800108c:	4b24      	ldr	r3, [pc, #144]	; (8001120 <ACC_TASK+0x118>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b71      	cmp	r3, #113	; 0x71
 8001092:	d103      	bne.n	800109c <ACC_TASK+0x94>
			{
				ACC_Flag=0;
 8001094:	4b1f      	ldr	r3, [pc, #124]	; (8001114 <ACC_TASK+0x10c>)
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
 800109a:	e034      	b.n	8001106 <ACC_TASK+0xfe>
			}
			else
			{
				if ((distance < DEFAULT_DISTANCE) && (distance > MIN_DISTANCE))
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	2b13      	cmp	r3, #19
 80010a0:	d816      	bhi.n	80010d0 <ACC_TASK+0xc8>
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	2b05      	cmp	r3, #5
 80010a6:	d913      	bls.n	80010d0 <ACC_TASK+0xc8>
				{
					/* Calculate Adaptive Speed */
					HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	2120      	movs	r1, #32
 80010ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b0:	f002 fae0 	bl	8003674 <HAL_GPIO_WritePin>
					speed = MAX_SPEED - 2*(DEFAULT_DISTANCE - distance) ;
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	3314      	adds	r3, #20
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4b16      	ldr	r3, [pc, #88]	; (8001118 <ACC_TASK+0x110>)
 80010c0:	701a      	strb	r2, [r3, #0]
					Motor_voidMoveForward(speed);
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <ACC_TASK+0x110>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	4618      	mov	r0, r3
 80010ca:	f000 fb25 	bl	8001718 <Motor_voidMoveForward>
 80010ce:	e01a      	b.n	8001106 <ACC_TASK+0xfe>
				}
				else if (distance <= MIN_DISTANCE)
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	2b05      	cmp	r3, #5
 80010d4:	d805      	bhi.n	80010e2 <ACC_TASK+0xda>
				{
					/* very low distance < 20 --> car stop */
					Motor_voidStop();
 80010d6:	f000 fbaf 	bl	8001838 <Motor_voidStop>
					speed = 0;
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <ACC_TASK+0x110>)
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
 80010e0:	e011      	b.n	8001106 <ACC_TASK+0xfe>
				}
				else if (distance >= DEFAULT_DISTANCE)
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	2b13      	cmp	r3, #19
 80010e6:	d90e      	bls.n	8001106 <ACC_TASK+0xfe>
				{
					HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2120      	movs	r1, #32
 80010ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f0:	f002 fac0 	bl	8003674 <HAL_GPIO_WritePin>
					speed = MAX_SPEED;
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <ACC_TASK+0x110>)
 80010f6:	2250      	movs	r2, #80	; 0x50
 80010f8:	701a      	strb	r2, [r3, #0]
					Motor_voidMoveForward(speed);
 80010fa:	4b07      	ldr	r3, [pc, #28]	; (8001118 <ACC_TASK+0x110>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	b29b      	uxth	r3, r3
 8001100:	4618      	mov	r0, r3
 8001102:	f000 fb09 	bl	8001718 <Motor_voidMoveForward>



		}
		else{/* Nothing */}
		osDelay(100);
 8001106:	2064      	movs	r0, #100	; 0x64
 8001108:	f006 fbe4 	bl	80078d4 <osDelay>
		distance = Get_Distance();
 800110c:	e782      	b.n	8001014 <ACC_TASK+0xc>
 800110e:	bf00      	nop
 8001110:	20000091 	.word	0x20000091
 8001114:	20000090 	.word	0x20000090
 8001118:	20000095 	.word	0x20000095
 800111c:	20000097 	.word	0x20000097
 8001120:	20000096 	.word	0x20000096

08001124 <AB_TASK>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_AB_TASK */
void AB_TASK(void *argument)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AB_TASK */

	uint8_t distance =0;
 800112c:	2300      	movs	r3, #0
 800112e:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */

	for(;;)
	{
		distance = Get_Distance();
 8001130:	f7ff fd84 	bl	8000c3c <Get_Distance>
 8001134:	4603      	mov	r3, r0
 8001136:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_TogglePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin);
 8001138:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800113c:	480d      	ldr	r0, [pc, #52]	; (8001174 <AB_TASK+0x50>)
 800113e:	f002 fab1 	bl	80036a4 <HAL_GPIO_TogglePin>
		if (distance > 10 )
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	2b0a      	cmp	r3, #10
 8001146:	d909      	bls.n	800115c <AB_TASK+0x38>
		{
			AB_Flag =0;
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <AB_TASK+0x54>)
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(AB_ALARM_GPIO_Port,AB_ALARM_Pin,GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001154:	4807      	ldr	r0, [pc, #28]	; (8001174 <AB_TASK+0x50>)
 8001156:	f002 fa8d 	bl	8003674 <HAL_GPIO_WritePin>
 800115a:	e7e9      	b.n	8001130 <AB_TASK+0xc>
		}
		else
		{
			AB_Flag =1;
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <AB_TASK+0x54>)
 800115e:	2201      	movs	r2, #1
 8001160:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(AB_ALARM_GPIO_Port,AB_ALARM_Pin,GPIO_PIN_SET);
 8001162:	2201      	movs	r2, #1
 8001164:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001168:	4802      	ldr	r0, [pc, #8]	; (8001174 <AB_TASK+0x50>)
 800116a:	f002 fa83 	bl	8003674 <HAL_GPIO_WritePin>
			Motor_voidStop();
 800116e:	f000 fb63 	bl	8001838 <Motor_voidStop>
		distance = Get_Distance();
 8001172:	e7dd      	b.n	8001130 <AB_TASK+0xc>
 8001174:	48000400 	.word	0x48000400
 8001178:	20000097 	.word	0x20000097

0800117c <BLUETOOTH_TASK>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_BLUETOOTH_TASK */
void BLUETOOTH_TASK(void *argument)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	for(;;)
	{



		HAL_UART_Receive(&huart1,&rxData,1,50);
 8001184:	2332      	movs	r3, #50	; 0x32
 8001186:	2201      	movs	r2, #1
 8001188:	4996      	ldr	r1, [pc, #600]	; (80013e4 <BLUETOOTH_TASK+0x268>)
 800118a:	4897      	ldr	r0, [pc, #604]	; (80013e8 <BLUETOOTH_TASK+0x26c>)
 800118c:	f005 fddc 	bl	8006d48 <HAL_UART_Receive>
		if(!AB_Flag)
 8001190:	4b96      	ldr	r3, [pc, #600]	; (80013ec <BLUETOOTH_TASK+0x270>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	f040 8121 	bne.w	80013dc <BLUETOOTH_TASK+0x260>
		{


			/* USER CODE END WHILE */
			switch (rxData) {
 800119a:	4b92      	ldr	r3, [pc, #584]	; (80013e4 <BLUETOOTH_TASK+0x268>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	3b30      	subs	r3, #48	; 0x30
 80011a0:	2b47      	cmp	r3, #71	; 0x47
 80011a2:	f200 811a 	bhi.w	80013da <BLUETOOTH_TASK+0x25e>
 80011a6:	a201      	add	r2, pc, #4	; (adr r2, 80011ac <BLUETOOTH_TASK+0x30>)
 80011a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ac:	08001341 	.word	0x08001341
 80011b0:	0800134f 	.word	0x0800134f
 80011b4:	0800135d 	.word	0x0800135d
 80011b8:	0800136b 	.word	0x0800136b
 80011bc:	08001379 	.word	0x08001379
 80011c0:	08001387 	.word	0x08001387
 80011c4:	08001395 	.word	0x08001395
 80011c8:	080013a3 	.word	0x080013a3
 80011cc:	080013b1 	.word	0x080013b1
 80011d0:	080013bf 	.word	0x080013bf
 80011d4:	080013db 	.word	0x080013db
 80011d8:	080013db 	.word	0x080013db
 80011dc:	080013db 	.word	0x080013db
 80011e0:	080013db 	.word	0x080013db
 80011e4:	080013db 	.word	0x080013db
 80011e8:	080013db 	.word	0x080013db
 80011ec:	080013db 	.word	0x080013db
 80011f0:	080013db 	.word	0x080013db
 80011f4:	080012ef 	.word	0x080012ef
 80011f8:	080013db 	.word	0x080013db
 80011fc:	080013db 	.word	0x080013db
 8001200:	080013db 	.word	0x080013db
 8001204:	080012cd 	.word	0x080012cd
 8001208:	080013db 	.word	0x080013db
 800120c:	080013db 	.word	0x080013db
 8001210:	080013db 	.word	0x080013db
 8001214:	080013db 	.word	0x080013db
 8001218:	080013db 	.word	0x080013db
 800121c:	080012e1 	.word	0x080012e1
 8001220:	080013db 	.word	0x080013db
 8001224:	080013db 	.word	0x080013db
 8001228:	080013db 	.word	0x080013db
 800122c:	080013db 	.word	0x080013db
 8001230:	080013db 	.word	0x080013db
 8001234:	08001303 	.word	0x08001303
 8001238:	080013db 	.word	0x080013db
 800123c:	080013db 	.word	0x080013db
 8001240:	08001319 	.word	0x08001319
 8001244:	08001331 	.word	0x08001331
 8001248:	08001321 	.word	0x08001321
 800124c:	080013db 	.word	0x080013db
 8001250:	080013db 	.word	0x080013db
 8001254:	080013db 	.word	0x080013db
 8001258:	080013db 	.word	0x080013db
 800125c:	080013db 	.word	0x080013db
 8001260:	080013db 	.word	0x080013db
 8001264:	080013db 	.word	0x080013db
 8001268:	080013db 	.word	0x080013db
 800126c:	080013db 	.word	0x080013db
 8001270:	080013db 	.word	0x080013db
 8001274:	080013db 	.word	0x080013db
 8001278:	080013db 	.word	0x080013db
 800127c:	080013db 	.word	0x080013db
 8001280:	080013db 	.word	0x080013db
 8001284:	080013db 	.word	0x080013db
 8001288:	080013db 	.word	0x080013db
 800128c:	080013db 	.word	0x080013db
 8001290:	080013db 	.word	0x080013db
 8001294:	080013db 	.word	0x080013db
 8001298:	080013db 	.word	0x080013db
 800129c:	080013db 	.word	0x080013db
 80012a0:	080013db 	.word	0x080013db
 80012a4:	080013db 	.word	0x080013db
 80012a8:	080013db 	.word	0x080013db
 80012ac:	080013db 	.word	0x080013db
 80012b0:	080013cd 	.word	0x080013cd
 80012b4:	080013db 	.word	0x080013db
 80012b8:	080013db 	.word	0x080013db
 80012bc:	080013db 	.word	0x080013db
 80012c0:	08001311 	.word	0x08001311
 80012c4:	08001339 	.word	0x08001339
 80012c8:	08001329 	.word	0x08001329

			case MOVE_FORWARD:
				Motor_voidMoveForward(speed); // motor forward  (e.g., motor control)
 80012cc:	4b48      	ldr	r3, [pc, #288]	; (80013f0 <BLUETOOTH_TASK+0x274>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 fa20 	bl	8001718 <Motor_voidMoveForward>
				Return_flag=1;
 80012d8:	4b46      	ldr	r3, [pc, #280]	; (80013f4 <BLUETOOTH_TASK+0x278>)
 80012da:	2201      	movs	r2, #1
 80012dc:	701a      	strb	r2, [r3, #0]
				break;
 80012de:	e07d      	b.n	80013dc <BLUETOOTH_TASK+0x260>
			case MOVE_LEFT:
				Motor_voidMoveLeft(speed); // motor move left (e.g., motor control)
 80012e0:	4b43      	ldr	r3, [pc, #268]	; (80013f0 <BLUETOOTH_TASK+0x274>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 fa82 	bl	80017f0 <Motor_voidMoveLeft>
				break;
 80012ec:	e076      	b.n	80013dc <BLUETOOTH_TASK+0x260>
			case MOVE_BACKWARD:
				Motor_voidMoveBackward(speed); // motor backward
 80012ee:	4b40      	ldr	r3, [pc, #256]	; (80013f0 <BLUETOOTH_TASK+0x274>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 fa33 	bl	8001760 <Motor_voidMoveBackward>
				Return_flag=0;
 80012fa:	4b3e      	ldr	r3, [pc, #248]	; (80013f4 <BLUETOOTH_TASK+0x278>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	701a      	strb	r2, [r3, #0]
				break;
 8001300:	e06c      	b.n	80013dc <BLUETOOTH_TASK+0x260>
			case MOVE_RIGHT:
				Motor_voidMoveRight(speed); // motor move right
 8001302:	4b3b      	ldr	r3, [pc, #236]	; (80013f0 <BLUETOOTH_TASK+0x274>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	b29b      	uxth	r3, r3
 8001308:	4618      	mov	r0, r3
 800130a:	f000 fa4d 	bl	80017a8 <Motor_voidMoveRight>
				break;
 800130e:	e065      	b.n	80013dc <BLUETOOTH_TASK+0x260>
			case LANE_KEEP_ASSIST_STANDARD:
				LKS_mode = LKS_STANDARD;
 8001310:	4b39      	ldr	r3, [pc, #228]	; (80013f8 <BLUETOOTH_TASK+0x27c>)
 8001312:	2202      	movs	r2, #2
 8001314:	701a      	strb	r2, [r3, #0]

				break;
 8001316:	e061      	b.n	80013dc <BLUETOOTH_TASK+0x260>
			case LANE_KEEP_ASSIST_ADAPTIVE:
				LKS_mode = LKS_ADAPTIVE;
 8001318:	4b37      	ldr	r3, [pc, #220]	; (80013f8 <BLUETOOTH_TASK+0x27c>)
 800131a:	2203      	movs	r2, #3
 800131c:	701a      	strb	r2, [r3, #0]

				break;
 800131e:	e05d      	b.n	80013dc <BLUETOOTH_TASK+0x260>
			case CRUISE_CONTROL_ON:
				ACC_Flag = 1;
 8001320:	4b36      	ldr	r3, [pc, #216]	; (80013fc <BLUETOOTH_TASK+0x280>)
 8001322:	2201      	movs	r2, #1
 8001324:	701a      	strb	r2, [r3, #0]

				break;
 8001326:	e059      	b.n	80013dc <BLUETOOTH_TASK+0x260>
			case CRUISE_CONTROL_OFF:
				ACC_Flag =0;
 8001328:	4b34      	ldr	r3, [pc, #208]	; (80013fc <BLUETOOTH_TASK+0x280>)
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]

				break;
 800132e:	e055      	b.n	80013dc <BLUETOOTH_TASK+0x260>
			case SIGNAL_ON:
				Turn_Flag = T_ON;
 8001330:	4b33      	ldr	r3, [pc, #204]	; (8001400 <BLUETOOTH_TASK+0x284>)
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]
				break;
 8001336:	e051      	b.n	80013dc <BLUETOOTH_TASK+0x260>
			case SIGNAL_OFF:
				Turn_Flag = T_OFF;
 8001338:	4b31      	ldr	r3, [pc, #196]	; (8001400 <BLUETOOTH_TASK+0x284>)
 800133a:	2200      	movs	r2, #0
 800133c:	701a      	strb	r2, [r3, #0]
				break;
 800133e:	e04d      	b.n	80013dc <BLUETOOTH_TASK+0x260>

			case speed_0:  //
				speed = 0;
 8001340:	4b2b      	ldr	r3, [pc, #172]	; (80013f0 <BLUETOOTH_TASK+0x274>)
 8001342:	2200      	movs	r2, #0
 8001344:	701a      	strb	r2, [r3, #0]
				Motor_voidControlSpeed(0);
 8001346:	2000      	movs	r0, #0
 8001348:	f000 f9d6 	bl	80016f8 <Motor_voidControlSpeed>
				break;
 800134c:	e046      	b.n	80013dc <BLUETOOTH_TASK+0x260>
			case speed_1:
				speed = 10;
 800134e:	4b28      	ldr	r3, [pc, #160]	; (80013f0 <BLUETOOTH_TASK+0x274>)
 8001350:	220a      	movs	r2, #10
 8001352:	701a      	strb	r2, [r3, #0]
				Motor_voidControlSpeed(10);
 8001354:	200a      	movs	r0, #10
 8001356:	f000 f9cf 	bl	80016f8 <Motor_voidControlSpeed>
				break;
 800135a:	e03f      	b.n	80013dc <BLUETOOTH_TASK+0x260>
			case speed_2:  // Assuming 120 is the code for standard mode
				speed = 20;
 800135c:	4b24      	ldr	r3, [pc, #144]	; (80013f0 <BLUETOOTH_TASK+0x274>)
 800135e:	2214      	movs	r2, #20
 8001360:	701a      	strb	r2, [r3, #0]
				Motor_voidControlSpeed(20);
 8001362:	2014      	movs	r0, #20
 8001364:	f000 f9c8 	bl	80016f8 <Motor_voidControlSpeed>
				break;
 8001368:	e038      	b.n	80013dc <BLUETOOTH_TASK+0x260>
			case speed_3:
				speed = 30;
 800136a:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <BLUETOOTH_TASK+0x274>)
 800136c:	221e      	movs	r2, #30
 800136e:	701a      	strb	r2, [r3, #0]
				Motor_voidControlSpeed(30);
 8001370:	201e      	movs	r0, #30
 8001372:	f000 f9c1 	bl	80016f8 <Motor_voidControlSpeed>
				break;
 8001376:	e031      	b.n	80013dc <BLUETOOTH_TASK+0x260>
			case speed_4:
				speed = 40;
 8001378:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <BLUETOOTH_TASK+0x274>)
 800137a:	2228      	movs	r2, #40	; 0x28
 800137c:	701a      	strb	r2, [r3, #0]
				Motor_voidControlSpeed(40);
 800137e:	2028      	movs	r0, #40	; 0x28
 8001380:	f000 f9ba 	bl	80016f8 <Motor_voidControlSpeed>
				break;
 8001384:	e02a      	b.n	80013dc <BLUETOOTH_TASK+0x260>
			case speed_5:
				speed = 50;
 8001386:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <BLUETOOTH_TASK+0x274>)
 8001388:	2232      	movs	r2, #50	; 0x32
 800138a:	701a      	strb	r2, [r3, #0]
				Motor_voidControlSpeed(50);
 800138c:	2032      	movs	r0, #50	; 0x32
 800138e:	f000 f9b3 	bl	80016f8 <Motor_voidControlSpeed>
				break;
 8001392:	e023      	b.n	80013dc <BLUETOOTH_TASK+0x260>
			case speed_6:
				speed = 60;
 8001394:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <BLUETOOTH_TASK+0x274>)
 8001396:	223c      	movs	r2, #60	; 0x3c
 8001398:	701a      	strb	r2, [r3, #0]
				Motor_voidControlSpeed(60);
 800139a:	203c      	movs	r0, #60	; 0x3c
 800139c:	f000 f9ac 	bl	80016f8 <Motor_voidControlSpeed>
				break;
 80013a0:	e01c      	b.n	80013dc <BLUETOOTH_TASK+0x260>
			case speed_7:
				speed = 70;
 80013a2:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <BLUETOOTH_TASK+0x274>)
 80013a4:	2246      	movs	r2, #70	; 0x46
 80013a6:	701a      	strb	r2, [r3, #0]
				Motor_voidControlSpeed(70);
 80013a8:	2046      	movs	r0, #70	; 0x46
 80013aa:	f000 f9a5 	bl	80016f8 <Motor_voidControlSpeed>
				break;
 80013ae:	e015      	b.n	80013dc <BLUETOOTH_TASK+0x260>
			case speed_8:
				speed = 80;
 80013b0:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <BLUETOOTH_TASK+0x274>)
 80013b2:	2250      	movs	r2, #80	; 0x50
 80013b4:	701a      	strb	r2, [r3, #0]
				Motor_voidControlSpeed(80);
 80013b6:	2050      	movs	r0, #80	; 0x50
 80013b8:	f000 f99e 	bl	80016f8 <Motor_voidControlSpeed>
				break;
 80013bc:	e00e      	b.n	80013dc <BLUETOOTH_TASK+0x260>
			case speed_9:
				speed = 90;
 80013be:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <BLUETOOTH_TASK+0x274>)
 80013c0:	225a      	movs	r2, #90	; 0x5a
 80013c2:	701a      	strb	r2, [r3, #0]
				Motor_voidControlSpeed(90);
 80013c4:	205a      	movs	r0, #90	; 0x5a
 80013c6:	f000 f997 	bl	80016f8 <Motor_voidControlSpeed>
				break;
 80013ca:	e007      	b.n	80013dc <BLUETOOTH_TASK+0x260>
			case speed_10:
				speed = 100;
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <BLUETOOTH_TASK+0x274>)
 80013ce:	2264      	movs	r2, #100	; 0x64
 80013d0:	701a      	strb	r2, [r3, #0]
				Motor_voidControlSpeed(100);
 80013d2:	2064      	movs	r0, #100	; 0x64
 80013d4:	f000 f990 	bl	80016f8 <Motor_voidControlSpeed>
				break;
 80013d8:	e000      	b.n	80013dc <BLUETOOTH_TASK+0x260>
			default:
				// Handle unexpected data (optional)
				// You might want to print an error message or take some action here.
				break;
 80013da:	bf00      	nop

			}

		}
		osDelay(1);
 80013dc:	2001      	movs	r0, #1
 80013de:	f006 fa79 	bl	80078d4 <osDelay>
		HAL_UART_Receive(&huart1,&rxData,1,50);
 80013e2:	e6cf      	b.n	8001184 <BLUETOOTH_TASK+0x8>
 80013e4:	20000096 	.word	0x20000096
 80013e8:	20000198 	.word	0x20000198
 80013ec:	20000097 	.word	0x20000097
 80013f0:	20000095 	.word	0x20000095
 80013f4:	20000098 	.word	0x20000098
 80013f8:	20000000 	.word	0x20000000
 80013fc:	20000090 	.word	0x20000090
 8001400:	20000094 	.word	0x20000094

08001404 <ALC_TASK>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ALC_TASK */
void ALC_TASK(void *argument)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN ALC_TASK */
	uint8_t LDR_Value = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for(;;)
	{
		LDR_Value = LDR_u8GetValue();
 8001410:	f7ff faf8 	bl	8000a04 <LDR_u8GetValue>
 8001414:	4603      	mov	r3, r0
 8001416:	73fb      	strb	r3, [r7, #15]
		if(LDR_Value >= 93)
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	2b5c      	cmp	r3, #92	; 0x5c
 800141c:	d903      	bls.n	8001426 <ALC_TASK+0x22>
		{
			/* front Lead with Max lighting */
			TIM3->CCR3 = 98 ;
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <ALC_TASK+0x60>)
 8001420:	2262      	movs	r2, #98	; 0x62
 8001422:	63da      	str	r2, [r3, #60]	; 0x3c
 8001424:	e018      	b.n	8001458 <ALC_TASK+0x54>
		}
		else if(LDR_Value < 93 || LDR_Value >= 80)
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	2b5c      	cmp	r3, #92	; 0x5c
 800142a:	d902      	bls.n	8001432 <ALC_TASK+0x2e>
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	2b4f      	cmp	r3, #79	; 0x4f
 8001430:	d903      	bls.n	800143a <ALC_TASK+0x36>
		{
			/* front Led with adaptive lighting*/
			TIM3->CCR3 =  LDR_Value;
 8001432:	4a0c      	ldr	r2, [pc, #48]	; (8001464 <ALC_TASK+0x60>)
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001438:	e00e      	b.n	8001458 <ALC_TASK+0x54>
		}
		else if(LDR_Value < 80 || LDR_Value > 10)
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	2b4f      	cmp	r3, #79	; 0x4f
 800143e:	d902      	bls.n	8001446 <ALC_TASK+0x42>
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	2b0a      	cmp	r3, #10
 8001444:	d905      	bls.n	8001452 <ALC_TASK+0x4e>
		{
			/* front Led with Low lighting */
			TIM3->CCR3 =  (LDR_Value ) / 2 ;
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	085b      	lsrs	r3, r3, #1
 800144a:	b2da      	uxtb	r2, r3
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <ALC_TASK+0x60>)
 800144e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001450:	e002      	b.n	8001458 <ALC_TASK+0x54>
		}
		else
		{
			/* front Led Off*/
			TIM3->CCR3 =  0 ;
 8001452:	4b04      	ldr	r3, [pc, #16]	; (8001464 <ALC_TASK+0x60>)
 8001454:	2200      	movs	r2, #0
 8001456:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		osDelay(500);
 8001458:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800145c:	f006 fa3a 	bl	80078d4 <osDelay>
		LDR_Value = LDR_u8GetValue();
 8001460:	e7d6      	b.n	8001410 <ALC_TASK+0xc>
 8001462:	bf00      	nop
 8001464:	40000400 	.word	0x40000400

08001468 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	; 0x28
 800146c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
 800147c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800147e:	4b3c      	ldr	r3, [pc, #240]	; (8001570 <MX_GPIO_Init+0x108>)
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	4a3b      	ldr	r2, [pc, #236]	; (8001570 <MX_GPIO_Init+0x108>)
 8001484:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001488:	6153      	str	r3, [r2, #20]
 800148a:	4b39      	ldr	r3, [pc, #228]	; (8001570 <MX_GPIO_Init+0x108>)
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001496:	4b36      	ldr	r3, [pc, #216]	; (8001570 <MX_GPIO_Init+0x108>)
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	4a35      	ldr	r2, [pc, #212]	; (8001570 <MX_GPIO_Init+0x108>)
 800149c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014a0:	6153      	str	r3, [r2, #20]
 80014a2:	4b33      	ldr	r3, [pc, #204]	; (8001570 <MX_GPIO_Init+0x108>)
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	4b30      	ldr	r3, [pc, #192]	; (8001570 <MX_GPIO_Init+0x108>)
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	4a2f      	ldr	r2, [pc, #188]	; (8001570 <MX_GPIO_Init+0x108>)
 80014b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b8:	6153      	str	r3, [r2, #20]
 80014ba:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <MX_GPIO_Init+0x108>)
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c6:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <MX_GPIO_Init+0x108>)
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	4a29      	ldr	r2, [pc, #164]	; (8001570 <MX_GPIO_Init+0x108>)
 80014cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014d0:	6153      	str	r3, [r2, #20]
 80014d2:	4b27      	ldr	r3, [pc, #156]	; (8001570 <MX_GPIO_Init+0x108>)
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014de:	2200      	movs	r2, #0
 80014e0:	2120      	movs	r1, #32
 80014e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e6:	f002 f8c5 	bl	8003674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIG_Pin|LED_LEFT_Pin|LED_RIGHT_Pin|AB_ALARM_Pin
 80014ea:	2200      	movs	r2, #0
 80014ec:	f24e 41f8 	movw	r1, #58616	; 0xe4f8
 80014f0:	4820      	ldr	r0, [pc, #128]	; (8001574 <MX_GPIO_Init+0x10c>)
 80014f2:	f002 f8bf 	bl	8003674 <HAL_GPIO_WritePin>
                          |MOTOR1_D1_Pin|MOTOR1_D2_Pin|LKS_ALARM_Pin|MOTOR2_D1_Pin
                          |MOTOR2_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014fc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	4619      	mov	r1, r3
 800150c:	481a      	ldr	r0, [pc, #104]	; (8001578 <MX_GPIO_Init+0x110>)
 800150e:	f001 ff0f 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001512:	2320      	movs	r3, #32
 8001514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001516:	2301      	movs	r3, #1
 8001518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800152c:	f001 ff00 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = TRIG_Pin|LED_LEFT_Pin|LED_RIGHT_Pin|AB_ALARM_Pin
 8001530:	f24e 43f8 	movw	r3, #58616	; 0xe4f8
 8001534:	617b      	str	r3, [r7, #20]
                          |MOTOR1_D1_Pin|MOTOR1_D2_Pin|LKS_ALARM_Pin|MOTOR2_D1_Pin
                          |MOTOR2_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001536:	2301      	movs	r3, #1
 8001538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	2300      	movs	r3, #0
 8001540:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	4619      	mov	r1, r3
 8001548:	480a      	ldr	r0, [pc, #40]	; (8001574 <MX_GPIO_Init+0x10c>)
 800154a:	f001 fef1 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IR_LEFT_Pin|IR_RIGHT_Pin;
 800154e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001554:	2300      	movs	r3, #0
 8001556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001558:	2302      	movs	r3, #2
 800155a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	4619      	mov	r1, r3
 8001562:	4804      	ldr	r0, [pc, #16]	; (8001574 <MX_GPIO_Init+0x10c>)
 8001564:	f001 fee4 	bl	8003330 <HAL_GPIO_Init>

}
 8001568:	bf00      	nop
 800156a:	3728      	adds	r7, #40	; 0x28
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40021000 	.word	0x40021000
 8001574:	48000400 	.word	0x48000400
 8001578:	48000800 	.word	0x48000800

0800157c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001580:	f000 fcf8 	bl	8001f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001584:	f000 f822 	bl	80015cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001588:	f7ff ff6e 	bl	8001468 <MX_GPIO_Init>
  MX_TIM3_Init();
 800158c:	f000 fa42 	bl	8001a14 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001590:	f000 facc 	bl	8001b2c <MX_TIM4_Init>
  MX_ADC1_Init();
 8001594:	f7ff fb60 	bl	8000c58 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001598:	f000 fbee 	bl	8001d78 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800159c:	f000 fc1c 	bl	8001dd8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	Motor_voidInit();
 80015a0:	f000 f894 	bl	80016cc <Motor_voidInit>
	HCSR04_Init();
 80015a4:	f7ff fb20 	bl	8000be8 <HCSR04_Init>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 80015a8:	2108      	movs	r1, #8
 80015aa:	4806      	ldr	r0, [pc, #24]	; (80015c4 <main+0x48>)
 80015ac:	f003 fe98 	bl	80052e0 <HAL_TIM_PWM_Start>
	  HAL_ADC_MspInit(&hadc1);
 80015b0:	4805      	ldr	r0, [pc, #20]	; (80015c8 <main+0x4c>)
 80015b2:	f7ff fbc1 	bl	8000d38 <HAL_ADC_MspInit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80015b6:	f006 f87b 	bl	80076b0 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80015ba:	f7ff fbf9 	bl	8000db0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80015be:	f006 f8ab 	bl	8007718 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80015c2:	e7fe      	b.n	80015c2 <main+0x46>
 80015c4:	20000100 	.word	0x20000100
 80015c8:	20000040 	.word	0x20000040

080015cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b0a6      	sub	sp, #152	; 0x98
 80015d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015d6:	2228      	movs	r2, #40	; 0x28
 80015d8:	2100      	movs	r1, #0
 80015da:	4618      	mov	r0, r3
 80015dc:	f008 ff3e 	bl	800a45c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	2258      	movs	r2, #88	; 0x58
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f008 ff30 	bl	800a45c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015fc:	2302      	movs	r3, #2
 80015fe:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001600:	2301      	movs	r3, #1
 8001602:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001604:	2310      	movs	r3, #16
 8001606:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800160a:	2302      	movs	r3, #2
 800160c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001610:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001614:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001618:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800161c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001620:	2300      	movs	r3, #0
 8001622:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001626:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800162a:	4618      	mov	r0, r3
 800162c:	f002 f854 	bl	80036d8 <HAL_RCC_OscConfig>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001636:	f000 f843 	bl	80016c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800163a:	230f      	movs	r3, #15
 800163c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800163e:	2302      	movs	r3, #2
 8001640:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001642:	2300      	movs	r3, #0
 8001644:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800164a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800164c:	2300      	movs	r3, #0
 800164e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001650:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001654:	2102      	movs	r1, #2
 8001656:	4618      	mov	r0, r3
 8001658:	f003 f892 	bl	8004780 <HAL_RCC_ClockConfig>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001662:	f000 f82d 	bl	80016c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <SystemClock_Config+0xcc>)
 8001668:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001672:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001676:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8001678:	2300      	movs	r3, #0
 800167a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800167c:	1d3b      	adds	r3, r7, #4
 800167e:	4618      	mov	r0, r3
 8001680:	f003 fae6 	bl	8004c50 <HAL_RCCEx_PeriphCLKConfig>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800168a:	f000 f819 	bl	80016c0 <Error_Handler>
  }
}
 800168e:	bf00      	nop
 8001690:	3798      	adds	r7, #152	; 0x98
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	00200083 	.word	0x00200083

0800169c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a04      	ldr	r2, [pc, #16]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d101      	bne.n	80016b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016ae:	f000 fc77 	bl	8001fa0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40012c00 	.word	0x40012c00

080016c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c4:	b672      	cpsid	i
}
 80016c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80016c8:	e7fe      	b.n	80016c8 <Error_Handler+0x8>
	...

080016cc <Motor_voidInit>:
  * @brief  Initializes motor's pins.
  * @param  None
  * @retval None
  */
void Motor_voidInit(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
	/* Generate PWM for the four motors*/
	TIM3->CCR1 = 0;
 80016d0:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <Motor_voidInit+0x24>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	635a      	str	r2, [r3, #52]	; 0x34

	TIM3->CCR2 = 100;
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <Motor_voidInit+0x24>)
 80016d8:	2264      	movs	r2, #100	; 0x64
 80016da:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80016dc:	2100      	movs	r1, #0
 80016de:	4805      	ldr	r0, [pc, #20]	; (80016f4 <Motor_voidInit+0x28>)
 80016e0:	f003 fdfe 	bl	80052e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2); /* Give same PWM signal to motor1  */
 80016e4:	2104      	movs	r1, #4
 80016e6:	4803      	ldr	r0, [pc, #12]	; (80016f4 <Motor_voidInit+0x28>)
 80016e8:	f003 fdfa 	bl	80052e0 <HAL_TIM_PWM_Start>
	 /* Give same PWM signal to motor2  */

}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40000400 	.word	0x40000400
 80016f4:	20000100 	.word	0x20000100

080016f8 <Motor_voidControlSpeed>:
  * @brief  Give Duty cycle to the motor to can move it by the speed which you need  .
  * @param  DutyCycle value of Duty cycle (0-->100) for PWM signal
  * @retval None
  */
void Motor_voidControlSpeed(uint16_t DutyCycle)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	80fb      	strh	r3, [r7, #6]


	TIM3->CCR1 = DutyCycle;
 8001702:	4a04      	ldr	r2, [pc, #16]	; (8001714 <Motor_voidControlSpeed+0x1c>)
 8001704:	88fb      	ldrh	r3, [r7, #6]
 8001706:	6353      	str	r3, [r2, #52]	; 0x34


}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	40000400 	.word	0x40000400

08001718 <Motor_voidMoveForward>:
  * @brief  Move motor forward.
  * @param  None
  * @retval None
  */
void Motor_voidMoveForward(uint16_t DutyCycle)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	80fb      	strh	r3, [r7, #6]
	/* STOP the Front motor  */
	HAL_GPIO_WritePin(MOTOR1_D1_GPIO_Port, MOTOR1_D1_Pin, GPIO_PIN_RESET);
 8001722:	2200      	movs	r2, #0
 8001724:	2108      	movs	r1, #8
 8001726:	480d      	ldr	r0, [pc, #52]	; (800175c <Motor_voidMoveForward+0x44>)
 8001728:	f001 ffa4 	bl	8003674 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR1_D2_GPIO_Port, MOTOR1_D2_Pin, GPIO_PIN_RESET);
 800172c:	2200      	movs	r2, #0
 800172e:	2110      	movs	r1, #16
 8001730:	480a      	ldr	r0, [pc, #40]	; (800175c <Motor_voidMoveForward+0x44>)
 8001732:	f001 ff9f 	bl	8003674 <HAL_GPIO_WritePin>
	/* Turn on The back motor  */
	HAL_GPIO_WritePin(MOTOR2_D1_GPIO_Port, MOTOR2_D1_Pin, GPIO_PIN_SET);
 8001736:	2201      	movs	r2, #1
 8001738:	2140      	movs	r1, #64	; 0x40
 800173a:	4808      	ldr	r0, [pc, #32]	; (800175c <Motor_voidMoveForward+0x44>)
 800173c:	f001 ff9a 	bl	8003674 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR2_D2_GPIO_Port, MOTOR2_D2_Pin, GPIO_PIN_RESET);
 8001740:	2200      	movs	r2, #0
 8001742:	2180      	movs	r1, #128	; 0x80
 8001744:	4805      	ldr	r0, [pc, #20]	; (800175c <Motor_voidMoveForward+0x44>)
 8001746:	f001 ff95 	bl	8003674 <HAL_GPIO_WritePin>
	Motor_voidControlSpeed(DutyCycle);
 800174a:	88fb      	ldrh	r3, [r7, #6]
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ffd3 	bl	80016f8 <Motor_voidControlSpeed>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	48000400 	.word	0x48000400

08001760 <Motor_voidMoveBackward>:
  * @brief Move motor backward.
  * @param  None
  * @retval None
  */
void Motor_voidMoveBackward(uint16_t DutyCycle)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	80fb      	strh	r3, [r7, #6]
	/* STOP the Front motor  */
		HAL_GPIO_WritePin(MOTOR1_D1_GPIO_Port, MOTOR1_D1_Pin, GPIO_PIN_RESET);
 800176a:	2200      	movs	r2, #0
 800176c:	2108      	movs	r1, #8
 800176e:	480d      	ldr	r0, [pc, #52]	; (80017a4 <Motor_voidMoveBackward+0x44>)
 8001770:	f001 ff80 	bl	8003674 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR1_D2_GPIO_Port, MOTOR1_D2_Pin, GPIO_PIN_RESET);
 8001774:	2200      	movs	r2, #0
 8001776:	2110      	movs	r1, #16
 8001778:	480a      	ldr	r0, [pc, #40]	; (80017a4 <Motor_voidMoveBackward+0x44>)
 800177a:	f001 ff7b 	bl	8003674 <HAL_GPIO_WritePin>
		/* Turn on The back motor  */
		HAL_GPIO_WritePin(MOTOR2_D1_GPIO_Port, MOTOR2_D1_Pin, GPIO_PIN_RESET);
 800177e:	2200      	movs	r2, #0
 8001780:	2140      	movs	r1, #64	; 0x40
 8001782:	4808      	ldr	r0, [pc, #32]	; (80017a4 <Motor_voidMoveBackward+0x44>)
 8001784:	f001 ff76 	bl	8003674 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR2_D2_GPIO_Port, MOTOR2_D2_Pin, GPIO_PIN_SET);
 8001788:	2201      	movs	r2, #1
 800178a:	2180      	movs	r1, #128	; 0x80
 800178c:	4805      	ldr	r0, [pc, #20]	; (80017a4 <Motor_voidMoveBackward+0x44>)
 800178e:	f001 ff71 	bl	8003674 <HAL_GPIO_WritePin>
		Motor_voidControlSpeed(DutyCycle);
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ffaf 	bl	80016f8 <Motor_voidControlSpeed>
}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	48000400 	.word	0x48000400

080017a8 <Motor_voidMoveRight>:
  * @brief Move motor Right.
  * @param  None
  * @retval None
  */
void Motor_voidMoveRight(uint16_t DutyCycle)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	80fb      	strh	r3, [r7, #6]
	/* STOP the Front motor  */
	HAL_GPIO_WritePin(MOTOR1_D1_GPIO_Port, MOTOR1_D1_Pin, GPIO_PIN_SET);
 80017b2:	2201      	movs	r2, #1
 80017b4:	2108      	movs	r1, #8
 80017b6:	480d      	ldr	r0, [pc, #52]	; (80017ec <Motor_voidMoveRight+0x44>)
 80017b8:	f001 ff5c 	bl	8003674 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR1_D2_GPIO_Port, MOTOR1_D2_Pin, GPIO_PIN_RESET);
 80017bc:	2200      	movs	r2, #0
 80017be:	2110      	movs	r1, #16
 80017c0:	480a      	ldr	r0, [pc, #40]	; (80017ec <Motor_voidMoveRight+0x44>)
 80017c2:	f001 ff57 	bl	8003674 <HAL_GPIO_WritePin>
	/* Turn on The back motor  */
	HAL_GPIO_WritePin(MOTOR2_D1_GPIO_Port, MOTOR2_D1_Pin, GPIO_PIN_SET);
 80017c6:	2201      	movs	r2, #1
 80017c8:	2140      	movs	r1, #64	; 0x40
 80017ca:	4808      	ldr	r0, [pc, #32]	; (80017ec <Motor_voidMoveRight+0x44>)
 80017cc:	f001 ff52 	bl	8003674 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR2_D2_GPIO_Port, MOTOR2_D2_Pin, GPIO_PIN_RESET);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2180      	movs	r1, #128	; 0x80
 80017d4:	4805      	ldr	r0, [pc, #20]	; (80017ec <Motor_voidMoveRight+0x44>)
 80017d6:	f001 ff4d 	bl	8003674 <HAL_GPIO_WritePin>
	Motor_voidControlSpeed(DutyCycle);
 80017da:	88fb      	ldrh	r3, [r7, #6]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff8b 	bl	80016f8 <Motor_voidControlSpeed>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	48000400 	.word	0x48000400

080017f0 <Motor_voidMoveLeft>:
  * @brief Move motor Left.
  * @param  None
  * @retval None
  */
void Motor_voidMoveLeft(uint16_t DutyCycle)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	80fb      	strh	r3, [r7, #6]
	/* STOP the Front motor  */
	HAL_GPIO_WritePin(MOTOR1_D1_GPIO_Port, MOTOR1_D1_Pin, GPIO_PIN_RESET);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2108      	movs	r1, #8
 80017fe:	480d      	ldr	r0, [pc, #52]	; (8001834 <Motor_voidMoveLeft+0x44>)
 8001800:	f001 ff38 	bl	8003674 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR1_D2_GPIO_Port, MOTOR1_D2_Pin, GPIO_PIN_SET);
 8001804:	2201      	movs	r2, #1
 8001806:	2110      	movs	r1, #16
 8001808:	480a      	ldr	r0, [pc, #40]	; (8001834 <Motor_voidMoveLeft+0x44>)
 800180a:	f001 ff33 	bl	8003674 <HAL_GPIO_WritePin>
	/* Turn on The back motor  */
	HAL_GPIO_WritePin(MOTOR2_D1_GPIO_Port, MOTOR2_D1_Pin, GPIO_PIN_SET);
 800180e:	2201      	movs	r2, #1
 8001810:	2140      	movs	r1, #64	; 0x40
 8001812:	4808      	ldr	r0, [pc, #32]	; (8001834 <Motor_voidMoveLeft+0x44>)
 8001814:	f001 ff2e 	bl	8003674 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR2_D2_GPIO_Port, MOTOR2_D2_Pin, GPIO_PIN_RESET);
 8001818:	2200      	movs	r2, #0
 800181a:	2180      	movs	r1, #128	; 0x80
 800181c:	4805      	ldr	r0, [pc, #20]	; (8001834 <Motor_voidMoveLeft+0x44>)
 800181e:	f001 ff29 	bl	8003674 <HAL_GPIO_WritePin>
	Motor_voidControlSpeed(DutyCycle);
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ff67 	bl	80016f8 <Motor_voidControlSpeed>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	48000400 	.word	0x48000400

08001838 <Motor_voidStop>:
  * @brief Stop motor.
  * @param  None
  * @retval None
  */
void Motor_voidStop(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
	/* STOP the Front motor  */
	HAL_GPIO_WritePin(MOTOR1_D1_GPIO_Port, MOTOR1_D1_Pin, GPIO_PIN_RESET);
 800183c:	2200      	movs	r2, #0
 800183e:	2108      	movs	r1, #8
 8001840:	4809      	ldr	r0, [pc, #36]	; (8001868 <Motor_voidStop+0x30>)
 8001842:	f001 ff17 	bl	8003674 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR1_D2_GPIO_Port, MOTOR1_D2_Pin, GPIO_PIN_RESET);
 8001846:	2200      	movs	r2, #0
 8001848:	2110      	movs	r1, #16
 800184a:	4807      	ldr	r0, [pc, #28]	; (8001868 <Motor_voidStop+0x30>)
 800184c:	f001 ff12 	bl	8003674 <HAL_GPIO_WritePin>
	/* Turn on The back motor  */
	HAL_GPIO_WritePin(MOTOR2_D1_GPIO_Port, MOTOR2_D1_Pin, GPIO_PIN_RESET);
 8001850:	2200      	movs	r2, #0
 8001852:	2140      	movs	r1, #64	; 0x40
 8001854:	4804      	ldr	r0, [pc, #16]	; (8001868 <Motor_voidStop+0x30>)
 8001856:	f001 ff0d 	bl	8003674 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR2_D2_GPIO_Port, MOTOR2_D2_Pin, GPIO_PIN_RESET);
 800185a:	2200      	movs	r2, #0
 800185c:	2180      	movs	r1, #128	; 0x80
 800185e:	4802      	ldr	r0, [pc, #8]	; (8001868 <Motor_voidStop+0x30>)
 8001860:	f001 ff08 	bl	8003674 <HAL_GPIO_WritePin>

}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}
 8001868:	48000400 	.word	0x48000400

0800186c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001872:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <HAL_MspInit+0x4c>)
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	4a10      	ldr	r2, [pc, #64]	; (80018b8 <HAL_MspInit+0x4c>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	6193      	str	r3, [r2, #24]
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <HAL_MspInit+0x4c>)
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800188a:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <HAL_MspInit+0x4c>)
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <HAL_MspInit+0x4c>)
 8001890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001894:	61d3      	str	r3, [r2, #28]
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <HAL_MspInit+0x4c>)
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189e:	603b      	str	r3, [r7, #0]
 80018a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	210f      	movs	r1, #15
 80018a6:	f06f 0001 	mvn.w	r0, #1
 80018aa:	f001 fd17 	bl	80032dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40021000 	.word	0x40021000

080018bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08c      	sub	sp, #48	; 0x30
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80018cc:	4b2e      	ldr	r3, [pc, #184]	; (8001988 <HAL_InitTick+0xcc>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	4a2d      	ldr	r2, [pc, #180]	; (8001988 <HAL_InitTick+0xcc>)
 80018d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018d6:	6193      	str	r3, [r2, #24]
 80018d8:	4b2b      	ldr	r3, [pc, #172]	; (8001988 <HAL_InitTick+0xcc>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018e4:	f107 020c 	add.w	r2, r7, #12
 80018e8:	f107 0310 	add.w	r3, r7, #16
 80018ec:	4611      	mov	r1, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f003 f97c 	bl	8004bec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80018f4:	f003 f958 	bl	8004ba8 <HAL_RCC_GetPCLK2Freq>
 80018f8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018fc:	4a23      	ldr	r2, [pc, #140]	; (800198c <HAL_InitTick+0xd0>)
 80018fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001902:	0c9b      	lsrs	r3, r3, #18
 8001904:	3b01      	subs	r3, #1
 8001906:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001908:	4b21      	ldr	r3, [pc, #132]	; (8001990 <HAL_InitTick+0xd4>)
 800190a:	4a22      	ldr	r2, [pc, #136]	; (8001994 <HAL_InitTick+0xd8>)
 800190c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800190e:	4b20      	ldr	r3, [pc, #128]	; (8001990 <HAL_InitTick+0xd4>)
 8001910:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001914:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001916:	4a1e      	ldr	r2, [pc, #120]	; (8001990 <HAL_InitTick+0xd4>)
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800191c:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <HAL_InitTick+0xd4>)
 800191e:	2200      	movs	r2, #0
 8001920:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001922:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <HAL_InitTick+0xd4>)
 8001924:	2200      	movs	r2, #0
 8001926:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001928:	4b19      	ldr	r3, [pc, #100]	; (8001990 <HAL_InitTick+0xd4>)
 800192a:	2200      	movs	r2, #0
 800192c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800192e:	4818      	ldr	r0, [pc, #96]	; (8001990 <HAL_InitTick+0xd4>)
 8001930:	f003 fbac 	bl	800508c <HAL_TIM_Base_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800193a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800193e:	2b00      	cmp	r3, #0
 8001940:	d11b      	bne.n	800197a <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001942:	4813      	ldr	r0, [pc, #76]	; (8001990 <HAL_InitTick+0xd4>)
 8001944:	f003 fbfa 	bl	800513c <HAL_TIM_Base_Start_IT>
 8001948:	4603      	mov	r3, r0
 800194a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800194e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001952:	2b00      	cmp	r3, #0
 8001954:	d111      	bne.n	800197a <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001956:	2019      	movs	r0, #25
 8001958:	f001 fcdc 	bl	8003314 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b0f      	cmp	r3, #15
 8001960:	d808      	bhi.n	8001974 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001962:	2200      	movs	r2, #0
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	2019      	movs	r0, #25
 8001968:	f001 fcb8 	bl	80032dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800196c:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <HAL_InitTick+0xdc>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6013      	str	r3, [r2, #0]
 8001972:	e002      	b.n	800197a <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800197a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800197e:	4618      	mov	r0, r3
 8001980:	3730      	adds	r7, #48	; 0x30
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40021000 	.word	0x40021000
 800198c:	431bde83 	.word	0x431bde83
 8001990:	200000b4 	.word	0x200000b4
 8001994:	40012c00 	.word	0x40012c00
 8001998:	20000008 	.word	0x20000008

0800199c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019a0:	e7fe      	b.n	80019a0 <NMI_Handler+0x4>

080019a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a6:	e7fe      	b.n	80019a6 <HardFault_Handler+0x4>

080019a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ac:	e7fe      	b.n	80019ac <MemManage_Handler+0x4>

080019ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b2:	e7fe      	b.n	80019b2 <BusFault_Handler+0x4>

080019b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019b8:	e7fe      	b.n	80019b8 <UsageFault_Handler+0x4>

080019ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019cc:	4802      	ldr	r0, [pc, #8]	; (80019d8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80019ce:	f003 ff3f 	bl	8005850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	200000b4 	.word	0x200000b4

080019dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80019e0:	4802      	ldr	r0, [pc, #8]	; (80019ec <TIM4_IRQHandler+0x10>)
 80019e2:	f003 ff35 	bl	8005850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	2000014c 	.word	0x2000014c

080019f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <SystemInit+0x20>)
 80019f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019fa:	4a05      	ldr	r2, [pc, #20]	; (8001a10 <SystemInit+0x20>)
 80019fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08e      	sub	sp, #56	; 0x38
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a28:	f107 031c 	add.w	r3, r7, #28
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a34:	463b      	mov	r3, r7
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
 8001a40:	611a      	str	r2, [r3, #16]
 8001a42:	615a      	str	r2, [r3, #20]
 8001a44:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a46:	4b37      	ldr	r3, [pc, #220]	; (8001b24 <MX_TIM3_Init+0x110>)
 8001a48:	4a37      	ldr	r2, [pc, #220]	; (8001b28 <MX_TIM3_Init+0x114>)
 8001a4a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001a4c:	4b35      	ldr	r3, [pc, #212]	; (8001b24 <MX_TIM3_Init+0x110>)
 8001a4e:	2247      	movs	r2, #71	; 0x47
 8001a50:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a52:	4b34      	ldr	r3, [pc, #208]	; (8001b24 <MX_TIM3_Init+0x110>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001a58:	4b32      	ldr	r3, [pc, #200]	; (8001b24 <MX_TIM3_Init+0x110>)
 8001a5a:	2263      	movs	r2, #99	; 0x63
 8001a5c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5e:	4b31      	ldr	r3, [pc, #196]	; (8001b24 <MX_TIM3_Init+0x110>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a64:	4b2f      	ldr	r3, [pc, #188]	; (8001b24 <MX_TIM3_Init+0x110>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a6a:	482e      	ldr	r0, [pc, #184]	; (8001b24 <MX_TIM3_Init+0x110>)
 8001a6c:	f003 fb0e 	bl	800508c <HAL_TIM_Base_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001a76:	f7ff fe23 	bl	80016c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a84:	4619      	mov	r1, r3
 8001a86:	4827      	ldr	r0, [pc, #156]	; (8001b24 <MX_TIM3_Init+0x110>)
 8001a88:	f004 f9b2 	bl	8005df0 <HAL_TIM_ConfigClockSource>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001a92:	f7ff fe15 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a96:	4823      	ldr	r0, [pc, #140]	; (8001b24 <MX_TIM3_Init+0x110>)
 8001a98:	f003 fbc0 	bl	800521c <HAL_TIM_PWM_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001aa2:	f7ff fe0d 	bl	80016c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001aae:	f107 031c 	add.w	r3, r7, #28
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	481b      	ldr	r0, [pc, #108]	; (8001b24 <MX_TIM3_Init+0x110>)
 8001ab6:	f005 f84f 	bl	8006b58 <HAL_TIMEx_MasterConfigSynchronization>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001ac0:	f7ff fdfe 	bl	80016c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ac4:	2360      	movs	r3, #96	; 0x60
 8001ac6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ad4:	463b      	mov	r3, r7
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4812      	ldr	r0, [pc, #72]	; (8001b24 <MX_TIM3_Init+0x110>)
 8001adc:	f004 f874 	bl	8005bc8 <HAL_TIM_PWM_ConfigChannel>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001ae6:	f7ff fdeb 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001aea:	463b      	mov	r3, r7
 8001aec:	2204      	movs	r2, #4
 8001aee:	4619      	mov	r1, r3
 8001af0:	480c      	ldr	r0, [pc, #48]	; (8001b24 <MX_TIM3_Init+0x110>)
 8001af2:	f004 f869 	bl	8005bc8 <HAL_TIM_PWM_ConfigChannel>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001afc:	f7ff fde0 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b00:	463b      	mov	r3, r7
 8001b02:	2208      	movs	r2, #8
 8001b04:	4619      	mov	r1, r3
 8001b06:	4807      	ldr	r0, [pc, #28]	; (8001b24 <MX_TIM3_Init+0x110>)
 8001b08:	f004 f85e 	bl	8005bc8 <HAL_TIM_PWM_ConfigChannel>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001b12:	f7ff fdd5 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b16:	4803      	ldr	r0, [pc, #12]	; (8001b24 <MX_TIM3_Init+0x110>)
 8001b18:	f000 f8da 	bl	8001cd0 <HAL_TIM_MspPostInit>

}
 8001b1c:	bf00      	nop
 8001b1e:	3738      	adds	r7, #56	; 0x38
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000100 	.word	0x20000100
 8001b28:	40000400 	.word	0x40000400

08001b2c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08c      	sub	sp, #48	; 0x30
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b32:	f107 0320 	add.w	r3, r7, #32
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	609a      	str	r2, [r3, #8]
 8001b56:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b58:	4b2b      	ldr	r3, [pc, #172]	; (8001c08 <MX_TIM4_Init+0xdc>)
 8001b5a:	4a2c      	ldr	r2, [pc, #176]	; (8001c0c <MX_TIM4_Init+0xe0>)
 8001b5c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8001b5e:	4b2a      	ldr	r3, [pc, #168]	; (8001c08 <MX_TIM4_Init+0xdc>)
 8001b60:	2247      	movs	r2, #71	; 0x47
 8001b62:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b64:	4b28      	ldr	r3, [pc, #160]	; (8001c08 <MX_TIM4_Init+0xdc>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001b6a:	4b27      	ldr	r3, [pc, #156]	; (8001c08 <MX_TIM4_Init+0xdc>)
 8001b6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b70:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b72:	4b25      	ldr	r3, [pc, #148]	; (8001c08 <MX_TIM4_Init+0xdc>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b78:	4b23      	ldr	r3, [pc, #140]	; (8001c08 <MX_TIM4_Init+0xdc>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b7e:	4822      	ldr	r0, [pc, #136]	; (8001c08 <MX_TIM4_Init+0xdc>)
 8001b80:	f003 fa84 	bl	800508c <HAL_TIM_Base_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8001b8a:	f7ff fd99 	bl	80016c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b92:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b94:	f107 0320 	add.w	r3, r7, #32
 8001b98:	4619      	mov	r1, r3
 8001b9a:	481b      	ldr	r0, [pc, #108]	; (8001c08 <MX_TIM4_Init+0xdc>)
 8001b9c:	f004 f928 	bl	8005df0 <HAL_TIM_ConfigClockSource>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001ba6:	f7ff fd8b 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001baa:	4817      	ldr	r0, [pc, #92]	; (8001c08 <MX_TIM4_Init+0xdc>)
 8001bac:	f003 fca4 	bl	80054f8 <HAL_TIM_IC_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001bb6:	f7ff fd83 	bl	80016c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bc2:	f107 0314 	add.w	r3, r7, #20
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	480f      	ldr	r0, [pc, #60]	; (8001c08 <MX_TIM4_Init+0xdc>)
 8001bca:	f004 ffc5 	bl	8006b58 <HAL_TIMEx_MasterConfigSynchronization>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8001bd4:	f7ff fd74 	bl	80016c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	2208      	movs	r2, #8
 8001bec:	4619      	mov	r1, r3
 8001bee:	4806      	ldr	r0, [pc, #24]	; (8001c08 <MX_TIM4_Init+0xdc>)
 8001bf0:	f003 ff4d 	bl	8005a8e <HAL_TIM_IC_ConfigChannel>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8001bfa:	f7ff fd61 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001bfe:	bf00      	nop
 8001c00:	3730      	adds	r7, #48	; 0x30
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	2000014c 	.word	0x2000014c
 8001c0c:	40000800 	.word	0x40000800

08001c10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08a      	sub	sp, #40	; 0x28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c18:	f107 0314 	add.w	r3, r7, #20
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a24      	ldr	r2, [pc, #144]	; (8001cc0 <HAL_TIM_Base_MspInit+0xb0>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d10c      	bne.n	8001c4c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c32:	4b24      	ldr	r3, [pc, #144]	; (8001cc4 <HAL_TIM_Base_MspInit+0xb4>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	4a23      	ldr	r2, [pc, #140]	; (8001cc4 <HAL_TIM_Base_MspInit+0xb4>)
 8001c38:	f043 0302 	orr.w	r3, r3, #2
 8001c3c:	61d3      	str	r3, [r2, #28]
 8001c3e:	4b21      	ldr	r3, [pc, #132]	; (8001cc4 <HAL_TIM_Base_MspInit+0xb4>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001c4a:	e035      	b.n	8001cb8 <HAL_TIM_Base_MspInit+0xa8>
  else if(tim_baseHandle->Instance==TIM4)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a1d      	ldr	r2, [pc, #116]	; (8001cc8 <HAL_TIM_Base_MspInit+0xb8>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d130      	bne.n	8001cb8 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c56:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <HAL_TIM_Base_MspInit+0xb4>)
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	4a1a      	ldr	r2, [pc, #104]	; (8001cc4 <HAL_TIM_Base_MspInit+0xb4>)
 8001c5c:	f043 0304 	orr.w	r3, r3, #4
 8001c60:	61d3      	str	r3, [r2, #28]
 8001c62:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <HAL_TIM_Base_MspInit+0xb4>)
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6e:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <HAL_TIM_Base_MspInit+0xb4>)
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	4a14      	ldr	r2, [pc, #80]	; (8001cc4 <HAL_TIM_Base_MspInit+0xb4>)
 8001c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c78:	6153      	str	r3, [r2, #20]
 8001c7a:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <HAL_TIM_Base_MspInit+0xb4>)
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ECHO_Pin;
 8001c86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c94:	2300      	movs	r3, #0
 8001c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	480a      	ldr	r0, [pc, #40]	; (8001ccc <HAL_TIM_Base_MspInit+0xbc>)
 8001ca4:	f001 fb44 	bl	8003330 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2105      	movs	r1, #5
 8001cac:	201e      	movs	r0, #30
 8001cae:	f001 fb15 	bl	80032dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001cb2:	201e      	movs	r0, #30
 8001cb4:	f001 fb2e 	bl	8003314 <HAL_NVIC_EnableIRQ>
}
 8001cb8:	bf00      	nop
 8001cba:	3728      	adds	r7, #40	; 0x28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40000400 	.word	0x40000400
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	40000800 	.word	0x40000800
 8001ccc:	48000400 	.word	0x48000400

08001cd0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08a      	sub	sp, #40	; 0x28
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a1f      	ldr	r2, [pc, #124]	; (8001d6c <HAL_TIM_MspPostInit+0x9c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d138      	bne.n	8001d64 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf2:	4b1f      	ldr	r3, [pc, #124]	; (8001d70 <HAL_TIM_MspPostInit+0xa0>)
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	4a1e      	ldr	r2, [pc, #120]	; (8001d70 <HAL_TIM_MspPostInit+0xa0>)
 8001cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cfc:	6153      	str	r3, [r2, #20]
 8001cfe:	4b1c      	ldr	r3, [pc, #112]	; (8001d70 <HAL_TIM_MspPostInit+0xa0>)
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0a:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <HAL_TIM_MspPostInit+0xa0>)
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	4a18      	ldr	r2, [pc, #96]	; (8001d70 <HAL_TIM_MspPostInit+0xa0>)
 8001d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d14:	6153      	str	r3, [r2, #20]
 8001d16:	4b16      	ldr	r3, [pc, #88]	; (8001d70 <HAL_TIM_MspPostInit+0xa0>)
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = PWM_2_Pin|PWM_1_Pin;
 8001d22:	2350      	movs	r3, #80	; 0x50
 8001d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d26:	2302      	movs	r3, #2
 8001d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d32:	2302      	movs	r3, #2
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d36:	f107 0314 	add.w	r3, r7, #20
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d40:	f001 faf6 	bl	8003330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d44:	2301      	movs	r3, #1
 8001d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2300      	movs	r3, #0
 8001d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d54:	2302      	movs	r3, #2
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4805      	ldr	r0, [pc, #20]	; (8001d74 <HAL_TIM_MspPostInit+0xa4>)
 8001d60:	f001 fae6 	bl	8003330 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d64:	bf00      	nop
 8001d66:	3728      	adds	r7, #40	; 0x28
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40000400 	.word	0x40000400
 8001d70:	40021000 	.word	0x40021000
 8001d74:	48000400 	.word	0x48000400

08001d78 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d7c:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <MX_USART1_UART_Init+0x58>)
 8001d7e:	4a15      	ldr	r2, [pc, #84]	; (8001dd4 <MX_USART1_UART_Init+0x5c>)
 8001d80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001d82:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <MX_USART1_UART_Init+0x58>)
 8001d84:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d8a:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <MX_USART1_UART_Init+0x58>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d90:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <MX_USART1_UART_Init+0x58>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d96:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <MX_USART1_UART_Init+0x58>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <MX_USART1_UART_Init+0x58>)
 8001d9e:	220c      	movs	r2, #12
 8001da0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da2:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <MX_USART1_UART_Init+0x58>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001da8:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <MX_USART1_UART_Init+0x58>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <MX_USART1_UART_Init+0x58>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <MX_USART1_UART_Init+0x58>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dba:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <MX_USART1_UART_Init+0x58>)
 8001dbc:	f004 ff76 	bl	8006cac <HAL_UART_Init>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001dc6:	f7ff fc7b 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000198 	.word	0x20000198
 8001dd4:	40013800 	.word	0x40013800

08001dd8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ddc:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <MX_USART2_UART_Init+0x58>)
 8001dde:	4a15      	ldr	r2, [pc, #84]	; (8001e34 <MX_USART2_UART_Init+0x5c>)
 8001de0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001de2:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <MX_USART2_UART_Init+0x58>)
 8001de4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001de8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dea:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <MX_USART2_UART_Init+0x58>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001df0:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <MX_USART2_UART_Init+0x58>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <MX_USART2_UART_Init+0x58>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <MX_USART2_UART_Init+0x58>)
 8001dfe:	220c      	movs	r2, #12
 8001e00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e02:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <MX_USART2_UART_Init+0x58>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e08:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <MX_USART2_UART_Init+0x58>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e0e:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <MX_USART2_UART_Init+0x58>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <MX_USART2_UART_Init+0x58>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e1a:	4805      	ldr	r0, [pc, #20]	; (8001e30 <MX_USART2_UART_Init+0x58>)
 8001e1c:	f004 ff46 	bl	8006cac <HAL_UART_Init>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001e26:	f7ff fc4b 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000220 	.word	0x20000220
 8001e34:	40004400 	.word	0x40004400

08001e38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08c      	sub	sp, #48	; 0x30
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 031c 	add.w	r3, r7, #28
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a2e      	ldr	r2, [pc, #184]	; (8001f10 <HAL_UART_MspInit+0xd8>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d128      	bne.n	8001eac <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e5a:	4b2e      	ldr	r3, [pc, #184]	; (8001f14 <HAL_UART_MspInit+0xdc>)
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	4a2d      	ldr	r2, [pc, #180]	; (8001f14 <HAL_UART_MspInit+0xdc>)
 8001e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e64:	6193      	str	r3, [r2, #24]
 8001e66:	4b2b      	ldr	r3, [pc, #172]	; (8001f14 <HAL_UART_MspInit+0xdc>)
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6e:	61bb      	str	r3, [r7, #24]
 8001e70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e72:	4b28      	ldr	r3, [pc, #160]	; (8001f14 <HAL_UART_MspInit+0xdc>)
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	4a27      	ldr	r2, [pc, #156]	; (8001f14 <HAL_UART_MspInit+0xdc>)
 8001e78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e7c:	6153      	str	r3, [r2, #20]
 8001e7e:	4b25      	ldr	r3, [pc, #148]	; (8001f14 <HAL_UART_MspInit+0xdc>)
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001e8a:	2330      	movs	r3, #48	; 0x30
 8001e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e96:	2303      	movs	r3, #3
 8001e98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e9a:	2307      	movs	r3, #7
 8001e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e9e:	f107 031c 	add.w	r3, r7, #28
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	481c      	ldr	r0, [pc, #112]	; (8001f18 <HAL_UART_MspInit+0xe0>)
 8001ea6:	f001 fa43 	bl	8003330 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001eaa:	e02d      	b.n	8001f08 <HAL_UART_MspInit+0xd0>
  else if(uartHandle->Instance==USART2)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a1a      	ldr	r2, [pc, #104]	; (8001f1c <HAL_UART_MspInit+0xe4>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d128      	bne.n	8001f08 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eb6:	4b17      	ldr	r3, [pc, #92]	; (8001f14 <HAL_UART_MspInit+0xdc>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	4a16      	ldr	r2, [pc, #88]	; (8001f14 <HAL_UART_MspInit+0xdc>)
 8001ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec0:	61d3      	str	r3, [r2, #28]
 8001ec2:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <HAL_UART_MspInit+0xdc>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ece:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <HAL_UART_MspInit+0xdc>)
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	4a10      	ldr	r2, [pc, #64]	; (8001f14 <HAL_UART_MspInit+0xdc>)
 8001ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed8:	6153      	str	r3, [r2, #20]
 8001eda:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <HAL_UART_MspInit+0xdc>)
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ee6:	230c      	movs	r3, #12
 8001ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eea:	2302      	movs	r3, #2
 8001eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ef6:	2307      	movs	r3, #7
 8001ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efa:	f107 031c 	add.w	r3, r7, #28
 8001efe:	4619      	mov	r1, r3
 8001f00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f04:	f001 fa14 	bl	8003330 <HAL_GPIO_Init>
}
 8001f08:	bf00      	nop
 8001f0a:	3730      	adds	r7, #48	; 0x30
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40013800 	.word	0x40013800
 8001f14:	40021000 	.word	0x40021000
 8001f18:	48000800 	.word	0x48000800
 8001f1c:	40004400 	.word	0x40004400

08001f20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f58 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f24:	f7ff fd64 	bl	80019f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f28:	480c      	ldr	r0, [pc, #48]	; (8001f5c <LoopForever+0x6>)
  ldr r1, =_edata
 8001f2a:	490d      	ldr	r1, [pc, #52]	; (8001f60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f2c:	4a0d      	ldr	r2, [pc, #52]	; (8001f64 <LoopForever+0xe>)
  movs r3, #0
 8001f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f30:	e002      	b.n	8001f38 <LoopCopyDataInit>

08001f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f36:	3304      	adds	r3, #4

08001f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f3c:	d3f9      	bcc.n	8001f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f3e:	4a0a      	ldr	r2, [pc, #40]	; (8001f68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f40:	4c0a      	ldr	r4, [pc, #40]	; (8001f6c <LoopForever+0x16>)
  movs r3, #0
 8001f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f44:	e001      	b.n	8001f4a <LoopFillZerobss>

08001f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f48:	3204      	adds	r2, #4

08001f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f4c:	d3fb      	bcc.n	8001f46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f4e:	f008 fa8d 	bl	800a46c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f52:	f7ff fb13 	bl	800157c <main>

08001f56 <LoopForever>:

LoopForever:
    b LoopForever
 8001f56:	e7fe      	b.n	8001f56 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f58:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f60:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001f64:	0800a63c 	.word	0x0800a63c
  ldr r2, =_sbss
 8001f68:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001f6c:	20001da0 	.word	0x20001da0

08001f70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f70:	e7fe      	b.n	8001f70 <ADC1_2_IRQHandler>
	...

08001f74 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <HAL_Init+0x28>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <HAL_Init+0x28>)
 8001f7e:	f043 0310 	orr.w	r3, r3, #16
 8001f82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f84:	2003      	movs	r0, #3
 8001f86:	f001 f99e 	bl	80032c6 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f8a:	200f      	movs	r0, #15
 8001f8c:	f7ff fc96 	bl	80018bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f90:	f7ff fc6c 	bl	800186c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40022000 	.word	0x40022000

08001fa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_IncTick+0x20>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_IncTick+0x24>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4413      	add	r3, r2
 8001fb0:	4a04      	ldr	r2, [pc, #16]	; (8001fc4 <HAL_IncTick+0x24>)
 8001fb2:	6013      	str	r3, [r2, #0]
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	2000000c 	.word	0x2000000c
 8001fc4:	200002a8 	.word	0x200002a8

08001fc8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return uwTick;  
 8001fcc:	4b03      	ldr	r3, [pc, #12]	; (8001fdc <HAL_GetTick+0x14>)
 8001fce:	681b      	ldr	r3, [r3, #0]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	200002a8 	.word	0x200002a8

08001fe0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b09a      	sub	sp, #104	; 0x68
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e1e3      	b.n	80023c8 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f003 0310 	and.w	r3, r3, #16
 800200e:	2b00      	cmp	r3, #0
 8002010:	d176      	bne.n	8002100 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	2b00      	cmp	r3, #0
 8002018:	d152      	bne.n	80020c0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7fe fe7f 	bl	8000d38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d13b      	bne.n	80020c0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f001 f829 	bl	80030a0 <ADC_Disable>
 800204e:	4603      	mov	r3, r0
 8002050:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002058:	f003 0310 	and.w	r3, r3, #16
 800205c:	2b00      	cmp	r3, #0
 800205e:	d12f      	bne.n	80020c0 <HAL_ADC_Init+0xe0>
 8002060:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002064:	2b00      	cmp	r3, #0
 8002066:	d12b      	bne.n	80020c0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002070:	f023 0302 	bic.w	r3, r3, #2
 8002074:	f043 0202 	orr.w	r2, r3, #2
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800208a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800209a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800209c:	4b92      	ldr	r3, [pc, #584]	; (80022e8 <HAL_ADC_Init+0x308>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a92      	ldr	r2, [pc, #584]	; (80022ec <HAL_ADC_Init+0x30c>)
 80020a2:	fba2 2303 	umull	r2, r3, r2, r3
 80020a6:	0c9a      	lsrs	r2, r3, #18
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020b2:	e002      	b.n	80020ba <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1f9      	bne.n	80020b4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d007      	beq.n	80020de <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80020d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020dc:	d110      	bne.n	8002100 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f023 0312 	bic.w	r3, r3, #18
 80020e6:	f043 0210 	orr.w	r2, r3, #16
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f2:	f043 0201 	orr.w	r2, r3, #1
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	f003 0310 	and.w	r3, r3, #16
 8002108:	2b00      	cmp	r3, #0
 800210a:	f040 8150 	bne.w	80023ae <HAL_ADC_Init+0x3ce>
 800210e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002112:	2b00      	cmp	r3, #0
 8002114:	f040 814b 	bne.w	80023ae <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002122:	2b00      	cmp	r3, #0
 8002124:	f040 8143 	bne.w	80023ae <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002130:	f043 0202 	orr.w	r2, r3, #2
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002140:	d004      	beq.n	800214c <HAL_ADC_Init+0x16c>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a6a      	ldr	r2, [pc, #424]	; (80022f0 <HAL_ADC_Init+0x310>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d101      	bne.n	8002150 <HAL_ADC_Init+0x170>
 800214c:	4b69      	ldr	r3, [pc, #420]	; (80022f4 <HAL_ADC_Init+0x314>)
 800214e:	e000      	b.n	8002152 <HAL_ADC_Init+0x172>
 8002150:	4b69      	ldr	r3, [pc, #420]	; (80022f8 <HAL_ADC_Init+0x318>)
 8002152:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800215c:	d102      	bne.n	8002164 <HAL_ADC_Init+0x184>
 800215e:	4b64      	ldr	r3, [pc, #400]	; (80022f0 <HAL_ADC_Init+0x310>)
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	e01a      	b.n	800219a <HAL_ADC_Init+0x1ba>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a61      	ldr	r2, [pc, #388]	; (80022f0 <HAL_ADC_Init+0x310>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d103      	bne.n	8002176 <HAL_ADC_Init+0x196>
 800216e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	e011      	b.n	800219a <HAL_ADC_Init+0x1ba>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a60      	ldr	r2, [pc, #384]	; (80022fc <HAL_ADC_Init+0x31c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d102      	bne.n	8002186 <HAL_ADC_Init+0x1a6>
 8002180:	4b5f      	ldr	r3, [pc, #380]	; (8002300 <HAL_ADC_Init+0x320>)
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	e009      	b.n	800219a <HAL_ADC_Init+0x1ba>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a5d      	ldr	r2, [pc, #372]	; (8002300 <HAL_ADC_Init+0x320>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d102      	bne.n	8002196 <HAL_ADC_Init+0x1b6>
 8002190:	4b5a      	ldr	r3, [pc, #360]	; (80022fc <HAL_ADC_Init+0x31c>)
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	e001      	b.n	800219a <HAL_ADC_Init+0x1ba>
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d108      	bne.n	80021ba <HAL_ADC_Init+0x1da>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d101      	bne.n	80021ba <HAL_ADC_Init+0x1da>
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <HAL_ADC_Init+0x1dc>
 80021ba:	2300      	movs	r3, #0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d11c      	bne.n	80021fa <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80021c0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d010      	beq.n	80021e8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d107      	bne.n	80021e2 <HAL_ADC_Init+0x202>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <HAL_ADC_Init+0x202>
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <HAL_ADC_Init+0x204>
 80021e2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d108      	bne.n	80021fa <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80021e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	431a      	orrs	r2, r3
 80021f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021f8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	7e5b      	ldrb	r3, [r3, #25]
 80021fe:	035b      	lsls	r3, r3, #13
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002204:	2a01      	cmp	r2, #1
 8002206:	d002      	beq.n	800220e <HAL_ADC_Init+0x22e>
 8002208:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800220c:	e000      	b.n	8002210 <HAL_ADC_Init+0x230>
 800220e:	2200      	movs	r2, #0
 8002210:	431a      	orrs	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	4313      	orrs	r3, r2
 800221e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002220:	4313      	orrs	r3, r2
 8002222:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 3020 	ldrb.w	r3, [r3, #32]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d11b      	bne.n	8002266 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	7e5b      	ldrb	r3, [r3, #25]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d109      	bne.n	800224a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	3b01      	subs	r3, #1
 800223c:	045a      	lsls	r2, r3, #17
 800223e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002240:	4313      	orrs	r3, r2
 8002242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002246:	663b      	str	r3, [r7, #96]	; 0x60
 8002248:	e00d      	b.n	8002266 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002252:	f043 0220 	orr.w	r2, r3, #32
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	f043 0201 	orr.w	r2, r3, #1
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226a:	2b01      	cmp	r3, #1
 800226c:	d054      	beq.n	8002318 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a22      	ldr	r2, [pc, #136]	; (80022fc <HAL_ADC_Init+0x31c>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d004      	beq.n	8002282 <HAL_ADC_Init+0x2a2>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a20      	ldr	r2, [pc, #128]	; (8002300 <HAL_ADC_Init+0x320>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d140      	bne.n	8002304 <HAL_ADC_Init+0x324>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002286:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800228a:	d02a      	beq.n	80022e2 <HAL_ADC_Init+0x302>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002294:	d022      	beq.n	80022dc <HAL_ADC_Init+0x2fc>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800229e:	d01a      	beq.n	80022d6 <HAL_ADC_Init+0x2f6>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a4:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80022a8:	d012      	beq.n	80022d0 <HAL_ADC_Init+0x2f0>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ae:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80022b2:	d00a      	beq.n	80022ca <HAL_ADC_Init+0x2ea>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b8:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80022bc:	d002      	beq.n	80022c4 <HAL_ADC_Init+0x2e4>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c2:	e023      	b.n	800230c <HAL_ADC_Init+0x32c>
 80022c4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80022c8:	e020      	b.n	800230c <HAL_ADC_Init+0x32c>
 80022ca:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80022ce:	e01d      	b.n	800230c <HAL_ADC_Init+0x32c>
 80022d0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80022d4:	e01a      	b.n	800230c <HAL_ADC_Init+0x32c>
 80022d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022da:	e017      	b.n	800230c <HAL_ADC_Init+0x32c>
 80022dc:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80022e0:	e014      	b.n	800230c <HAL_ADC_Init+0x32c>
 80022e2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80022e6:	e011      	b.n	800230c <HAL_ADC_Init+0x32c>
 80022e8:	20000004 	.word	0x20000004
 80022ec:	431bde83 	.word	0x431bde83
 80022f0:	50000100 	.word	0x50000100
 80022f4:	50000300 	.word	0x50000300
 80022f8:	50000700 	.word	0x50000700
 80022fc:	50000400 	.word	0x50000400
 8002300:	50000500 	.word	0x50000500
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002308:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002310:	4313      	orrs	r3, r2
 8002312:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002314:	4313      	orrs	r3, r2
 8002316:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	2b00      	cmp	r3, #0
 8002324:	d114      	bne.n	8002350 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6812      	ldr	r2, [r2, #0]
 8002330:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002334:	f023 0302 	bic.w	r3, r3, #2
 8002338:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	7e1b      	ldrb	r3, [r3, #24]
 800233e:	039a      	lsls	r2, r3, #14
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	4313      	orrs	r3, r2
 800234a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800234c:	4313      	orrs	r3, r2
 800234e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68da      	ldr	r2, [r3, #12]
 8002356:	4b1e      	ldr	r3, [pc, #120]	; (80023d0 <HAL_ADC_Init+0x3f0>)
 8002358:	4013      	ands	r3, r2
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6812      	ldr	r2, [r2, #0]
 800235e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002360:	430b      	orrs	r3, r1
 8002362:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d10c      	bne.n	8002386 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	f023 010f 	bic.w	r1, r3, #15
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	1e5a      	subs	r2, r3, #1
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	430a      	orrs	r2, r1
 8002382:	631a      	str	r2, [r3, #48]	; 0x30
 8002384:	e007      	b.n	8002396 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 020f 	bic.w	r2, r2, #15
 8002394:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	f023 0303 	bic.w	r3, r3, #3
 80023a4:	f043 0201 	orr.w	r2, r3, #1
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	641a      	str	r2, [r3, #64]	; 0x40
 80023ac:	e00a      	b.n	80023c4 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f023 0312 	bic.w	r3, r3, #18
 80023b6:	f043 0210 	orr.w	r2, r3, #16
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80023be:	2301      	movs	r3, #1
 80023c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80023c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3768      	adds	r7, #104	; 0x68
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	fff0c007 	.word	0xfff0c007

080023d4 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f040 80f9 	bne.w	80025e2 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d101      	bne.n	80023fe <HAL_ADC_Start+0x2a>
 80023fa:	2302      	movs	r3, #2
 80023fc:	e0f4      	b.n	80025e8 <HAL_ADC_Start+0x214>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 fde6 	bl	8002fd8 <ADC_Enable>
 800240c:	4603      	mov	r3, r0
 800240e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002410:	7bfb      	ldrb	r3, [r7, #15]
 8002412:	2b00      	cmp	r3, #0
 8002414:	f040 80e0 	bne.w	80025d8 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002420:	f023 0301 	bic.w	r3, r3, #1
 8002424:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002434:	d004      	beq.n	8002440 <HAL_ADC_Start+0x6c>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a6d      	ldr	r2, [pc, #436]	; (80025f0 <HAL_ADC_Start+0x21c>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d106      	bne.n	800244e <HAL_ADC_Start+0x7a>
 8002440:	4b6c      	ldr	r3, [pc, #432]	; (80025f4 <HAL_ADC_Start+0x220>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 031f 	and.w	r3, r3, #31
 8002448:	2b00      	cmp	r3, #0
 800244a:	d010      	beq.n	800246e <HAL_ADC_Start+0x9a>
 800244c:	e005      	b.n	800245a <HAL_ADC_Start+0x86>
 800244e:	4b6a      	ldr	r3, [pc, #424]	; (80025f8 <HAL_ADC_Start+0x224>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 031f 	and.w	r3, r3, #31
 8002456:	2b00      	cmp	r3, #0
 8002458:	d009      	beq.n	800246e <HAL_ADC_Start+0x9a>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002462:	d004      	beq.n	800246e <HAL_ADC_Start+0x9a>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a64      	ldr	r2, [pc, #400]	; (80025fc <HAL_ADC_Start+0x228>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d115      	bne.n	800249a <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d036      	beq.n	80024f6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002490:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002498:	e02d      	b.n	80024f6 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024ae:	d004      	beq.n	80024ba <HAL_ADC_Start+0xe6>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a4e      	ldr	r2, [pc, #312]	; (80025f0 <HAL_ADC_Start+0x21c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d10a      	bne.n	80024d0 <HAL_ADC_Start+0xfc>
 80024ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	bf14      	ite	ne
 80024c8:	2301      	movne	r3, #1
 80024ca:	2300      	moveq	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	e008      	b.n	80024e2 <HAL_ADC_Start+0x10e>
 80024d0:	4b4a      	ldr	r3, [pc, #296]	; (80025fc <HAL_ADC_Start+0x228>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	bf14      	ite	ne
 80024dc:	2301      	movne	r3, #1
 80024de:	2300      	moveq	r3, #0
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d007      	beq.n	80024f6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002502:	d106      	bne.n	8002512 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002508:	f023 0206 	bic.w	r2, r3, #6
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	645a      	str	r2, [r3, #68]	; 0x44
 8002510:	e002      	b.n	8002518 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	221c      	movs	r2, #28
 8002526:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002530:	d004      	beq.n	800253c <HAL_ADC_Start+0x168>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a2e      	ldr	r2, [pc, #184]	; (80025f0 <HAL_ADC_Start+0x21c>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d106      	bne.n	800254a <HAL_ADC_Start+0x176>
 800253c:	4b2d      	ldr	r3, [pc, #180]	; (80025f4 <HAL_ADC_Start+0x220>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 031f 	and.w	r3, r3, #31
 8002544:	2b00      	cmp	r3, #0
 8002546:	d03e      	beq.n	80025c6 <HAL_ADC_Start+0x1f2>
 8002548:	e005      	b.n	8002556 <HAL_ADC_Start+0x182>
 800254a:	4b2b      	ldr	r3, [pc, #172]	; (80025f8 <HAL_ADC_Start+0x224>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 031f 	and.w	r3, r3, #31
 8002552:	2b00      	cmp	r3, #0
 8002554:	d037      	beq.n	80025c6 <HAL_ADC_Start+0x1f2>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800255e:	d004      	beq.n	800256a <HAL_ADC_Start+0x196>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a22      	ldr	r2, [pc, #136]	; (80025f0 <HAL_ADC_Start+0x21c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d106      	bne.n	8002578 <HAL_ADC_Start+0x1a4>
 800256a:	4b22      	ldr	r3, [pc, #136]	; (80025f4 <HAL_ADC_Start+0x220>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 031f 	and.w	r3, r3, #31
 8002572:	2b05      	cmp	r3, #5
 8002574:	d027      	beq.n	80025c6 <HAL_ADC_Start+0x1f2>
 8002576:	e005      	b.n	8002584 <HAL_ADC_Start+0x1b0>
 8002578:	4b1f      	ldr	r3, [pc, #124]	; (80025f8 <HAL_ADC_Start+0x224>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 031f 	and.w	r3, r3, #31
 8002580:	2b05      	cmp	r3, #5
 8002582:	d020      	beq.n	80025c6 <HAL_ADC_Start+0x1f2>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800258c:	d004      	beq.n	8002598 <HAL_ADC_Start+0x1c4>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a17      	ldr	r2, [pc, #92]	; (80025f0 <HAL_ADC_Start+0x21c>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d106      	bne.n	80025a6 <HAL_ADC_Start+0x1d2>
 8002598:	4b16      	ldr	r3, [pc, #88]	; (80025f4 <HAL_ADC_Start+0x220>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 031f 	and.w	r3, r3, #31
 80025a0:	2b09      	cmp	r3, #9
 80025a2:	d010      	beq.n	80025c6 <HAL_ADC_Start+0x1f2>
 80025a4:	e005      	b.n	80025b2 <HAL_ADC_Start+0x1de>
 80025a6:	4b14      	ldr	r3, [pc, #80]	; (80025f8 <HAL_ADC_Start+0x224>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 031f 	and.w	r3, r3, #31
 80025ae:	2b09      	cmp	r3, #9
 80025b0:	d009      	beq.n	80025c6 <HAL_ADC_Start+0x1f2>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025ba:	d004      	beq.n	80025c6 <HAL_ADC_Start+0x1f2>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a0e      	ldr	r2, [pc, #56]	; (80025fc <HAL_ADC_Start+0x228>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d10f      	bne.n	80025e6 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f042 0204 	orr.w	r2, r2, #4
 80025d4:	609a      	str	r2, [r3, #8]
 80025d6:	e006      	b.n	80025e6 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80025e0:	e001      	b.n	80025e6 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80025e2:	2302      	movs	r3, #2
 80025e4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	50000100 	.word	0x50000100
 80025f4:	50000300 	.word	0x50000300
 80025f8:	50000700 	.word	0x50000700
 80025fc:	50000400 	.word	0x50000400

08002600 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800260a:	2300      	movs	r3, #0
 800260c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	2b08      	cmp	r3, #8
 8002614:	d102      	bne.n	800261c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002616:	2308      	movs	r3, #8
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	e03a      	b.n	8002692 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002624:	d004      	beq.n	8002630 <HAL_ADC_PollForConversion+0x30>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a72      	ldr	r2, [pc, #456]	; (80027f4 <HAL_ADC_PollForConversion+0x1f4>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d101      	bne.n	8002634 <HAL_ADC_PollForConversion+0x34>
 8002630:	4b71      	ldr	r3, [pc, #452]	; (80027f8 <HAL_ADC_PollForConversion+0x1f8>)
 8002632:	e000      	b.n	8002636 <HAL_ADC_PollForConversion+0x36>
 8002634:	4b71      	ldr	r3, [pc, #452]	; (80027fc <HAL_ADC_PollForConversion+0x1fc>)
 8002636:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 031f 	and.w	r3, r3, #31
 8002640:	2b00      	cmp	r3, #0
 8002642:	d112      	bne.n	800266a <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b01      	cmp	r3, #1
 8002650:	d11d      	bne.n	800268e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	f043 0220 	orr.w	r2, r3, #32
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e0bf      	b.n	80027ea <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00b      	beq.n	800268e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f043 0220 	orr.w	r2, r3, #32
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e0ad      	b.n	80027ea <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800268e:	230c      	movs	r3, #12
 8002690:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800269a:	d004      	beq.n	80026a6 <HAL_ADC_PollForConversion+0xa6>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a54      	ldr	r2, [pc, #336]	; (80027f4 <HAL_ADC_PollForConversion+0x1f4>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d106      	bne.n	80026b4 <HAL_ADC_PollForConversion+0xb4>
 80026a6:	4b54      	ldr	r3, [pc, #336]	; (80027f8 <HAL_ADC_PollForConversion+0x1f8>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 031f 	and.w	r3, r3, #31
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d010      	beq.n	80026d4 <HAL_ADC_PollForConversion+0xd4>
 80026b2:	e005      	b.n	80026c0 <HAL_ADC_PollForConversion+0xc0>
 80026b4:	4b51      	ldr	r3, [pc, #324]	; (80027fc <HAL_ADC_PollForConversion+0x1fc>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 031f 	and.w	r3, r3, #31
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d009      	beq.n	80026d4 <HAL_ADC_PollForConversion+0xd4>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026c8:	d004      	beq.n	80026d4 <HAL_ADC_PollForConversion+0xd4>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a4c      	ldr	r2, [pc, #304]	; (8002800 <HAL_ADC_PollForConversion+0x200>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d104      	bne.n	80026de <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	e00f      	b.n	80026fe <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026e6:	d004      	beq.n	80026f2 <HAL_ADC_PollForConversion+0xf2>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a41      	ldr	r2, [pc, #260]	; (80027f4 <HAL_ADC_PollForConversion+0x1f4>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d102      	bne.n	80026f8 <HAL_ADC_PollForConversion+0xf8>
 80026f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026f6:	e000      	b.n	80026fa <HAL_ADC_PollForConversion+0xfa>
 80026f8:	4b41      	ldr	r3, [pc, #260]	; (8002800 <HAL_ADC_PollForConversion+0x200>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80026fe:	f7ff fc63 	bl	8001fc8 <HAL_GetTick>
 8002702:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002704:	e021      	b.n	800274a <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270c:	d01d      	beq.n	800274a <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d007      	beq.n	8002724 <HAL_ADC_PollForConversion+0x124>
 8002714:	f7ff fc58 	bl	8001fc8 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	429a      	cmp	r2, r3
 8002722:	d212      	bcs.n	800274a <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	4013      	ands	r3, r2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10b      	bne.n	800274a <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f043 0204 	orr.w	r2, r3, #4
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e04f      	b.n	80027ea <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	4013      	ands	r3, r2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0d6      	beq.n	8002706 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800276e:	2b00      	cmp	r3, #0
 8002770:	d131      	bne.n	80027d6 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002778:	2b00      	cmp	r3, #0
 800277a:	d12c      	bne.n	80027d6 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	2b08      	cmp	r3, #8
 8002788:	d125      	bne.n	80027d6 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	d112      	bne.n	80027be <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d112      	bne.n	80027d6 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b4:	f043 0201 	orr.w	r2, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	641a      	str	r2, [r3, #64]	; 0x40
 80027bc:	e00b      	b.n	80027d6 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	f043 0220 	orr.w	r2, r3, #32
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ce:	f043 0201 	orr.w	r2, r3, #1
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d103      	bne.n	80027e8 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	50000100 	.word	0x50000100
 80027f8:	50000300 	.word	0x50000300
 80027fc:	50000700 	.word	0x50000700
 8002800:	50000400 	.word	0x50000400

08002804 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002812:	4618      	mov	r0, r3
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
	...

08002820 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002820:	b480      	push	{r7}
 8002822:	b09b      	sub	sp, #108	; 0x6c
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800283a:	2b01      	cmp	r3, #1
 800283c:	d101      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x22>
 800283e:	2302      	movs	r3, #2
 8002840:	e2c8      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x5b4>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	f040 82ac 	bne.w	8002db2 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b04      	cmp	r3, #4
 8002860:	d81c      	bhi.n	800289c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	4613      	mov	r3, r2
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	4413      	add	r3, r2
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	461a      	mov	r2, r3
 8002876:	231f      	movs	r3, #31
 8002878:	4093      	lsls	r3, r2
 800287a:	43db      	mvns	r3, r3
 800287c:	4019      	ands	r1, r3
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6818      	ldr	r0, [r3, #0]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	4613      	mov	r3, r2
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	4413      	add	r3, r2
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	fa00 f203 	lsl.w	r2, r0, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	631a      	str	r2, [r3, #48]	; 0x30
 800289a:	e063      	b.n	8002964 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b09      	cmp	r3, #9
 80028a2:	d81e      	bhi.n	80028e2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	4613      	mov	r3, r2
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	4413      	add	r3, r2
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	3b1e      	subs	r3, #30
 80028b8:	221f      	movs	r2, #31
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43db      	mvns	r3, r3
 80028c0:	4019      	ands	r1, r3
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	6818      	ldr	r0, [r3, #0]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	4413      	add	r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	3b1e      	subs	r3, #30
 80028d4:	fa00 f203 	lsl.w	r2, r0, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	430a      	orrs	r2, r1
 80028de:	635a      	str	r2, [r3, #52]	; 0x34
 80028e0:	e040      	b.n	8002964 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b0e      	cmp	r3, #14
 80028e8:	d81e      	bhi.n	8002928 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	4413      	add	r3, r2
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	3b3c      	subs	r3, #60	; 0x3c
 80028fe:	221f      	movs	r2, #31
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	4019      	ands	r1, r3
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	6818      	ldr	r0, [r3, #0]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	4613      	mov	r3, r2
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	4413      	add	r3, r2
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	3b3c      	subs	r3, #60	; 0x3c
 800291a:	fa00 f203 	lsl.w	r2, r0, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	639a      	str	r2, [r3, #56]	; 0x38
 8002926:	e01d      	b.n	8002964 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	4413      	add	r3, r2
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	3b5a      	subs	r3, #90	; 0x5a
 800293c:	221f      	movs	r2, #31
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43db      	mvns	r3, r3
 8002944:	4019      	ands	r1, r3
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	6818      	ldr	r0, [r3, #0]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	4413      	add	r3, r2
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	3b5a      	subs	r3, #90	; 0x5a
 8002958:	fa00 f203 	lsl.w	r2, r0, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 030c 	and.w	r3, r3, #12
 800296e:	2b00      	cmp	r3, #0
 8002970:	f040 80e5 	bne.w	8002b3e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b09      	cmp	r3, #9
 800297a:	d91c      	bls.n	80029b6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6999      	ldr	r1, [r3, #24]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	4613      	mov	r3, r2
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	4413      	add	r3, r2
 800298c:	3b1e      	subs	r3, #30
 800298e:	2207      	movs	r2, #7
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	4019      	ands	r1, r3
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	6898      	ldr	r0, [r3, #8]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	4613      	mov	r3, r2
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	4413      	add	r3, r2
 80029a6:	3b1e      	subs	r3, #30
 80029a8:	fa00 f203 	lsl.w	r2, r0, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	619a      	str	r2, [r3, #24]
 80029b4:	e019      	b.n	80029ea <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6959      	ldr	r1, [r3, #20]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	4613      	mov	r3, r2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4413      	add	r3, r2
 80029c6:	2207      	movs	r2, #7
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	4019      	ands	r1, r3
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	6898      	ldr	r0, [r3, #8]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	4613      	mov	r3, r2
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	4413      	add	r3, r2
 80029de:	fa00 f203 	lsl.w	r2, r0, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	695a      	ldr	r2, [r3, #20]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	08db      	lsrs	r3, r3, #3
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	d84f      	bhi.n	8002aac <HAL_ADC_ConfigChannel+0x28c>
 8002a0c:	a201      	add	r2, pc, #4	; (adr r2, 8002a14 <HAL_ADC_ConfigChannel+0x1f4>)
 8002a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a12:	bf00      	nop
 8002a14:	08002a25 	.word	0x08002a25
 8002a18:	08002a47 	.word	0x08002a47
 8002a1c:	08002a69 	.word	0x08002a69
 8002a20:	08002a8b 	.word	0x08002a8b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a2a:	4b99      	ldr	r3, [pc, #612]	; (8002c90 <HAL_ADC_ConfigChannel+0x470>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	6812      	ldr	r2, [r2, #0]
 8002a32:	0691      	lsls	r1, r2, #26
 8002a34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a36:	430a      	orrs	r2, r1
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a42:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a44:	e07b      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a4c:	4b90      	ldr	r3, [pc, #576]	; (8002c90 <HAL_ADC_ConfigChannel+0x470>)
 8002a4e:	4013      	ands	r3, r2
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	0691      	lsls	r1, r2, #26
 8002a56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a64:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a66:	e06a      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002a6e:	4b88      	ldr	r3, [pc, #544]	; (8002c90 <HAL_ADC_ConfigChannel+0x470>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	6812      	ldr	r2, [r2, #0]
 8002a76:	0691      	lsls	r1, r2, #26
 8002a78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a86:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a88:	e059      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002a90:	4b7f      	ldr	r3, [pc, #508]	; (8002c90 <HAL_ADC_ConfigChannel+0x470>)
 8002a92:	4013      	ands	r3, r2
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	6812      	ldr	r2, [r2, #0]
 8002a98:	0691      	lsls	r1, r2, #26
 8002a9a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002aa8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002aaa:	e048      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ab2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	069b      	lsls	r3, r3, #26
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d107      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ace:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ad6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	069b      	lsls	r3, r3, #26
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d107      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002af2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002afa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	069b      	lsls	r3, r3, #26
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d107      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b16:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	069b      	lsls	r3, r3, #26
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d107      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b3a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002b3c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 0303 	and.w	r3, r3, #3
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d108      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x33e>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d101      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x33e>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <HAL_ADC_ConfigChannel+0x340>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f040 8131 	bne.w	8002dc8 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d00f      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	43da      	mvns	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	400a      	ands	r2, r1
 8002b88:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002b8c:	e049      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	409a      	lsls	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b09      	cmp	r3, #9
 8002bae:	d91c      	bls.n	8002bea <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6999      	ldr	r1, [r3, #24]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3b1b      	subs	r3, #27
 8002bc2:	2207      	movs	r2, #7
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	4019      	ands	r1, r3
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	6898      	ldr	r0, [r3, #8]
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	4413      	add	r3, r2
 8002bda:	3b1b      	subs	r3, #27
 8002bdc:	fa00 f203 	lsl.w	r2, r0, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	619a      	str	r2, [r3, #24]
 8002be8:	e01b      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6959      	ldr	r1, [r3, #20]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	4413      	add	r3, r2
 8002bfc:	2207      	movs	r2, #7
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43db      	mvns	r3, r3
 8002c04:	4019      	ands	r1, r3
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	6898      	ldr	r0, [r3, #8]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	1c5a      	adds	r2, r3, #1
 8002c10:	4613      	mov	r3, r2
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	4413      	add	r3, r2
 8002c16:	fa00 f203 	lsl.w	r2, r0, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c2a:	d004      	beq.n	8002c36 <HAL_ADC_ConfigChannel+0x416>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a18      	ldr	r2, [pc, #96]	; (8002c94 <HAL_ADC_ConfigChannel+0x474>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d101      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x41a>
 8002c36:	4b18      	ldr	r3, [pc, #96]	; (8002c98 <HAL_ADC_ConfigChannel+0x478>)
 8002c38:	e000      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x41c>
 8002c3a:	4b18      	ldr	r3, [pc, #96]	; (8002c9c <HAL_ADC_ConfigChannel+0x47c>)
 8002c3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2b10      	cmp	r3, #16
 8002c44:	d105      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002c46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d015      	beq.n	8002c7e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002c56:	2b11      	cmp	r3, #17
 8002c58:	d105      	bne.n	8002c66 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002c5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00b      	beq.n	8002c7e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002c6a:	2b12      	cmp	r3, #18
 8002c6c:	f040 80ac 	bne.w	8002dc8 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f040 80a5 	bne.w	8002dc8 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c86:	d10b      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x480>
 8002c88:	4b02      	ldr	r3, [pc, #8]	; (8002c94 <HAL_ADC_ConfigChannel+0x474>)
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	e023      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x4b6>
 8002c8e:	bf00      	nop
 8002c90:	83fff000 	.word	0x83fff000
 8002c94:	50000100 	.word	0x50000100
 8002c98:	50000300 	.word	0x50000300
 8002c9c:	50000700 	.word	0x50000700
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a4e      	ldr	r2, [pc, #312]	; (8002de0 <HAL_ADC_ConfigChannel+0x5c0>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d103      	bne.n	8002cb2 <HAL_ADC_ConfigChannel+0x492>
 8002caa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	e011      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x4b6>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a4b      	ldr	r2, [pc, #300]	; (8002de4 <HAL_ADC_ConfigChannel+0x5c4>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d102      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x4a2>
 8002cbc:	4b4a      	ldr	r3, [pc, #296]	; (8002de8 <HAL_ADC_ConfigChannel+0x5c8>)
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	e009      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x4b6>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a48      	ldr	r2, [pc, #288]	; (8002de8 <HAL_ADC_ConfigChannel+0x5c8>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d102      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x4b2>
 8002ccc:	4b45      	ldr	r3, [pc, #276]	; (8002de4 <HAL_ADC_ConfigChannel+0x5c4>)
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	e001      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x4b6>
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 0303 	and.w	r3, r3, #3
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d108      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x4d6>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d101      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x4d6>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x4d8>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d150      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002cfc:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d010      	beq.n	8002d24 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d107      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x4fe>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x4fe>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x500>
 8002d1e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d13c      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b10      	cmp	r3, #16
 8002d2a:	d11d      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x548>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d34:	d118      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002d36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d40:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d42:	4b2a      	ldr	r3, [pc, #168]	; (8002dec <HAL_ADC_ConfigChannel+0x5cc>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a2a      	ldr	r2, [pc, #168]	; (8002df0 <HAL_ADC_ConfigChannel+0x5d0>)
 8002d48:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4c:	0c9a      	lsrs	r2, r3, #18
 8002d4e:	4613      	mov	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d58:	e002      	b.n	8002d60 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f9      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d66:	e02e      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b11      	cmp	r3, #17
 8002d6e:	d10b      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x568>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d78:	d106      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002d7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002d82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d84:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d86:	e01e      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b12      	cmp	r3, #18
 8002d8e:	d11a      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002d90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d9a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d9c:	e013      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	f043 0220 	orr.w	r2, r3, #32
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002db0:	e00a      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	f043 0220 	orr.w	r2, r3, #32
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002dc4:	e000      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002dc6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002dd0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	376c      	adds	r7, #108	; 0x6c
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	50000100 	.word	0x50000100
 8002de4:	50000400 	.word	0x50000400
 8002de8:	50000500 	.word	0x50000500
 8002dec:	20000004 	.word	0x20000004
 8002df0:	431bde83 	.word	0x431bde83

08002df4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b099      	sub	sp, #100	; 0x64
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e0c:	d102      	bne.n	8002e14 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002e0e:	4b6d      	ldr	r3, [pc, #436]	; (8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002e10:	60bb      	str	r3, [r7, #8]
 8002e12:	e01a      	b.n	8002e4a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a6a      	ldr	r2, [pc, #424]	; (8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d103      	bne.n	8002e26 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002e1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e22:	60bb      	str	r3, [r7, #8]
 8002e24:	e011      	b.n	8002e4a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a67      	ldr	r2, [pc, #412]	; (8002fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d102      	bne.n	8002e36 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e30:	4b66      	ldr	r3, [pc, #408]	; (8002fcc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	e009      	b.n	8002e4a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a64      	ldr	r2, [pc, #400]	; (8002fcc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d102      	bne.n	8002e46 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002e40:	4b61      	ldr	r3, [pc, #388]	; (8002fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	e001      	b.n	8002e4a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002e46:	2300      	movs	r3, #0
 8002e48:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e0b0      	b.n	8002fb6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d101      	bne.n	8002e62 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e0a9      	b.n	8002fb6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f040 808d 	bne.w	8002f94 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 0304 	and.w	r3, r3, #4
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f040 8086 	bne.w	8002f94 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e90:	d004      	beq.n	8002e9c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a4b      	ldr	r2, [pc, #300]	; (8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d101      	bne.n	8002ea0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002e9c:	4b4c      	ldr	r3, [pc, #304]	; (8002fd0 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002e9e:	e000      	b.n	8002ea2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002ea0:	4b4c      	ldr	r3, [pc, #304]	; (8002fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002ea2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d040      	beq.n	8002f2e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002eac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	6859      	ldr	r1, [r3, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ebe:	035b      	lsls	r3, r3, #13
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ec6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d108      	bne.n	8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e000      	b.n	8002eea <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d15c      	bne.n	8002fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d107      	bne.n	8002f0a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002f06:	2301      	movs	r3, #1
 8002f08:	e000      	b.n	8002f0c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002f0a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d14b      	bne.n	8002fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002f10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f18:	f023 030f 	bic.w	r3, r3, #15
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	6811      	ldr	r1, [r2, #0]
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	6892      	ldr	r2, [r2, #8]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	431a      	orrs	r2, r3
 8002f28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f2a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f2c:	e03c      	b.n	8002fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f38:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 0303 	and.w	r3, r3, #3
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d108      	bne.n	8002f5a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d123      	bne.n	8002fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 0303 	and.w	r3, r3, #3
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d107      	bne.n	8002f7c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e000      	b.n	8002f7e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002f7c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d112      	bne.n	8002fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002f82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f8a:	f023 030f 	bic.w	r3, r3, #15
 8002f8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f90:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f92:	e009      	b.n	8002fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	f043 0220 	orr.w	r2, r3, #32
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002fa6:	e000      	b.n	8002faa <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fa8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002fb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3764      	adds	r7, #100	; 0x64
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	50000100 	.word	0x50000100
 8002fc8:	50000400 	.word	0x50000400
 8002fcc:	50000500 	.word	0x50000500
 8002fd0:	50000300 	.word	0x50000300
 8002fd4:	50000700 	.word	0x50000700

08002fd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d108      	bne.n	8003004 <ADC_Enable+0x2c>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d101      	bne.n	8003004 <ADC_Enable+0x2c>
 8003000:	2301      	movs	r3, #1
 8003002:	e000      	b.n	8003006 <ADC_Enable+0x2e>
 8003004:	2300      	movs	r3, #0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d143      	bne.n	8003092 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	4b22      	ldr	r3, [pc, #136]	; (800309c <ADC_Enable+0xc4>)
 8003012:	4013      	ands	r3, r2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00d      	beq.n	8003034 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	f043 0210 	orr.w	r2, r3, #16
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003028:	f043 0201 	orr.w	r2, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e02f      	b.n	8003094 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0201 	orr.w	r2, r2, #1
 8003042:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003044:	f7fe ffc0 	bl	8001fc8 <HAL_GetTick>
 8003048:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800304a:	e01b      	b.n	8003084 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800304c:	f7fe ffbc 	bl	8001fc8 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d914      	bls.n	8003084 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b01      	cmp	r3, #1
 8003066:	d00d      	beq.n	8003084 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	f043 0210 	orr.w	r2, r3, #16
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003078:	f043 0201 	orr.w	r2, r3, #1
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e007      	b.n	8003094 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b01      	cmp	r3, #1
 8003090:	d1dc      	bne.n	800304c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	8000003f 	.word	0x8000003f

080030a0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d108      	bne.n	80030cc <ADC_Disable+0x2c>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <ADC_Disable+0x2c>
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <ADC_Disable+0x2e>
 80030cc:	2300      	movs	r3, #0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d047      	beq.n	8003162 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 030d 	and.w	r3, r3, #13
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d10f      	bne.n	8003100 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689a      	ldr	r2, [r3, #8]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0202 	orr.w	r2, r2, #2
 80030ee:	609a      	str	r2, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2203      	movs	r2, #3
 80030f6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80030f8:	f7fe ff66 	bl	8001fc8 <HAL_GetTick>
 80030fc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80030fe:	e029      	b.n	8003154 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	f043 0210 	orr.w	r2, r3, #16
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003110:	f043 0201 	orr.w	r2, r3, #1
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e023      	b.n	8003164 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800311c:	f7fe ff54 	bl	8001fc8 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d914      	bls.n	8003154 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b01      	cmp	r3, #1
 8003136:	d10d      	bne.n	8003154 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313c:	f043 0210 	orr.w	r2, r3, #16
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003148:	f043 0201 	orr.w	r2, r3, #1
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e007      	b.n	8003164 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b01      	cmp	r3, #1
 8003160:	d0dc      	beq.n	800311c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800317c:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <__NVIC_SetPriorityGrouping+0x44>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003188:	4013      	ands	r3, r2
 800318a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003194:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800319c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800319e:	4a04      	ldr	r2, [pc, #16]	; (80031b0 <__NVIC_SetPriorityGrouping+0x44>)
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	60d3      	str	r3, [r2, #12]
}
 80031a4:	bf00      	nop
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	e000ed00 	.word	0xe000ed00

080031b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031b8:	4b04      	ldr	r3, [pc, #16]	; (80031cc <__NVIC_GetPriorityGrouping+0x18>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	0a1b      	lsrs	r3, r3, #8
 80031be:	f003 0307 	and.w	r3, r3, #7
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	e000ed00 	.word	0xe000ed00

080031d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	db0b      	blt.n	80031fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	f003 021f 	and.w	r2, r3, #31
 80031e8:	4907      	ldr	r1, [pc, #28]	; (8003208 <__NVIC_EnableIRQ+0x38>)
 80031ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ee:	095b      	lsrs	r3, r3, #5
 80031f0:	2001      	movs	r0, #1
 80031f2:	fa00 f202 	lsl.w	r2, r0, r2
 80031f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031fa:	bf00      	nop
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	e000e100 	.word	0xe000e100

0800320c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	4603      	mov	r3, r0
 8003214:	6039      	str	r1, [r7, #0]
 8003216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321c:	2b00      	cmp	r3, #0
 800321e:	db0a      	blt.n	8003236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	b2da      	uxtb	r2, r3
 8003224:	490c      	ldr	r1, [pc, #48]	; (8003258 <__NVIC_SetPriority+0x4c>)
 8003226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322a:	0112      	lsls	r2, r2, #4
 800322c:	b2d2      	uxtb	r2, r2
 800322e:	440b      	add	r3, r1
 8003230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003234:	e00a      	b.n	800324c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	b2da      	uxtb	r2, r3
 800323a:	4908      	ldr	r1, [pc, #32]	; (800325c <__NVIC_SetPriority+0x50>)
 800323c:	79fb      	ldrb	r3, [r7, #7]
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	3b04      	subs	r3, #4
 8003244:	0112      	lsls	r2, r2, #4
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	440b      	add	r3, r1
 800324a:	761a      	strb	r2, [r3, #24]
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	e000e100 	.word	0xe000e100
 800325c:	e000ed00 	.word	0xe000ed00

08003260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003260:	b480      	push	{r7}
 8003262:	b089      	sub	sp, #36	; 0x24
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	f1c3 0307 	rsb	r3, r3, #7
 800327a:	2b04      	cmp	r3, #4
 800327c:	bf28      	it	cs
 800327e:	2304      	movcs	r3, #4
 8003280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	3304      	adds	r3, #4
 8003286:	2b06      	cmp	r3, #6
 8003288:	d902      	bls.n	8003290 <NVIC_EncodePriority+0x30>
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	3b03      	subs	r3, #3
 800328e:	e000      	b.n	8003292 <NVIC_EncodePriority+0x32>
 8003290:	2300      	movs	r3, #0
 8003292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003294:	f04f 32ff 	mov.w	r2, #4294967295
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	43da      	mvns	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	401a      	ands	r2, r3
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032a8:	f04f 31ff 	mov.w	r1, #4294967295
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	fa01 f303 	lsl.w	r3, r1, r3
 80032b2:	43d9      	mvns	r1, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b8:	4313      	orrs	r3, r2
         );
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3724      	adds	r7, #36	; 0x24
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b082      	sub	sp, #8
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7ff ff4c 	bl	800316c <__NVIC_SetPriorityGrouping>
}
 80032d4:	bf00      	nop
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
 80032e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032ee:	f7ff ff61 	bl	80031b4 <__NVIC_GetPriorityGrouping>
 80032f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	68b9      	ldr	r1, [r7, #8]
 80032f8:	6978      	ldr	r0, [r7, #20]
 80032fa:	f7ff ffb1 	bl	8003260 <NVIC_EncodePriority>
 80032fe:	4602      	mov	r2, r0
 8003300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003304:	4611      	mov	r1, r2
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff ff80 	bl	800320c <__NVIC_SetPriority>
}
 800330c:	bf00      	nop
 800330e:	3718      	adds	r7, #24
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800331e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff ff54 	bl	80031d0 <__NVIC_EnableIRQ>
}
 8003328:	bf00      	nop
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003330:	b480      	push	{r7}
 8003332:	b087      	sub	sp, #28
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800333a:	2300      	movs	r3, #0
 800333c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800333e:	e160      	b.n	8003602 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	2101      	movs	r1, #1
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	fa01 f303 	lsl.w	r3, r1, r3
 800334c:	4013      	ands	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 8152 	beq.w	80035fc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 0303 	and.w	r3, r3, #3
 8003360:	2b01      	cmp	r3, #1
 8003362:	d005      	beq.n	8003370 <HAL_GPIO_Init+0x40>
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f003 0303 	and.w	r3, r3, #3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d130      	bne.n	80033d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	2203      	movs	r2, #3
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	43db      	mvns	r3, r3
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	4013      	ands	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4313      	orrs	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033a6:	2201      	movs	r2, #1
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	43db      	mvns	r3, r3
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	4013      	ands	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	091b      	lsrs	r3, r3, #4
 80033bc:	f003 0201 	and.w	r2, r3, #1
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	2b03      	cmp	r3, #3
 80033dc:	d017      	beq.n	800340e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	2203      	movs	r2, #3
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43db      	mvns	r3, r3
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	4013      	ands	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	689a      	ldr	r2, [r3, #8]
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d123      	bne.n	8003462 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	08da      	lsrs	r2, r3, #3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	3208      	adds	r2, #8
 8003422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003426:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	220f      	movs	r2, #15
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	43db      	mvns	r3, r3
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	4013      	ands	r3, r2
 800343c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	691a      	ldr	r2, [r3, #16]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	08da      	lsrs	r2, r3, #3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3208      	adds	r2, #8
 800345c:	6939      	ldr	r1, [r7, #16]
 800345e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	2203      	movs	r2, #3
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43db      	mvns	r3, r3
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4013      	ands	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f003 0203 	and.w	r2, r3, #3
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	4313      	orrs	r3, r2
 800348e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 80ac 	beq.w	80035fc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034a4:	4b5e      	ldr	r3, [pc, #376]	; (8003620 <HAL_GPIO_Init+0x2f0>)
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	4a5d      	ldr	r2, [pc, #372]	; (8003620 <HAL_GPIO_Init+0x2f0>)
 80034aa:	f043 0301 	orr.w	r3, r3, #1
 80034ae:	6193      	str	r3, [r2, #24]
 80034b0:	4b5b      	ldr	r3, [pc, #364]	; (8003620 <HAL_GPIO_Init+0x2f0>)
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	60bb      	str	r3, [r7, #8]
 80034ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034bc:	4a59      	ldr	r2, [pc, #356]	; (8003624 <HAL_GPIO_Init+0x2f4>)
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	089b      	lsrs	r3, r3, #2
 80034c2:	3302      	adds	r3, #2
 80034c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f003 0303 	and.w	r3, r3, #3
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	220f      	movs	r2, #15
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	43db      	mvns	r3, r3
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4013      	ands	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80034e6:	d025      	beq.n	8003534 <HAL_GPIO_Init+0x204>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a4f      	ldr	r2, [pc, #316]	; (8003628 <HAL_GPIO_Init+0x2f8>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d01f      	beq.n	8003530 <HAL_GPIO_Init+0x200>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a4e      	ldr	r2, [pc, #312]	; (800362c <HAL_GPIO_Init+0x2fc>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d019      	beq.n	800352c <HAL_GPIO_Init+0x1fc>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a4d      	ldr	r2, [pc, #308]	; (8003630 <HAL_GPIO_Init+0x300>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d013      	beq.n	8003528 <HAL_GPIO_Init+0x1f8>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a4c      	ldr	r2, [pc, #304]	; (8003634 <HAL_GPIO_Init+0x304>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d00d      	beq.n	8003524 <HAL_GPIO_Init+0x1f4>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a4b      	ldr	r2, [pc, #300]	; (8003638 <HAL_GPIO_Init+0x308>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d007      	beq.n	8003520 <HAL_GPIO_Init+0x1f0>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a4a      	ldr	r2, [pc, #296]	; (800363c <HAL_GPIO_Init+0x30c>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d101      	bne.n	800351c <HAL_GPIO_Init+0x1ec>
 8003518:	2306      	movs	r3, #6
 800351a:	e00c      	b.n	8003536 <HAL_GPIO_Init+0x206>
 800351c:	2307      	movs	r3, #7
 800351e:	e00a      	b.n	8003536 <HAL_GPIO_Init+0x206>
 8003520:	2305      	movs	r3, #5
 8003522:	e008      	b.n	8003536 <HAL_GPIO_Init+0x206>
 8003524:	2304      	movs	r3, #4
 8003526:	e006      	b.n	8003536 <HAL_GPIO_Init+0x206>
 8003528:	2303      	movs	r3, #3
 800352a:	e004      	b.n	8003536 <HAL_GPIO_Init+0x206>
 800352c:	2302      	movs	r3, #2
 800352e:	e002      	b.n	8003536 <HAL_GPIO_Init+0x206>
 8003530:	2301      	movs	r3, #1
 8003532:	e000      	b.n	8003536 <HAL_GPIO_Init+0x206>
 8003534:	2300      	movs	r3, #0
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	f002 0203 	and.w	r2, r2, #3
 800353c:	0092      	lsls	r2, r2, #2
 800353e:	4093      	lsls	r3, r2
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	4313      	orrs	r3, r2
 8003544:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003546:	4937      	ldr	r1, [pc, #220]	; (8003624 <HAL_GPIO_Init+0x2f4>)
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	089b      	lsrs	r3, r3, #2
 800354c:	3302      	adds	r3, #2
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003554:	4b3a      	ldr	r3, [pc, #232]	; (8003640 <HAL_GPIO_Init+0x310>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	43db      	mvns	r3, r3
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	4013      	ands	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	4313      	orrs	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003578:	4a31      	ldr	r2, [pc, #196]	; (8003640 <HAL_GPIO_Init+0x310>)
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800357e:	4b30      	ldr	r3, [pc, #192]	; (8003640 <HAL_GPIO_Init+0x310>)
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	43db      	mvns	r3, r3
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4013      	ands	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80035a2:	4a27      	ldr	r2, [pc, #156]	; (8003640 <HAL_GPIO_Init+0x310>)
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035a8:	4b25      	ldr	r3, [pc, #148]	; (8003640 <HAL_GPIO_Init+0x310>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	43db      	mvns	r3, r3
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4013      	ands	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80035cc:	4a1c      	ldr	r2, [pc, #112]	; (8003640 <HAL_GPIO_Init+0x310>)
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035d2:	4b1b      	ldr	r3, [pc, #108]	; (8003640 <HAL_GPIO_Init+0x310>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	43db      	mvns	r3, r3
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	4013      	ands	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80035f6:	4a12      	ldr	r2, [pc, #72]	; (8003640 <HAL_GPIO_Init+0x310>)
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	3301      	adds	r3, #1
 8003600:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	fa22 f303 	lsr.w	r3, r2, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	f47f ae97 	bne.w	8003340 <HAL_GPIO_Init+0x10>
  }
}
 8003612:	bf00      	nop
 8003614:	bf00      	nop
 8003616:	371c      	adds	r7, #28
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	40021000 	.word	0x40021000
 8003624:	40010000 	.word	0x40010000
 8003628:	48000400 	.word	0x48000400
 800362c:	48000800 	.word	0x48000800
 8003630:	48000c00 	.word	0x48000c00
 8003634:	48001000 	.word	0x48001000
 8003638:	48001400 	.word	0x48001400
 800363c:	48001800 	.word	0x48001800
 8003640:	40010400 	.word	0x40010400

08003644 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	460b      	mov	r3, r1
 800364e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	691a      	ldr	r2, [r3, #16]
 8003654:	887b      	ldrh	r3, [r7, #2]
 8003656:	4013      	ands	r3, r2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d002      	beq.n	8003662 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800365c:	2301      	movs	r3, #1
 800365e:	73fb      	strb	r3, [r7, #15]
 8003660:	e001      	b.n	8003666 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003662:	2300      	movs	r3, #0
 8003664:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003666:	7bfb      	ldrb	r3, [r7, #15]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	460b      	mov	r3, r1
 800367e:	807b      	strh	r3, [r7, #2]
 8003680:	4613      	mov	r3, r2
 8003682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003684:	787b      	ldrb	r3, [r7, #1]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800368a:	887a      	ldrh	r2, [r7, #2]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003690:	e002      	b.n	8003698 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003692:	887a      	ldrh	r2, [r7, #2]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036b6:	887a      	ldrh	r2, [r7, #2]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4013      	ands	r3, r2
 80036bc:	041a      	lsls	r2, r3, #16
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	43d9      	mvns	r1, r3
 80036c2:	887b      	ldrh	r3, [r7, #2]
 80036c4:	400b      	ands	r3, r1
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	619a      	str	r2, [r3, #24]
}
 80036cc:	bf00      	nop
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80036de:	af00      	add	r7, sp, #0
 80036e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036e8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d102      	bne.n	80036fe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	f001 b83a 	b.w	8004772 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003702:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 816f 	beq.w	80039f2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003714:	4bb5      	ldr	r3, [pc, #724]	; (80039ec <HAL_RCC_OscConfig+0x314>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 030c 	and.w	r3, r3, #12
 800371c:	2b04      	cmp	r3, #4
 800371e:	d00c      	beq.n	800373a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003720:	4bb2      	ldr	r3, [pc, #712]	; (80039ec <HAL_RCC_OscConfig+0x314>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f003 030c 	and.w	r3, r3, #12
 8003728:	2b08      	cmp	r3, #8
 800372a:	d15c      	bne.n	80037e6 <HAL_RCC_OscConfig+0x10e>
 800372c:	4baf      	ldr	r3, [pc, #700]	; (80039ec <HAL_RCC_OscConfig+0x314>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003738:	d155      	bne.n	80037e6 <HAL_RCC_OscConfig+0x10e>
 800373a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800373e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003742:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003746:	fa93 f3a3 	rbit	r3, r3
 800374a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800374e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003752:	fab3 f383 	clz	r3, r3
 8003756:	b2db      	uxtb	r3, r3
 8003758:	095b      	lsrs	r3, r3, #5
 800375a:	b2db      	uxtb	r3, r3
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b01      	cmp	r3, #1
 8003764:	d102      	bne.n	800376c <HAL_RCC_OscConfig+0x94>
 8003766:	4ba1      	ldr	r3, [pc, #644]	; (80039ec <HAL_RCC_OscConfig+0x314>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	e015      	b.n	8003798 <HAL_RCC_OscConfig+0xc0>
 800376c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003770:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003774:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003778:	fa93 f3a3 	rbit	r3, r3
 800377c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003780:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003784:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003788:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800378c:	fa93 f3a3 	rbit	r3, r3
 8003790:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003794:	4b95      	ldr	r3, [pc, #596]	; (80039ec <HAL_RCC_OscConfig+0x314>)
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800379c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80037a0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80037a4:	fa92 f2a2 	rbit	r2, r2
 80037a8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80037ac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80037b0:	fab2 f282 	clz	r2, r2
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	f042 0220 	orr.w	r2, r2, #32
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	f002 021f 	and.w	r2, r2, #31
 80037c0:	2101      	movs	r1, #1
 80037c2:	fa01 f202 	lsl.w	r2, r1, r2
 80037c6:	4013      	ands	r3, r2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 8111 	beq.w	80039f0 <HAL_RCC_OscConfig+0x318>
 80037ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f040 8108 	bne.w	80039f0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	f000 bfc6 	b.w	8004772 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037f6:	d106      	bne.n	8003806 <HAL_RCC_OscConfig+0x12e>
 80037f8:	4b7c      	ldr	r3, [pc, #496]	; (80039ec <HAL_RCC_OscConfig+0x314>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a7b      	ldr	r2, [pc, #492]	; (80039ec <HAL_RCC_OscConfig+0x314>)
 80037fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003802:	6013      	str	r3, [r2, #0]
 8003804:	e036      	b.n	8003874 <HAL_RCC_OscConfig+0x19c>
 8003806:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800380a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10c      	bne.n	8003830 <HAL_RCC_OscConfig+0x158>
 8003816:	4b75      	ldr	r3, [pc, #468]	; (80039ec <HAL_RCC_OscConfig+0x314>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a74      	ldr	r2, [pc, #464]	; (80039ec <HAL_RCC_OscConfig+0x314>)
 800381c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003820:	6013      	str	r3, [r2, #0]
 8003822:	4b72      	ldr	r3, [pc, #456]	; (80039ec <HAL_RCC_OscConfig+0x314>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a71      	ldr	r2, [pc, #452]	; (80039ec <HAL_RCC_OscConfig+0x314>)
 8003828:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	e021      	b.n	8003874 <HAL_RCC_OscConfig+0x19c>
 8003830:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003834:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003840:	d10c      	bne.n	800385c <HAL_RCC_OscConfig+0x184>
 8003842:	4b6a      	ldr	r3, [pc, #424]	; (80039ec <HAL_RCC_OscConfig+0x314>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a69      	ldr	r2, [pc, #420]	; (80039ec <HAL_RCC_OscConfig+0x314>)
 8003848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	4b67      	ldr	r3, [pc, #412]	; (80039ec <HAL_RCC_OscConfig+0x314>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a66      	ldr	r2, [pc, #408]	; (80039ec <HAL_RCC_OscConfig+0x314>)
 8003854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003858:	6013      	str	r3, [r2, #0]
 800385a:	e00b      	b.n	8003874 <HAL_RCC_OscConfig+0x19c>
 800385c:	4b63      	ldr	r3, [pc, #396]	; (80039ec <HAL_RCC_OscConfig+0x314>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a62      	ldr	r2, [pc, #392]	; (80039ec <HAL_RCC_OscConfig+0x314>)
 8003862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003866:	6013      	str	r3, [r2, #0]
 8003868:	4b60      	ldr	r3, [pc, #384]	; (80039ec <HAL_RCC_OscConfig+0x314>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a5f      	ldr	r2, [pc, #380]	; (80039ec <HAL_RCC_OscConfig+0x314>)
 800386e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003872:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003874:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003878:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d059      	beq.n	8003938 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003884:	f7fe fba0 	bl	8001fc8 <HAL_GetTick>
 8003888:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388c:	e00a      	b.n	80038a4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800388e:	f7fe fb9b 	bl	8001fc8 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b64      	cmp	r3, #100	; 0x64
 800389c:	d902      	bls.n	80038a4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	f000 bf67 	b.w	8004772 <HAL_RCC_OscConfig+0x109a>
 80038a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038a8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ac:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80038b0:	fa93 f3a3 	rbit	r3, r3
 80038b4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80038b8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038bc:	fab3 f383 	clz	r3, r3
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	095b      	lsrs	r3, r3, #5
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	f043 0301 	orr.w	r3, r3, #1
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d102      	bne.n	80038d6 <HAL_RCC_OscConfig+0x1fe>
 80038d0:	4b46      	ldr	r3, [pc, #280]	; (80039ec <HAL_RCC_OscConfig+0x314>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	e015      	b.n	8003902 <HAL_RCC_OscConfig+0x22a>
 80038d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038da:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038de:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80038e2:	fa93 f3a3 	rbit	r3, r3
 80038e6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80038ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038ee:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80038f2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80038f6:	fa93 f3a3 	rbit	r3, r3
 80038fa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80038fe:	4b3b      	ldr	r3, [pc, #236]	; (80039ec <HAL_RCC_OscConfig+0x314>)
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003906:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800390a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800390e:	fa92 f2a2 	rbit	r2, r2
 8003912:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003916:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800391a:	fab2 f282 	clz	r2, r2
 800391e:	b2d2      	uxtb	r2, r2
 8003920:	f042 0220 	orr.w	r2, r2, #32
 8003924:	b2d2      	uxtb	r2, r2
 8003926:	f002 021f 	and.w	r2, r2, #31
 800392a:	2101      	movs	r1, #1
 800392c:	fa01 f202 	lsl.w	r2, r1, r2
 8003930:	4013      	ands	r3, r2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0ab      	beq.n	800388e <HAL_RCC_OscConfig+0x1b6>
 8003936:	e05c      	b.n	80039f2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003938:	f7fe fb46 	bl	8001fc8 <HAL_GetTick>
 800393c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003940:	e00a      	b.n	8003958 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003942:	f7fe fb41 	bl	8001fc8 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b64      	cmp	r3, #100	; 0x64
 8003950:	d902      	bls.n	8003958 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	f000 bf0d 	b.w	8004772 <HAL_RCC_OscConfig+0x109a>
 8003958:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800395c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003960:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003964:	fa93 f3a3 	rbit	r3, r3
 8003968:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800396c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003970:	fab3 f383 	clz	r3, r3
 8003974:	b2db      	uxtb	r3, r3
 8003976:	095b      	lsrs	r3, r3, #5
 8003978:	b2db      	uxtb	r3, r3
 800397a:	f043 0301 	orr.w	r3, r3, #1
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b01      	cmp	r3, #1
 8003982:	d102      	bne.n	800398a <HAL_RCC_OscConfig+0x2b2>
 8003984:	4b19      	ldr	r3, [pc, #100]	; (80039ec <HAL_RCC_OscConfig+0x314>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	e015      	b.n	80039b6 <HAL_RCC_OscConfig+0x2de>
 800398a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800398e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003992:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003996:	fa93 f3a3 	rbit	r3, r3
 800399a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800399e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039a2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80039a6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80039aa:	fa93 f3a3 	rbit	r3, r3
 80039ae:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80039b2:	4b0e      	ldr	r3, [pc, #56]	; (80039ec <HAL_RCC_OscConfig+0x314>)
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039ba:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80039be:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80039c2:	fa92 f2a2 	rbit	r2, r2
 80039c6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80039ca:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80039ce:	fab2 f282 	clz	r2, r2
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	f042 0220 	orr.w	r2, r2, #32
 80039d8:	b2d2      	uxtb	r2, r2
 80039da:	f002 021f 	and.w	r2, r2, #31
 80039de:	2101      	movs	r1, #1
 80039e0:	fa01 f202 	lsl.w	r2, r1, r2
 80039e4:	4013      	ands	r3, r2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1ab      	bne.n	8003942 <HAL_RCC_OscConfig+0x26a>
 80039ea:	e002      	b.n	80039f2 <HAL_RCC_OscConfig+0x31a>
 80039ec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 817f 	beq.w	8003d06 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003a08:	4ba7      	ldr	r3, [pc, #668]	; (8003ca8 <HAL_RCC_OscConfig+0x5d0>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f003 030c 	and.w	r3, r3, #12
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00c      	beq.n	8003a2e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003a14:	4ba4      	ldr	r3, [pc, #656]	; (8003ca8 <HAL_RCC_OscConfig+0x5d0>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f003 030c 	and.w	r3, r3, #12
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d173      	bne.n	8003b08 <HAL_RCC_OscConfig+0x430>
 8003a20:	4ba1      	ldr	r3, [pc, #644]	; (8003ca8 <HAL_RCC_OscConfig+0x5d0>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003a28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a2c:	d16c      	bne.n	8003b08 <HAL_RCC_OscConfig+0x430>
 8003a2e:	2302      	movs	r3, #2
 8003a30:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a34:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003a38:	fa93 f3a3 	rbit	r3, r3
 8003a3c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003a40:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a44:	fab3 f383 	clz	r3, r3
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	095b      	lsrs	r3, r3, #5
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	f043 0301 	orr.w	r3, r3, #1
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d102      	bne.n	8003a5e <HAL_RCC_OscConfig+0x386>
 8003a58:	4b93      	ldr	r3, [pc, #588]	; (8003ca8 <HAL_RCC_OscConfig+0x5d0>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	e013      	b.n	8003a86 <HAL_RCC_OscConfig+0x3ae>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a64:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003a68:	fa93 f3a3 	rbit	r3, r3
 8003a6c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003a70:	2302      	movs	r3, #2
 8003a72:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003a76:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003a7a:	fa93 f3a3 	rbit	r3, r3
 8003a7e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003a82:	4b89      	ldr	r3, [pc, #548]	; (8003ca8 <HAL_RCC_OscConfig+0x5d0>)
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	2202      	movs	r2, #2
 8003a88:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003a8c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003a90:	fa92 f2a2 	rbit	r2, r2
 8003a94:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003a98:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003a9c:	fab2 f282 	clz	r2, r2
 8003aa0:	b2d2      	uxtb	r2, r2
 8003aa2:	f042 0220 	orr.w	r2, r2, #32
 8003aa6:	b2d2      	uxtb	r2, r2
 8003aa8:	f002 021f 	and.w	r2, r2, #31
 8003aac:	2101      	movs	r1, #1
 8003aae:	fa01 f202 	lsl.w	r2, r1, r2
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00a      	beq.n	8003ace <HAL_RCC_OscConfig+0x3f6>
 8003ab8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003abc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d002      	beq.n	8003ace <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	f000 be52 	b.w	8004772 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ace:	4b76      	ldr	r3, [pc, #472]	; (8003ca8 <HAL_RCC_OscConfig+0x5d0>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ad6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ada:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	21f8      	movs	r1, #248	; 0xf8
 8003ae4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003aec:	fa91 f1a1 	rbit	r1, r1
 8003af0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003af4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003af8:	fab1 f181 	clz	r1, r1
 8003afc:	b2c9      	uxtb	r1, r1
 8003afe:	408b      	lsls	r3, r1
 8003b00:	4969      	ldr	r1, [pc, #420]	; (8003ca8 <HAL_RCC_OscConfig+0x5d0>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b06:	e0fe      	b.n	8003d06 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b0c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 8088 	beq.w	8003c2a <HAL_RCC_OscConfig+0x552>
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b20:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003b24:	fa93 f3a3 	rbit	r3, r3
 8003b28:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003b2c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b30:	fab3 f383 	clz	r3, r3
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b3a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	461a      	mov	r2, r3
 8003b42:	2301      	movs	r3, #1
 8003b44:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b46:	f7fe fa3f 	bl	8001fc8 <HAL_GetTick>
 8003b4a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b4e:	e00a      	b.n	8003b66 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b50:	f7fe fa3a 	bl	8001fc8 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d902      	bls.n	8003b66 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	f000 be06 	b.w	8004772 <HAL_RCC_OscConfig+0x109a>
 8003b66:	2302      	movs	r3, #2
 8003b68:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003b70:	fa93 f3a3 	rbit	r3, r3
 8003b74:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003b78:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b7c:	fab3 f383 	clz	r3, r3
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	095b      	lsrs	r3, r3, #5
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d102      	bne.n	8003b96 <HAL_RCC_OscConfig+0x4be>
 8003b90:	4b45      	ldr	r3, [pc, #276]	; (8003ca8 <HAL_RCC_OscConfig+0x5d0>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	e013      	b.n	8003bbe <HAL_RCC_OscConfig+0x4e6>
 8003b96:	2302      	movs	r3, #2
 8003b98:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003ba0:	fa93 f3a3 	rbit	r3, r3
 8003ba4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003ba8:	2302      	movs	r3, #2
 8003baa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003bae:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003bb2:	fa93 f3a3 	rbit	r3, r3
 8003bb6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003bba:	4b3b      	ldr	r3, [pc, #236]	; (8003ca8 <HAL_RCC_OscConfig+0x5d0>)
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003bc4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003bc8:	fa92 f2a2 	rbit	r2, r2
 8003bcc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003bd0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003bd4:	fab2 f282 	clz	r2, r2
 8003bd8:	b2d2      	uxtb	r2, r2
 8003bda:	f042 0220 	orr.w	r2, r2, #32
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	f002 021f 	and.w	r2, r2, #31
 8003be4:	2101      	movs	r1, #1
 8003be6:	fa01 f202 	lsl.w	r2, r1, r2
 8003bea:	4013      	ands	r3, r2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0af      	beq.n	8003b50 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf0:	4b2d      	ldr	r3, [pc, #180]	; (8003ca8 <HAL_RCC_OscConfig+0x5d0>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bfc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	21f8      	movs	r1, #248	; 0xf8
 8003c06:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003c0e:	fa91 f1a1 	rbit	r1, r1
 8003c12:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003c16:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003c1a:	fab1 f181 	clz	r1, r1
 8003c1e:	b2c9      	uxtb	r1, r1
 8003c20:	408b      	lsls	r3, r1
 8003c22:	4921      	ldr	r1, [pc, #132]	; (8003ca8 <HAL_RCC_OscConfig+0x5d0>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	600b      	str	r3, [r1, #0]
 8003c28:	e06d      	b.n	8003d06 <HAL_RCC_OscConfig+0x62e>
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c30:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003c34:	fa93 f3a3 	rbit	r3, r3
 8003c38:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003c3c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c40:	fab3 f383 	clz	r3, r3
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	461a      	mov	r2, r3
 8003c52:	2300      	movs	r3, #0
 8003c54:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c56:	f7fe f9b7 	bl	8001fc8 <HAL_GetTick>
 8003c5a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c5e:	e00a      	b.n	8003c76 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c60:	f7fe f9b2 	bl	8001fc8 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d902      	bls.n	8003c76 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	f000 bd7e 	b.w	8004772 <HAL_RCC_OscConfig+0x109a>
 8003c76:	2302      	movs	r3, #2
 8003c78:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003c80:	fa93 f3a3 	rbit	r3, r3
 8003c84:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003c88:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c8c:	fab3 f383 	clz	r3, r3
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	095b      	lsrs	r3, r3, #5
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	f043 0301 	orr.w	r3, r3, #1
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d105      	bne.n	8003cac <HAL_RCC_OscConfig+0x5d4>
 8003ca0:	4b01      	ldr	r3, [pc, #4]	; (8003ca8 <HAL_RCC_OscConfig+0x5d0>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	e016      	b.n	8003cd4 <HAL_RCC_OscConfig+0x5fc>
 8003ca6:	bf00      	nop
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	2302      	movs	r3, #2
 8003cae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cb6:	fa93 f3a3 	rbit	r3, r3
 8003cba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003cc4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003cc8:	fa93 f3a3 	rbit	r3, r3
 8003ccc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003cd0:	4bbf      	ldr	r3, [pc, #764]	; (8003fd0 <HAL_RCC_OscConfig+0x8f8>)
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003cda:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003cde:	fa92 f2a2 	rbit	r2, r2
 8003ce2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003ce6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003cea:	fab2 f282 	clz	r2, r2
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	f042 0220 	orr.w	r2, r2, #32
 8003cf4:	b2d2      	uxtb	r2, r2
 8003cf6:	f002 021f 	and.w	r2, r2, #31
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8003d00:	4013      	ands	r3, r2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1ac      	bne.n	8003c60 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d0a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0308 	and.w	r3, r3, #8
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 8113 	beq.w	8003f42 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d20:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d07c      	beq.n	8003e26 <HAL_RCC_OscConfig+0x74e>
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d36:	fa93 f3a3 	rbit	r3, r3
 8003d3a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003d3e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d42:	fab3 f383 	clz	r3, r3
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	461a      	mov	r2, r3
 8003d4a:	4ba2      	ldr	r3, [pc, #648]	; (8003fd4 <HAL_RCC_OscConfig+0x8fc>)
 8003d4c:	4413      	add	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	461a      	mov	r2, r3
 8003d52:	2301      	movs	r3, #1
 8003d54:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d56:	f7fe f937 	bl	8001fc8 <HAL_GetTick>
 8003d5a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d5e:	e00a      	b.n	8003d76 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d60:	f7fe f932 	bl	8001fc8 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d902      	bls.n	8003d76 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	f000 bcfe 	b.w	8004772 <HAL_RCC_OscConfig+0x109a>
 8003d76:	2302      	movs	r3, #2
 8003d78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d80:	fa93 f2a3 	rbit	r2, r3
 8003d84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d88:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d96:	2202      	movs	r2, #2
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	fa93 f2a3 	rbit	r2, r3
 8003da8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003db6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003dba:	2202      	movs	r2, #2
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dc2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	fa93 f2a3 	rbit	r2, r3
 8003dcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dd0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003dd4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dd6:	4b7e      	ldr	r3, [pc, #504]	; (8003fd0 <HAL_RCC_OscConfig+0x8f8>)
 8003dd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dde:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003de2:	2102      	movs	r1, #2
 8003de4:	6019      	str	r1, [r3, #0]
 8003de6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	fa93 f1a3 	rbit	r1, r3
 8003df4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003df8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003dfc:	6019      	str	r1, [r3, #0]
  return result;
 8003dfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e02:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	fab3 f383 	clz	r3, r3
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	f003 031f 	and.w	r3, r3, #31
 8003e18:	2101      	movs	r1, #1
 8003e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1e:	4013      	ands	r3, r2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d09d      	beq.n	8003d60 <HAL_RCC_OscConfig+0x688>
 8003e24:	e08d      	b.n	8003f42 <HAL_RCC_OscConfig+0x86a>
 8003e26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e2a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003e2e:	2201      	movs	r2, #1
 8003e30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e36:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	fa93 f2a3 	rbit	r2, r3
 8003e40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e44:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003e48:	601a      	str	r2, [r3, #0]
  return result;
 8003e4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e4e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003e52:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e54:	fab3 f383 	clz	r3, r3
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	4b5d      	ldr	r3, [pc, #372]	; (8003fd4 <HAL_RCC_OscConfig+0x8fc>)
 8003e5e:	4413      	add	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	461a      	mov	r2, r3
 8003e64:	2300      	movs	r3, #0
 8003e66:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e68:	f7fe f8ae 	bl	8001fc8 <HAL_GetTick>
 8003e6c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e70:	e00a      	b.n	8003e88 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e72:	f7fe f8a9 	bl	8001fc8 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d902      	bls.n	8003e88 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	f000 bc75 	b.w	8004772 <HAL_RCC_OscConfig+0x109a>
 8003e88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e8c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003e90:	2202      	movs	r2, #2
 8003e92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e98:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	fa93 f2a3 	rbit	r2, r3
 8003ea2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ea6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eb0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ebc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	fa93 f2a3 	rbit	r2, r3
 8003ec6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ed4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003ed8:	2202      	movs	r2, #2
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ee0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	fa93 f2a3 	rbit	r2, r3
 8003eea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003ef2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ef4:	4b36      	ldr	r3, [pc, #216]	; (8003fd0 <HAL_RCC_OscConfig+0x8f8>)
 8003ef6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ef8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003efc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003f00:	2102      	movs	r1, #2
 8003f02:	6019      	str	r1, [r3, #0]
 8003f04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f08:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	fa93 f1a3 	rbit	r1, r3
 8003f12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f16:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003f1a:	6019      	str	r1, [r3, #0]
  return result;
 8003f1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f20:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	fab3 f383 	clz	r3, r3
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	f003 031f 	and.w	r3, r3, #31
 8003f36:	2101      	movs	r1, #1
 8003f38:	fa01 f303 	lsl.w	r3, r1, r3
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d197      	bne.n	8003e72 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f46:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0304 	and.w	r3, r3, #4
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 81a5 	beq.w	80042a2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f5e:	4b1c      	ldr	r3, [pc, #112]	; (8003fd0 <HAL_RCC_OscConfig+0x8f8>)
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d116      	bne.n	8003f98 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f6a:	4b19      	ldr	r3, [pc, #100]	; (8003fd0 <HAL_RCC_OscConfig+0x8f8>)
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	4a18      	ldr	r2, [pc, #96]	; (8003fd0 <HAL_RCC_OscConfig+0x8f8>)
 8003f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f74:	61d3      	str	r3, [r2, #28]
 8003f76:	4b16      	ldr	r3, [pc, #88]	; (8003fd0 <HAL_RCC_OscConfig+0x8f8>)
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003f7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f90:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003f92:	2301      	movs	r3, #1
 8003f94:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f98:	4b0f      	ldr	r3, [pc, #60]	; (8003fd8 <HAL_RCC_OscConfig+0x900>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d121      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fa4:	4b0c      	ldr	r3, [pc, #48]	; (8003fd8 <HAL_RCC_OscConfig+0x900>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a0b      	ldr	r2, [pc, #44]	; (8003fd8 <HAL_RCC_OscConfig+0x900>)
 8003faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fae:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fb0:	f7fe f80a 	bl	8001fc8 <HAL_GetTick>
 8003fb4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb8:	e010      	b.n	8003fdc <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fba:	f7fe f805 	bl	8001fc8 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b64      	cmp	r3, #100	; 0x64
 8003fc8:	d908      	bls.n	8003fdc <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e3d1      	b.n	8004772 <HAL_RCC_OscConfig+0x109a>
 8003fce:	bf00      	nop
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	10908120 	.word	0x10908120
 8003fd8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fdc:	4b8d      	ldr	r3, [pc, #564]	; (8004214 <HAL_RCC_OscConfig+0xb3c>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d0e8      	beq.n	8003fba <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fe8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d106      	bne.n	8004006 <HAL_RCC_OscConfig+0x92e>
 8003ff8:	4b87      	ldr	r3, [pc, #540]	; (8004218 <HAL_RCC_OscConfig+0xb40>)
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	4a86      	ldr	r2, [pc, #536]	; (8004218 <HAL_RCC_OscConfig+0xb40>)
 8003ffe:	f043 0301 	orr.w	r3, r3, #1
 8004002:	6213      	str	r3, [r2, #32]
 8004004:	e035      	b.n	8004072 <HAL_RCC_OscConfig+0x99a>
 8004006:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800400a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10c      	bne.n	8004030 <HAL_RCC_OscConfig+0x958>
 8004016:	4b80      	ldr	r3, [pc, #512]	; (8004218 <HAL_RCC_OscConfig+0xb40>)
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	4a7f      	ldr	r2, [pc, #508]	; (8004218 <HAL_RCC_OscConfig+0xb40>)
 800401c:	f023 0301 	bic.w	r3, r3, #1
 8004020:	6213      	str	r3, [r2, #32]
 8004022:	4b7d      	ldr	r3, [pc, #500]	; (8004218 <HAL_RCC_OscConfig+0xb40>)
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	4a7c      	ldr	r2, [pc, #496]	; (8004218 <HAL_RCC_OscConfig+0xb40>)
 8004028:	f023 0304 	bic.w	r3, r3, #4
 800402c:	6213      	str	r3, [r2, #32]
 800402e:	e020      	b.n	8004072 <HAL_RCC_OscConfig+0x99a>
 8004030:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004034:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	2b05      	cmp	r3, #5
 800403e:	d10c      	bne.n	800405a <HAL_RCC_OscConfig+0x982>
 8004040:	4b75      	ldr	r3, [pc, #468]	; (8004218 <HAL_RCC_OscConfig+0xb40>)
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	4a74      	ldr	r2, [pc, #464]	; (8004218 <HAL_RCC_OscConfig+0xb40>)
 8004046:	f043 0304 	orr.w	r3, r3, #4
 800404a:	6213      	str	r3, [r2, #32]
 800404c:	4b72      	ldr	r3, [pc, #456]	; (8004218 <HAL_RCC_OscConfig+0xb40>)
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	4a71      	ldr	r2, [pc, #452]	; (8004218 <HAL_RCC_OscConfig+0xb40>)
 8004052:	f043 0301 	orr.w	r3, r3, #1
 8004056:	6213      	str	r3, [r2, #32]
 8004058:	e00b      	b.n	8004072 <HAL_RCC_OscConfig+0x99a>
 800405a:	4b6f      	ldr	r3, [pc, #444]	; (8004218 <HAL_RCC_OscConfig+0xb40>)
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	4a6e      	ldr	r2, [pc, #440]	; (8004218 <HAL_RCC_OscConfig+0xb40>)
 8004060:	f023 0301 	bic.w	r3, r3, #1
 8004064:	6213      	str	r3, [r2, #32]
 8004066:	4b6c      	ldr	r3, [pc, #432]	; (8004218 <HAL_RCC_OscConfig+0xb40>)
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	4a6b      	ldr	r2, [pc, #428]	; (8004218 <HAL_RCC_OscConfig+0xb40>)
 800406c:	f023 0304 	bic.w	r3, r3, #4
 8004070:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004072:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004076:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 8081 	beq.w	8004186 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004084:	f7fd ffa0 	bl	8001fc8 <HAL_GetTick>
 8004088:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800408c:	e00b      	b.n	80040a6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800408e:	f7fd ff9b 	bl	8001fc8 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	f241 3288 	movw	r2, #5000	; 0x1388
 800409e:	4293      	cmp	r3, r2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e365      	b.n	8004772 <HAL_RCC_OscConfig+0x109a>
 80040a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040aa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80040ae:	2202      	movs	r2, #2
 80040b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040b6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	fa93 f2a3 	rbit	r2, r3
 80040c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040c4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040ce:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80040d2:	2202      	movs	r2, #2
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040da:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	fa93 f2a3 	rbit	r2, r3
 80040e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040e8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80040ec:	601a      	str	r2, [r3, #0]
  return result;
 80040ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040f2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80040f6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f8:	fab3 f383 	clz	r3, r3
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	095b      	lsrs	r3, r3, #5
 8004100:	b2db      	uxtb	r3, r3
 8004102:	f043 0302 	orr.w	r3, r3, #2
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d102      	bne.n	8004112 <HAL_RCC_OscConfig+0xa3a>
 800410c:	4b42      	ldr	r3, [pc, #264]	; (8004218 <HAL_RCC_OscConfig+0xb40>)
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	e013      	b.n	800413a <HAL_RCC_OscConfig+0xa62>
 8004112:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004116:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800411a:	2202      	movs	r2, #2
 800411c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004122:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	fa93 f2a3 	rbit	r2, r3
 800412c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004130:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	4b38      	ldr	r3, [pc, #224]	; (8004218 <HAL_RCC_OscConfig+0xb40>)
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800413e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004142:	2102      	movs	r1, #2
 8004144:	6011      	str	r1, [r2, #0]
 8004146:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800414a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800414e:	6812      	ldr	r2, [r2, #0]
 8004150:	fa92 f1a2 	rbit	r1, r2
 8004154:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004158:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800415c:	6011      	str	r1, [r2, #0]
  return result;
 800415e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004162:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004166:	6812      	ldr	r2, [r2, #0]
 8004168:	fab2 f282 	clz	r2, r2
 800416c:	b2d2      	uxtb	r2, r2
 800416e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004172:	b2d2      	uxtb	r2, r2
 8004174:	f002 021f 	and.w	r2, r2, #31
 8004178:	2101      	movs	r1, #1
 800417a:	fa01 f202 	lsl.w	r2, r1, r2
 800417e:	4013      	ands	r3, r2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d084      	beq.n	800408e <HAL_RCC_OscConfig+0x9b6>
 8004184:	e083      	b.n	800428e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004186:	f7fd ff1f 	bl	8001fc8 <HAL_GetTick>
 800418a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800418e:	e00b      	b.n	80041a8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004190:	f7fd ff1a 	bl	8001fc8 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e2e4      	b.n	8004772 <HAL_RCC_OscConfig+0x109a>
 80041a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041ac:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80041b0:	2202      	movs	r2, #2
 80041b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041b8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	fa93 f2a3 	rbit	r2, r3
 80041c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041c6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041d0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80041d4:	2202      	movs	r2, #2
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041dc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	fa93 f2a3 	rbit	r2, r3
 80041e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041ea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80041ee:	601a      	str	r2, [r3, #0]
  return result;
 80041f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041f4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80041f8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041fa:	fab3 f383 	clz	r3, r3
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	095b      	lsrs	r3, r3, #5
 8004202:	b2db      	uxtb	r3, r3
 8004204:	f043 0302 	orr.w	r3, r3, #2
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d106      	bne.n	800421c <HAL_RCC_OscConfig+0xb44>
 800420e:	4b02      	ldr	r3, [pc, #8]	; (8004218 <HAL_RCC_OscConfig+0xb40>)
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	e017      	b.n	8004244 <HAL_RCC_OscConfig+0xb6c>
 8004214:	40007000 	.word	0x40007000
 8004218:	40021000 	.word	0x40021000
 800421c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004220:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004224:	2202      	movs	r2, #2
 8004226:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004228:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800422c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	fa93 f2a3 	rbit	r2, r3
 8004236:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800423a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	4bb3      	ldr	r3, [pc, #716]	; (8004510 <HAL_RCC_OscConfig+0xe38>)
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004248:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800424c:	2102      	movs	r1, #2
 800424e:	6011      	str	r1, [r2, #0]
 8004250:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004254:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004258:	6812      	ldr	r2, [r2, #0]
 800425a:	fa92 f1a2 	rbit	r1, r2
 800425e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004262:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004266:	6011      	str	r1, [r2, #0]
  return result;
 8004268:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800426c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004270:	6812      	ldr	r2, [r2, #0]
 8004272:	fab2 f282 	clz	r2, r2
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800427c:	b2d2      	uxtb	r2, r2
 800427e:	f002 021f 	and.w	r2, r2, #31
 8004282:	2101      	movs	r1, #1
 8004284:	fa01 f202 	lsl.w	r2, r1, r2
 8004288:	4013      	ands	r3, r2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d180      	bne.n	8004190 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800428e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004292:	2b01      	cmp	r3, #1
 8004294:	d105      	bne.n	80042a2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004296:	4b9e      	ldr	r3, [pc, #632]	; (8004510 <HAL_RCC_OscConfig+0xe38>)
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	4a9d      	ldr	r2, [pc, #628]	; (8004510 <HAL_RCC_OscConfig+0xe38>)
 800429c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042a0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042a6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 825e 	beq.w	8004770 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042b4:	4b96      	ldr	r3, [pc, #600]	; (8004510 <HAL_RCC_OscConfig+0xe38>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f003 030c 	and.w	r3, r3, #12
 80042bc:	2b08      	cmp	r3, #8
 80042be:	f000 821f 	beq.w	8004700 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042c6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	f040 8170 	bne.w	80045b4 <HAL_RCC_OscConfig+0xedc>
 80042d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042d8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80042dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042e6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	fa93 f2a3 	rbit	r2, r3
 80042f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042f4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80042f8:	601a      	str	r2, [r3, #0]
  return result;
 80042fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042fe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004302:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004304:	fab3 f383 	clz	r3, r3
 8004308:	b2db      	uxtb	r3, r3
 800430a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800430e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	461a      	mov	r2, r3
 8004316:	2300      	movs	r3, #0
 8004318:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431a:	f7fd fe55 	bl	8001fc8 <HAL_GetTick>
 800431e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004322:	e009      	b.n	8004338 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004324:	f7fd fe50 	bl	8001fc8 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e21c      	b.n	8004772 <HAL_RCC_OscConfig+0x109a>
 8004338:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800433c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004340:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004344:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004346:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800434a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	fa93 f2a3 	rbit	r2, r3
 8004354:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004358:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800435c:	601a      	str	r2, [r3, #0]
  return result;
 800435e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004362:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004366:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004368:	fab3 f383 	clz	r3, r3
 800436c:	b2db      	uxtb	r3, r3
 800436e:	095b      	lsrs	r3, r3, #5
 8004370:	b2db      	uxtb	r3, r3
 8004372:	f043 0301 	orr.w	r3, r3, #1
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b01      	cmp	r3, #1
 800437a:	d102      	bne.n	8004382 <HAL_RCC_OscConfig+0xcaa>
 800437c:	4b64      	ldr	r3, [pc, #400]	; (8004510 <HAL_RCC_OscConfig+0xe38>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	e027      	b.n	80043d2 <HAL_RCC_OscConfig+0xcfa>
 8004382:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004386:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800438a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800438e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004390:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004394:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	fa93 f2a3 	rbit	r2, r3
 800439e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043a2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043ac:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80043b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043ba:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	fa93 f2a3 	rbit	r2, r3
 80043c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043c8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	4b50      	ldr	r3, [pc, #320]	; (8004510 <HAL_RCC_OscConfig+0xe38>)
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80043d6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80043da:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80043de:	6011      	str	r1, [r2, #0]
 80043e0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80043e4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80043e8:	6812      	ldr	r2, [r2, #0]
 80043ea:	fa92 f1a2 	rbit	r1, r2
 80043ee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80043f2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80043f6:	6011      	str	r1, [r2, #0]
  return result;
 80043f8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80043fc:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004400:	6812      	ldr	r2, [r2, #0]
 8004402:	fab2 f282 	clz	r2, r2
 8004406:	b2d2      	uxtb	r2, r2
 8004408:	f042 0220 	orr.w	r2, r2, #32
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	f002 021f 	and.w	r2, r2, #31
 8004412:	2101      	movs	r1, #1
 8004414:	fa01 f202 	lsl.w	r2, r1, r2
 8004418:	4013      	ands	r3, r2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d182      	bne.n	8004324 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800441e:	4b3c      	ldr	r3, [pc, #240]	; (8004510 <HAL_RCC_OscConfig+0xe38>)
 8004420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004422:	f023 020f 	bic.w	r2, r3, #15
 8004426:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800442a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	4937      	ldr	r1, [pc, #220]	; (8004510 <HAL_RCC_OscConfig+0xe38>)
 8004434:	4313      	orrs	r3, r2
 8004436:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004438:	4b35      	ldr	r3, [pc, #212]	; (8004510 <HAL_RCC_OscConfig+0xe38>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004440:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004444:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6a19      	ldr	r1, [r3, #32]
 800444c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004450:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	69db      	ldr	r3, [r3, #28]
 8004458:	430b      	orrs	r3, r1
 800445a:	492d      	ldr	r1, [pc, #180]	; (8004510 <HAL_RCC_OscConfig+0xe38>)
 800445c:	4313      	orrs	r3, r2
 800445e:	604b      	str	r3, [r1, #4]
 8004460:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004464:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004468:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800446c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004472:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	fa93 f2a3 	rbit	r2, r3
 800447c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004480:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004484:	601a      	str	r2, [r3, #0]
  return result;
 8004486:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800448a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800448e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004490:	fab3 f383 	clz	r3, r3
 8004494:	b2db      	uxtb	r3, r3
 8004496:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800449a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	461a      	mov	r2, r3
 80044a2:	2301      	movs	r3, #1
 80044a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a6:	f7fd fd8f 	bl	8001fc8 <HAL_GetTick>
 80044aa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044ae:	e009      	b.n	80044c4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b0:	f7fd fd8a 	bl	8001fc8 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e156      	b.n	8004772 <HAL_RCC_OscConfig+0x109a>
 80044c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044c8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80044cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044d6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	fa93 f2a3 	rbit	r2, r3
 80044e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044e4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80044e8:	601a      	str	r2, [r3, #0]
  return result;
 80044ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044ee:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80044f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044f4:	fab3 f383 	clz	r3, r3
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	095b      	lsrs	r3, r3, #5
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	f043 0301 	orr.w	r3, r3, #1
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b01      	cmp	r3, #1
 8004506:	d105      	bne.n	8004514 <HAL_RCC_OscConfig+0xe3c>
 8004508:	4b01      	ldr	r3, [pc, #4]	; (8004510 <HAL_RCC_OscConfig+0xe38>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	e02a      	b.n	8004564 <HAL_RCC_OscConfig+0xe8c>
 800450e:	bf00      	nop
 8004510:	40021000 	.word	0x40021000
 8004514:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004518:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800451c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004520:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004522:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004526:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	fa93 f2a3 	rbit	r2, r3
 8004530:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004534:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800453e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004542:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800454c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	fa93 f2a3 	rbit	r2, r3
 8004556:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800455a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	4b86      	ldr	r3, [pc, #536]	; (800477c <HAL_RCC_OscConfig+0x10a4>)
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004568:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800456c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004570:	6011      	str	r1, [r2, #0]
 8004572:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004576:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800457a:	6812      	ldr	r2, [r2, #0]
 800457c:	fa92 f1a2 	rbit	r1, r2
 8004580:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004584:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004588:	6011      	str	r1, [r2, #0]
  return result;
 800458a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800458e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004592:	6812      	ldr	r2, [r2, #0]
 8004594:	fab2 f282 	clz	r2, r2
 8004598:	b2d2      	uxtb	r2, r2
 800459a:	f042 0220 	orr.w	r2, r2, #32
 800459e:	b2d2      	uxtb	r2, r2
 80045a0:	f002 021f 	and.w	r2, r2, #31
 80045a4:	2101      	movs	r1, #1
 80045a6:	fa01 f202 	lsl.w	r2, r1, r2
 80045aa:	4013      	ands	r3, r2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f43f af7f 	beq.w	80044b0 <HAL_RCC_OscConfig+0xdd8>
 80045b2:	e0dd      	b.n	8004770 <HAL_RCC_OscConfig+0x1098>
 80045b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045b8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80045bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045c6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	fa93 f2a3 	rbit	r2, r3
 80045d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045d4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80045d8:	601a      	str	r2, [r3, #0]
  return result;
 80045da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045de:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80045e2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045e4:	fab3 f383 	clz	r3, r3
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80045ee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	461a      	mov	r2, r3
 80045f6:	2300      	movs	r3, #0
 80045f8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045fa:	f7fd fce5 	bl	8001fc8 <HAL_GetTick>
 80045fe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004602:	e009      	b.n	8004618 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004604:	f7fd fce0 	bl	8001fc8 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d901      	bls.n	8004618 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e0ac      	b.n	8004772 <HAL_RCC_OscConfig+0x109a>
 8004618:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800461c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004620:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004624:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004626:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800462a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	fa93 f2a3 	rbit	r2, r3
 8004634:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004638:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800463c:	601a      	str	r2, [r3, #0]
  return result;
 800463e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004642:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004646:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004648:	fab3 f383 	clz	r3, r3
 800464c:	b2db      	uxtb	r3, r3
 800464e:	095b      	lsrs	r3, r3, #5
 8004650:	b2db      	uxtb	r3, r3
 8004652:	f043 0301 	orr.w	r3, r3, #1
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b01      	cmp	r3, #1
 800465a:	d102      	bne.n	8004662 <HAL_RCC_OscConfig+0xf8a>
 800465c:	4b47      	ldr	r3, [pc, #284]	; (800477c <HAL_RCC_OscConfig+0x10a4>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	e027      	b.n	80046b2 <HAL_RCC_OscConfig+0xfda>
 8004662:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004666:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800466a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800466e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004670:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004674:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	fa93 f2a3 	rbit	r2, r3
 800467e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004682:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800468c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004690:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800469a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	fa93 f2a3 	rbit	r2, r3
 80046a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046a8:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	4b33      	ldr	r3, [pc, #204]	; (800477c <HAL_RCC_OscConfig+0x10a4>)
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80046b6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80046ba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80046be:	6011      	str	r1, [r2, #0]
 80046c0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80046c4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80046c8:	6812      	ldr	r2, [r2, #0]
 80046ca:	fa92 f1a2 	rbit	r1, r2
 80046ce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80046d2:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80046d6:	6011      	str	r1, [r2, #0]
  return result;
 80046d8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80046dc:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80046e0:	6812      	ldr	r2, [r2, #0]
 80046e2:	fab2 f282 	clz	r2, r2
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	f042 0220 	orr.w	r2, r2, #32
 80046ec:	b2d2      	uxtb	r2, r2
 80046ee:	f002 021f 	and.w	r2, r2, #31
 80046f2:	2101      	movs	r1, #1
 80046f4:	fa01 f202 	lsl.w	r2, r1, r2
 80046f8:	4013      	ands	r3, r2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d182      	bne.n	8004604 <HAL_RCC_OscConfig+0xf2c>
 80046fe:	e037      	b.n	8004770 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004700:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004704:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e02e      	b.n	8004772 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004714:	4b19      	ldr	r3, [pc, #100]	; (800477c <HAL_RCC_OscConfig+0x10a4>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800471c:	4b17      	ldr	r3, [pc, #92]	; (800477c <HAL_RCC_OscConfig+0x10a4>)
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004724:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004728:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800472c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004730:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	429a      	cmp	r2, r3
 800473a:	d117      	bne.n	800476c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800473c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004740:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004744:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004748:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004750:	429a      	cmp	r2, r3
 8004752:	d10b      	bne.n	800476c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004754:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004758:	f003 020f 	and.w	r2, r3, #15
 800475c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004760:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004768:	429a      	cmp	r2, r3
 800476a:	d001      	beq.n	8004770 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e000      	b.n	8004772 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	40021000 	.word	0x40021000

08004780 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b09e      	sub	sp, #120	; 0x78
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800478a:	2300      	movs	r3, #0
 800478c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e162      	b.n	8004a5e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004798:	4b90      	ldr	r3, [pc, #576]	; (80049dc <HAL_RCC_ClockConfig+0x25c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	683a      	ldr	r2, [r7, #0]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d910      	bls.n	80047c8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047a6:	4b8d      	ldr	r3, [pc, #564]	; (80049dc <HAL_RCC_ClockConfig+0x25c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f023 0207 	bic.w	r2, r3, #7
 80047ae:	498b      	ldr	r1, [pc, #556]	; (80049dc <HAL_RCC_ClockConfig+0x25c>)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047b6:	4b89      	ldr	r3, [pc, #548]	; (80049dc <HAL_RCC_ClockConfig+0x25c>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0307 	and.w	r3, r3, #7
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d001      	beq.n	80047c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e14a      	b.n	8004a5e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d008      	beq.n	80047e6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047d4:	4b82      	ldr	r3, [pc, #520]	; (80049e0 <HAL_RCC_ClockConfig+0x260>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	497f      	ldr	r1, [pc, #508]	; (80049e0 <HAL_RCC_ClockConfig+0x260>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 80dc 	beq.w	80049ac <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d13c      	bne.n	8004876 <HAL_RCC_ClockConfig+0xf6>
 80047fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004800:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004802:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004804:	fa93 f3a3 	rbit	r3, r3
 8004808:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800480a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800480c:	fab3 f383 	clz	r3, r3
 8004810:	b2db      	uxtb	r3, r3
 8004812:	095b      	lsrs	r3, r3, #5
 8004814:	b2db      	uxtb	r3, r3
 8004816:	f043 0301 	orr.w	r3, r3, #1
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b01      	cmp	r3, #1
 800481e:	d102      	bne.n	8004826 <HAL_RCC_ClockConfig+0xa6>
 8004820:	4b6f      	ldr	r3, [pc, #444]	; (80049e0 <HAL_RCC_ClockConfig+0x260>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	e00f      	b.n	8004846 <HAL_RCC_ClockConfig+0xc6>
 8004826:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800482a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800482c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800482e:	fa93 f3a3 	rbit	r3, r3
 8004832:	667b      	str	r3, [r7, #100]	; 0x64
 8004834:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004838:	663b      	str	r3, [r7, #96]	; 0x60
 800483a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800483c:	fa93 f3a3 	rbit	r3, r3
 8004840:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004842:	4b67      	ldr	r3, [pc, #412]	; (80049e0 <HAL_RCC_ClockConfig+0x260>)
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800484a:	65ba      	str	r2, [r7, #88]	; 0x58
 800484c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800484e:	fa92 f2a2 	rbit	r2, r2
 8004852:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004854:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004856:	fab2 f282 	clz	r2, r2
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	f042 0220 	orr.w	r2, r2, #32
 8004860:	b2d2      	uxtb	r2, r2
 8004862:	f002 021f 	and.w	r2, r2, #31
 8004866:	2101      	movs	r1, #1
 8004868:	fa01 f202 	lsl.w	r2, r1, r2
 800486c:	4013      	ands	r3, r2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d17b      	bne.n	800496a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e0f3      	b.n	8004a5e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	2b02      	cmp	r3, #2
 800487c:	d13c      	bne.n	80048f8 <HAL_RCC_ClockConfig+0x178>
 800487e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004882:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004886:	fa93 f3a3 	rbit	r3, r3
 800488a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800488c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800488e:	fab3 f383 	clz	r3, r3
 8004892:	b2db      	uxtb	r3, r3
 8004894:	095b      	lsrs	r3, r3, #5
 8004896:	b2db      	uxtb	r3, r3
 8004898:	f043 0301 	orr.w	r3, r3, #1
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d102      	bne.n	80048a8 <HAL_RCC_ClockConfig+0x128>
 80048a2:	4b4f      	ldr	r3, [pc, #316]	; (80049e0 <HAL_RCC_ClockConfig+0x260>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	e00f      	b.n	80048c8 <HAL_RCC_ClockConfig+0x148>
 80048a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048b0:	fa93 f3a3 	rbit	r3, r3
 80048b4:	647b      	str	r3, [r7, #68]	; 0x44
 80048b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048ba:	643b      	str	r3, [r7, #64]	; 0x40
 80048bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048be:	fa93 f3a3 	rbit	r3, r3
 80048c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048c4:	4b46      	ldr	r3, [pc, #280]	; (80049e0 <HAL_RCC_ClockConfig+0x260>)
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048cc:	63ba      	str	r2, [r7, #56]	; 0x38
 80048ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048d0:	fa92 f2a2 	rbit	r2, r2
 80048d4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80048d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048d8:	fab2 f282 	clz	r2, r2
 80048dc:	b2d2      	uxtb	r2, r2
 80048de:	f042 0220 	orr.w	r2, r2, #32
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	f002 021f 	and.w	r2, r2, #31
 80048e8:	2101      	movs	r1, #1
 80048ea:	fa01 f202 	lsl.w	r2, r1, r2
 80048ee:	4013      	ands	r3, r2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d13a      	bne.n	800496a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e0b2      	b.n	8004a5e <HAL_RCC_ClockConfig+0x2de>
 80048f8:	2302      	movs	r3, #2
 80048fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fe:	fa93 f3a3 	rbit	r3, r3
 8004902:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004906:	fab3 f383 	clz	r3, r3
 800490a:	b2db      	uxtb	r3, r3
 800490c:	095b      	lsrs	r3, r3, #5
 800490e:	b2db      	uxtb	r3, r3
 8004910:	f043 0301 	orr.w	r3, r3, #1
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b01      	cmp	r3, #1
 8004918:	d102      	bne.n	8004920 <HAL_RCC_ClockConfig+0x1a0>
 800491a:	4b31      	ldr	r3, [pc, #196]	; (80049e0 <HAL_RCC_ClockConfig+0x260>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	e00d      	b.n	800493c <HAL_RCC_ClockConfig+0x1bc>
 8004920:	2302      	movs	r3, #2
 8004922:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004926:	fa93 f3a3 	rbit	r3, r3
 800492a:	627b      	str	r3, [r7, #36]	; 0x24
 800492c:	2302      	movs	r3, #2
 800492e:	623b      	str	r3, [r7, #32]
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	fa93 f3a3 	rbit	r3, r3
 8004936:	61fb      	str	r3, [r7, #28]
 8004938:	4b29      	ldr	r3, [pc, #164]	; (80049e0 <HAL_RCC_ClockConfig+0x260>)
 800493a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493c:	2202      	movs	r2, #2
 800493e:	61ba      	str	r2, [r7, #24]
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	fa92 f2a2 	rbit	r2, r2
 8004946:	617a      	str	r2, [r7, #20]
  return result;
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	fab2 f282 	clz	r2, r2
 800494e:	b2d2      	uxtb	r2, r2
 8004950:	f042 0220 	orr.w	r2, r2, #32
 8004954:	b2d2      	uxtb	r2, r2
 8004956:	f002 021f 	and.w	r2, r2, #31
 800495a:	2101      	movs	r1, #1
 800495c:	fa01 f202 	lsl.w	r2, r1, r2
 8004960:	4013      	ands	r3, r2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e079      	b.n	8004a5e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800496a:	4b1d      	ldr	r3, [pc, #116]	; (80049e0 <HAL_RCC_ClockConfig+0x260>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f023 0203 	bic.w	r2, r3, #3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	491a      	ldr	r1, [pc, #104]	; (80049e0 <HAL_RCC_ClockConfig+0x260>)
 8004978:	4313      	orrs	r3, r2
 800497a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800497c:	f7fd fb24 	bl	8001fc8 <HAL_GetTick>
 8004980:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004982:	e00a      	b.n	800499a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004984:	f7fd fb20 	bl	8001fc8 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004992:	4293      	cmp	r3, r2
 8004994:	d901      	bls.n	800499a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e061      	b.n	8004a5e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800499a:	4b11      	ldr	r3, [pc, #68]	; (80049e0 <HAL_RCC_ClockConfig+0x260>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f003 020c 	and.w	r2, r3, #12
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d1eb      	bne.n	8004984 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049ac:	4b0b      	ldr	r3, [pc, #44]	; (80049dc <HAL_RCC_ClockConfig+0x25c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d214      	bcs.n	80049e4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ba:	4b08      	ldr	r3, [pc, #32]	; (80049dc <HAL_RCC_ClockConfig+0x25c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f023 0207 	bic.w	r2, r3, #7
 80049c2:	4906      	ldr	r1, [pc, #24]	; (80049dc <HAL_RCC_ClockConfig+0x25c>)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ca:	4b04      	ldr	r3, [pc, #16]	; (80049dc <HAL_RCC_ClockConfig+0x25c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0307 	and.w	r3, r3, #7
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d005      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e040      	b.n	8004a5e <HAL_RCC_ClockConfig+0x2de>
 80049dc:	40022000 	.word	0x40022000
 80049e0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0304 	and.w	r3, r3, #4
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d008      	beq.n	8004a02 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049f0:	4b1d      	ldr	r3, [pc, #116]	; (8004a68 <HAL_RCC_ClockConfig+0x2e8>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	491a      	ldr	r1, [pc, #104]	; (8004a68 <HAL_RCC_ClockConfig+0x2e8>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0308 	and.w	r3, r3, #8
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d009      	beq.n	8004a22 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a0e:	4b16      	ldr	r3, [pc, #88]	; (8004a68 <HAL_RCC_ClockConfig+0x2e8>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	4912      	ldr	r1, [pc, #72]	; (8004a68 <HAL_RCC_ClockConfig+0x2e8>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004a22:	f000 f829 	bl	8004a78 <HAL_RCC_GetSysClockFreq>
 8004a26:	4601      	mov	r1, r0
 8004a28:	4b0f      	ldr	r3, [pc, #60]	; (8004a68 <HAL_RCC_ClockConfig+0x2e8>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a30:	22f0      	movs	r2, #240	; 0xf0
 8004a32:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	fa92 f2a2 	rbit	r2, r2
 8004a3a:	60fa      	str	r2, [r7, #12]
  return result;
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	fab2 f282 	clz	r2, r2
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	40d3      	lsrs	r3, r2
 8004a46:	4a09      	ldr	r2, [pc, #36]	; (8004a6c <HAL_RCC_ClockConfig+0x2ec>)
 8004a48:	5cd3      	ldrb	r3, [r2, r3]
 8004a4a:	fa21 f303 	lsr.w	r3, r1, r3
 8004a4e:	4a08      	ldr	r2, [pc, #32]	; (8004a70 <HAL_RCC_ClockConfig+0x2f0>)
 8004a50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004a52:	4b08      	ldr	r3, [pc, #32]	; (8004a74 <HAL_RCC_ClockConfig+0x2f4>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fc ff30 	bl	80018bc <HAL_InitTick>
  
  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3778      	adds	r7, #120	; 0x78
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	0800a5fc 	.word	0x0800a5fc
 8004a70:	20000004 	.word	0x20000004
 8004a74:	20000008 	.word	0x20000008

08004a78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b08b      	sub	sp, #44	; 0x2c
 8004a7c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	61fb      	str	r3, [r7, #28]
 8004a82:	2300      	movs	r3, #0
 8004a84:	61bb      	str	r3, [r7, #24]
 8004a86:	2300      	movs	r3, #0
 8004a88:	627b      	str	r3, [r7, #36]	; 0x24
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004a92:	4b2a      	ldr	r3, [pc, #168]	; (8004b3c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	f003 030c 	and.w	r3, r3, #12
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	d002      	beq.n	8004aa8 <HAL_RCC_GetSysClockFreq+0x30>
 8004aa2:	2b08      	cmp	r3, #8
 8004aa4:	d003      	beq.n	8004aae <HAL_RCC_GetSysClockFreq+0x36>
 8004aa6:	e03f      	b.n	8004b28 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004aa8:	4b25      	ldr	r3, [pc, #148]	; (8004b40 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004aaa:	623b      	str	r3, [r7, #32]
      break;
 8004aac:	e03f      	b.n	8004b2e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004ab4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004ab8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	fa92 f2a2 	rbit	r2, r2
 8004ac0:	607a      	str	r2, [r7, #4]
  return result;
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	fab2 f282 	clz	r2, r2
 8004ac8:	b2d2      	uxtb	r2, r2
 8004aca:	40d3      	lsrs	r3, r2
 8004acc:	4a1d      	ldr	r2, [pc, #116]	; (8004b44 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004ace:	5cd3      	ldrb	r3, [r2, r3]
 8004ad0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004ad2:	4b1a      	ldr	r3, [pc, #104]	; (8004b3c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad6:	f003 030f 	and.w	r3, r3, #15
 8004ada:	220f      	movs	r2, #15
 8004adc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	fa92 f2a2 	rbit	r2, r2
 8004ae4:	60fa      	str	r2, [r7, #12]
  return result;
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	fab2 f282 	clz	r2, r2
 8004aec:	b2d2      	uxtb	r2, r2
 8004aee:	40d3      	lsrs	r3, r2
 8004af0:	4a15      	ldr	r2, [pc, #84]	; (8004b48 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004af2:	5cd3      	ldrb	r3, [r2, r3]
 8004af4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d008      	beq.n	8004b12 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b00:	4a0f      	ldr	r2, [pc, #60]	; (8004b40 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	fb02 f303 	mul.w	r3, r2, r3
 8004b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b10:	e007      	b.n	8004b22 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b12:	4a0b      	ldr	r2, [pc, #44]	; (8004b40 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	fb02 f303 	mul.w	r3, r2, r3
 8004b20:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	623b      	str	r3, [r7, #32]
      break;
 8004b26:	e002      	b.n	8004b2e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b28:	4b05      	ldr	r3, [pc, #20]	; (8004b40 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004b2a:	623b      	str	r3, [r7, #32]
      break;
 8004b2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	372c      	adds	r7, #44	; 0x2c
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	40021000 	.word	0x40021000
 8004b40:	007a1200 	.word	0x007a1200
 8004b44:	0800a614 	.word	0x0800a614
 8004b48:	0800a624 	.word	0x0800a624

08004b4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b50:	4b03      	ldr	r3, [pc, #12]	; (8004b60 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b52:	681b      	ldr	r3, [r3, #0]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	20000004 	.word	0x20000004

08004b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004b6a:	f7ff ffef 	bl	8004b4c <HAL_RCC_GetHCLKFreq>
 8004b6e:	4601      	mov	r1, r0
 8004b70:	4b0b      	ldr	r3, [pc, #44]	; (8004ba0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b78:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004b7c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	fa92 f2a2 	rbit	r2, r2
 8004b84:	603a      	str	r2, [r7, #0]
  return result;
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	fab2 f282 	clz	r2, r2
 8004b8c:	b2d2      	uxtb	r2, r2
 8004b8e:	40d3      	lsrs	r3, r2
 8004b90:	4a04      	ldr	r2, [pc, #16]	; (8004ba4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004b92:	5cd3      	ldrb	r3, [r2, r3]
 8004b94:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	40021000 	.word	0x40021000
 8004ba4:	0800a60c 	.word	0x0800a60c

08004ba8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004bae:	f7ff ffcd 	bl	8004b4c <HAL_RCC_GetHCLKFreq>
 8004bb2:	4601      	mov	r1, r0
 8004bb4:	4b0b      	ldr	r3, [pc, #44]	; (8004be4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004bbc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004bc0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	fa92 f2a2 	rbit	r2, r2
 8004bc8:	603a      	str	r2, [r7, #0]
  return result;
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	fab2 f282 	clz	r2, r2
 8004bd0:	b2d2      	uxtb	r2, r2
 8004bd2:	40d3      	lsrs	r3, r2
 8004bd4:	4a04      	ldr	r2, [pc, #16]	; (8004be8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004bd6:	5cd3      	ldrb	r3, [r2, r3]
 8004bd8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3708      	adds	r7, #8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	40021000 	.word	0x40021000
 8004be8:	0800a60c 	.word	0x0800a60c

08004bec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	220f      	movs	r2, #15
 8004bfa:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004bfc:	4b12      	ldr	r3, [pc, #72]	; (8004c48 <HAL_RCC_GetClockConfig+0x5c>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f003 0203 	and.w	r2, r3, #3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004c08:	4b0f      	ldr	r3, [pc, #60]	; (8004c48 <HAL_RCC_GetClockConfig+0x5c>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8004c14:	4b0c      	ldr	r3, [pc, #48]	; (8004c48 <HAL_RCC_GetClockConfig+0x5c>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004c20:	4b09      	ldr	r3, [pc, #36]	; (8004c48 <HAL_RCC_GetClockConfig+0x5c>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	08db      	lsrs	r3, r3, #3
 8004c26:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8004c2e:	4b07      	ldr	r3, [pc, #28]	; (8004c4c <HAL_RCC_GetClockConfig+0x60>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0207 	and.w	r2, r3, #7
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	601a      	str	r2, [r3, #0]
}
 8004c3a:	bf00      	nop
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	40021000 	.word	0x40021000
 8004c4c:	40022000 	.word	0x40022000

08004c50 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b092      	sub	sp, #72	; 0x48
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004c60:	2300      	movs	r3, #0
 8004c62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f000 80d4 	beq.w	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c74:	4b4e      	ldr	r3, [pc, #312]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10e      	bne.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c80:	4b4b      	ldr	r3, [pc, #300]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c82:	69db      	ldr	r3, [r3, #28]
 8004c84:	4a4a      	ldr	r2, [pc, #296]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c8a:	61d3      	str	r3, [r2, #28]
 8004c8c:	4b48      	ldr	r3, [pc, #288]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c8e:	69db      	ldr	r3, [r3, #28]
 8004c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c94:	60bb      	str	r3, [r7, #8]
 8004c96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c9e:	4b45      	ldr	r3, [pc, #276]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d118      	bne.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004caa:	4b42      	ldr	r3, [pc, #264]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a41      	ldr	r2, [pc, #260]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cb4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cb6:	f7fd f987 	bl	8001fc8 <HAL_GetTick>
 8004cba:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cbc:	e008      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cbe:	f7fd f983 	bl	8001fc8 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b64      	cmp	r3, #100	; 0x64
 8004cca:	d901      	bls.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e1d6      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd0:	4b38      	ldr	r3, [pc, #224]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d0f0      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cdc:	4b34      	ldr	r3, [pc, #208]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 8084 	beq.w	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d07c      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cfc:	4b2c      	ldr	r3, [pc, #176]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0e:	fa93 f3a3 	rbit	r3, r3
 8004d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d16:	fab3 f383 	clz	r3, r3
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	4b26      	ldr	r3, [pc, #152]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d20:	4413      	add	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	461a      	mov	r2, r3
 8004d26:	2301      	movs	r3, #1
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d32:	fa93 f3a3 	rbit	r3, r3
 8004d36:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d3a:	fab3 f383 	clz	r3, r3
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	461a      	mov	r2, r3
 8004d42:	4b1d      	ldr	r3, [pc, #116]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d44:	4413      	add	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	461a      	mov	r2, r3
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d4e:	4a18      	ldr	r2, [pc, #96]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d52:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d04b      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5e:	f7fd f933 	bl	8001fc8 <HAL_GetTick>
 8004d62:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d64:	e00a      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d66:	f7fd f92f 	bl	8001fc8 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e180      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d82:	fa93 f3a3 	rbit	r3, r3
 8004d86:	627b      	str	r3, [r7, #36]	; 0x24
 8004d88:	2302      	movs	r3, #2
 8004d8a:	623b      	str	r3, [r7, #32]
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	fa93 f3a3 	rbit	r3, r3
 8004d92:	61fb      	str	r3, [r7, #28]
  return result;
 8004d94:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d96:	fab3 f383 	clz	r3, r3
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	095b      	lsrs	r3, r3, #5
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	f043 0302 	orr.w	r3, r3, #2
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d108      	bne.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004daa:	4b01      	ldr	r3, [pc, #4]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	e00d      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004db0:	40021000 	.word	0x40021000
 8004db4:	40007000 	.word	0x40007000
 8004db8:	10908100 	.word	0x10908100
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	fa93 f3a3 	rbit	r3, r3
 8004dc6:	617b      	str	r3, [r7, #20]
 8004dc8:	4b9a      	ldr	r3, [pc, #616]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dcc:	2202      	movs	r2, #2
 8004dce:	613a      	str	r2, [r7, #16]
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	fa92 f2a2 	rbit	r2, r2
 8004dd6:	60fa      	str	r2, [r7, #12]
  return result;
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	fab2 f282 	clz	r2, r2
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004de4:	b2d2      	uxtb	r2, r2
 8004de6:	f002 021f 	and.w	r2, r2, #31
 8004dea:	2101      	movs	r1, #1
 8004dec:	fa01 f202 	lsl.w	r2, r1, r2
 8004df0:	4013      	ands	r3, r2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d0b7      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004df6:	4b8f      	ldr	r3, [pc, #572]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	498c      	ldr	r1, [pc, #560]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e08:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d105      	bne.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e10:	4b88      	ldr	r3, [pc, #544]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e12:	69db      	ldr	r3, [r3, #28]
 8004e14:	4a87      	ldr	r2, [pc, #540]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d008      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e28:	4b82      	ldr	r3, [pc, #520]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2c:	f023 0203 	bic.w	r2, r3, #3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	497f      	ldr	r1, [pc, #508]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d008      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e46:	4b7b      	ldr	r3, [pc, #492]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	4978      	ldr	r1, [pc, #480]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d008      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e64:	4b73      	ldr	r3, [pc, #460]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	4970      	ldr	r1, [pc, #448]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0320 	and.w	r3, r3, #32
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d008      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e82:	4b6c      	ldr	r3, [pc, #432]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e86:	f023 0210 	bic.w	r2, r3, #16
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	4969      	ldr	r1, [pc, #420]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d008      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004ea0:	4b64      	ldr	r3, [pc, #400]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eac:	4961      	ldr	r1, [pc, #388]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d008      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ebe:	4b5d      	ldr	r3, [pc, #372]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec2:	f023 0220 	bic.w	r2, r3, #32
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	495a      	ldr	r1, [pc, #360]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d008      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004edc:	4b55      	ldr	r3, [pc, #340]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	4952      	ldr	r1, [pc, #328]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d008      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004efa:	4b4e      	ldr	r3, [pc, #312]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	494b      	ldr	r1, [pc, #300]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0310 	and.w	r3, r3, #16
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d008      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f18:	4b46      	ldr	r3, [pc, #280]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	4943      	ldr	r1, [pc, #268]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d008      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f36:	4b3f      	ldr	r3, [pc, #252]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f42:	493c      	ldr	r1, [pc, #240]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d008      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004f54:	4b37      	ldr	r3, [pc, #220]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f58:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f60:	4934      	ldr	r1, [pc, #208]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d008      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004f72:	4b30      	ldr	r3, [pc, #192]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f76:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7e:	492d      	ldr	r1, [pc, #180]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d008      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004f90:	4b28      	ldr	r3, [pc, #160]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f9c:	4925      	ldr	r1, [pc, #148]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d008      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004fae:	4b21      	ldr	r3, [pc, #132]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	491e      	ldr	r1, [pc, #120]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d008      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004fcc:	4b19      	ldr	r3, [pc, #100]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd8:	4916      	ldr	r1, [pc, #88]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d008      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004fea:	4b12      	ldr	r3, [pc, #72]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff6:	490f      	ldr	r1, [pc, #60]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d008      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005008:	4b0a      	ldr	r3, [pc, #40]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800500a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005014:	4907      	ldr	r1, [pc, #28]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005016:	4313      	orrs	r3, r2
 8005018:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00c      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005026:	4b03      	ldr	r3, [pc, #12]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	e002      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005032:	bf00      	nop
 8005034:	40021000 	.word	0x40021000
 8005038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800503a:	4913      	ldr	r1, [pc, #76]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800503c:	4313      	orrs	r3, r2
 800503e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d008      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800504c:	4b0e      	ldr	r3, [pc, #56]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800504e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005050:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005058:	490b      	ldr	r1, [pc, #44]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800505a:	4313      	orrs	r3, r2
 800505c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d008      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800506a:	4b07      	ldr	r3, [pc, #28]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800506c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005076:	4904      	ldr	r1, [pc, #16]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005078:	4313      	orrs	r3, r2
 800507a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3748      	adds	r7, #72	; 0x48
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	40021000 	.word	0x40021000

0800508c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e049      	b.n	8005132 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d106      	bne.n	80050b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7fc fdac 	bl	8001c10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3304      	adds	r3, #4
 80050c8:	4619      	mov	r1, r3
 80050ca:	4610      	mov	r0, r2
 80050cc:	f000 ffbc 	bl	8006048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
	...

0800513c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b01      	cmp	r3, #1
 800514e:	d001      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e04f      	b.n	80051f4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f042 0201 	orr.w	r2, r2, #1
 800516a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a23      	ldr	r2, [pc, #140]	; (8005200 <HAL_TIM_Base_Start_IT+0xc4>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d01d      	beq.n	80051b2 <HAL_TIM_Base_Start_IT+0x76>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800517e:	d018      	beq.n	80051b2 <HAL_TIM_Base_Start_IT+0x76>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a1f      	ldr	r2, [pc, #124]	; (8005204 <HAL_TIM_Base_Start_IT+0xc8>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d013      	beq.n	80051b2 <HAL_TIM_Base_Start_IT+0x76>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a1e      	ldr	r2, [pc, #120]	; (8005208 <HAL_TIM_Base_Start_IT+0xcc>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d00e      	beq.n	80051b2 <HAL_TIM_Base_Start_IT+0x76>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a1c      	ldr	r2, [pc, #112]	; (800520c <HAL_TIM_Base_Start_IT+0xd0>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d009      	beq.n	80051b2 <HAL_TIM_Base_Start_IT+0x76>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a1b      	ldr	r2, [pc, #108]	; (8005210 <HAL_TIM_Base_Start_IT+0xd4>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d004      	beq.n	80051b2 <HAL_TIM_Base_Start_IT+0x76>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a19      	ldr	r2, [pc, #100]	; (8005214 <HAL_TIM_Base_Start_IT+0xd8>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d115      	bne.n	80051de <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	689a      	ldr	r2, [r3, #8]
 80051b8:	4b17      	ldr	r3, [pc, #92]	; (8005218 <HAL_TIM_Base_Start_IT+0xdc>)
 80051ba:	4013      	ands	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2b06      	cmp	r3, #6
 80051c2:	d015      	beq.n	80051f0 <HAL_TIM_Base_Start_IT+0xb4>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ca:	d011      	beq.n	80051f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f042 0201 	orr.w	r2, r2, #1
 80051da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051dc:	e008      	b.n	80051f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f042 0201 	orr.w	r2, r2, #1
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	e000      	b.n	80051f2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3714      	adds	r7, #20
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	40012c00 	.word	0x40012c00
 8005204:	40000400 	.word	0x40000400
 8005208:	40000800 	.word	0x40000800
 800520c:	40013400 	.word	0x40013400
 8005210:	40014000 	.word	0x40014000
 8005214:	40015000 	.word	0x40015000
 8005218:	00010007 	.word	0x00010007

0800521c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e049      	b.n	80052c2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d106      	bne.n	8005248 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f841 	bl	80052ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	3304      	adds	r3, #4
 8005258:	4619      	mov	r1, r3
 800525a:	4610      	mov	r0, r2
 800525c:	f000 fef4 	bl	8006048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3708      	adds	r7, #8
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b083      	sub	sp, #12
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80052d2:	bf00      	nop
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
	...

080052e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d109      	bne.n	8005304 <HAL_TIM_PWM_Start+0x24>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	bf14      	ite	ne
 80052fc:	2301      	movne	r3, #1
 80052fe:	2300      	moveq	r3, #0
 8005300:	b2db      	uxtb	r3, r3
 8005302:	e03c      	b.n	800537e <HAL_TIM_PWM_Start+0x9e>
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	2b04      	cmp	r3, #4
 8005308:	d109      	bne.n	800531e <HAL_TIM_PWM_Start+0x3e>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b01      	cmp	r3, #1
 8005314:	bf14      	ite	ne
 8005316:	2301      	movne	r3, #1
 8005318:	2300      	moveq	r3, #0
 800531a:	b2db      	uxtb	r3, r3
 800531c:	e02f      	b.n	800537e <HAL_TIM_PWM_Start+0x9e>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b08      	cmp	r3, #8
 8005322:	d109      	bne.n	8005338 <HAL_TIM_PWM_Start+0x58>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b01      	cmp	r3, #1
 800532e:	bf14      	ite	ne
 8005330:	2301      	movne	r3, #1
 8005332:	2300      	moveq	r3, #0
 8005334:	b2db      	uxtb	r3, r3
 8005336:	e022      	b.n	800537e <HAL_TIM_PWM_Start+0x9e>
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	2b0c      	cmp	r3, #12
 800533c:	d109      	bne.n	8005352 <HAL_TIM_PWM_Start+0x72>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b01      	cmp	r3, #1
 8005348:	bf14      	ite	ne
 800534a:	2301      	movne	r3, #1
 800534c:	2300      	moveq	r3, #0
 800534e:	b2db      	uxtb	r3, r3
 8005350:	e015      	b.n	800537e <HAL_TIM_PWM_Start+0x9e>
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2b10      	cmp	r3, #16
 8005356:	d109      	bne.n	800536c <HAL_TIM_PWM_Start+0x8c>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b01      	cmp	r3, #1
 8005362:	bf14      	ite	ne
 8005364:	2301      	movne	r3, #1
 8005366:	2300      	moveq	r3, #0
 8005368:	b2db      	uxtb	r3, r3
 800536a:	e008      	b.n	800537e <HAL_TIM_PWM_Start+0x9e>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b01      	cmp	r3, #1
 8005376:	bf14      	ite	ne
 8005378:	2301      	movne	r3, #1
 800537a:	2300      	moveq	r3, #0
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e0a1      	b.n	80054ca <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d104      	bne.n	8005396 <HAL_TIM_PWM_Start+0xb6>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005394:	e023      	b.n	80053de <HAL_TIM_PWM_Start+0xfe>
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b04      	cmp	r3, #4
 800539a:	d104      	bne.n	80053a6 <HAL_TIM_PWM_Start+0xc6>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053a4:	e01b      	b.n	80053de <HAL_TIM_PWM_Start+0xfe>
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b08      	cmp	r3, #8
 80053aa:	d104      	bne.n	80053b6 <HAL_TIM_PWM_Start+0xd6>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053b4:	e013      	b.n	80053de <HAL_TIM_PWM_Start+0xfe>
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b0c      	cmp	r3, #12
 80053ba:	d104      	bne.n	80053c6 <HAL_TIM_PWM_Start+0xe6>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2202      	movs	r2, #2
 80053c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053c4:	e00b      	b.n	80053de <HAL_TIM_PWM_Start+0xfe>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b10      	cmp	r3, #16
 80053ca:	d104      	bne.n	80053d6 <HAL_TIM_PWM_Start+0xf6>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053d4:	e003      	b.n	80053de <HAL_TIM_PWM_Start+0xfe>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2202      	movs	r2, #2
 80053da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2201      	movs	r2, #1
 80053e4:	6839      	ldr	r1, [r7, #0]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f001 fb90 	bl	8006b0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a38      	ldr	r2, [pc, #224]	; (80054d4 <HAL_TIM_PWM_Start+0x1f4>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d018      	beq.n	8005428 <HAL_TIM_PWM_Start+0x148>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a37      	ldr	r2, [pc, #220]	; (80054d8 <HAL_TIM_PWM_Start+0x1f8>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d013      	beq.n	8005428 <HAL_TIM_PWM_Start+0x148>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a35      	ldr	r2, [pc, #212]	; (80054dc <HAL_TIM_PWM_Start+0x1fc>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d00e      	beq.n	8005428 <HAL_TIM_PWM_Start+0x148>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a34      	ldr	r2, [pc, #208]	; (80054e0 <HAL_TIM_PWM_Start+0x200>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d009      	beq.n	8005428 <HAL_TIM_PWM_Start+0x148>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a32      	ldr	r2, [pc, #200]	; (80054e4 <HAL_TIM_PWM_Start+0x204>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d004      	beq.n	8005428 <HAL_TIM_PWM_Start+0x148>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a31      	ldr	r2, [pc, #196]	; (80054e8 <HAL_TIM_PWM_Start+0x208>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d101      	bne.n	800542c <HAL_TIM_PWM_Start+0x14c>
 8005428:	2301      	movs	r3, #1
 800542a:	e000      	b.n	800542e <HAL_TIM_PWM_Start+0x14e>
 800542c:	2300      	movs	r3, #0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d007      	beq.n	8005442 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005440:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a23      	ldr	r2, [pc, #140]	; (80054d4 <HAL_TIM_PWM_Start+0x1f4>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d01d      	beq.n	8005488 <HAL_TIM_PWM_Start+0x1a8>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005454:	d018      	beq.n	8005488 <HAL_TIM_PWM_Start+0x1a8>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a24      	ldr	r2, [pc, #144]	; (80054ec <HAL_TIM_PWM_Start+0x20c>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d013      	beq.n	8005488 <HAL_TIM_PWM_Start+0x1a8>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a22      	ldr	r2, [pc, #136]	; (80054f0 <HAL_TIM_PWM_Start+0x210>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d00e      	beq.n	8005488 <HAL_TIM_PWM_Start+0x1a8>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a1a      	ldr	r2, [pc, #104]	; (80054d8 <HAL_TIM_PWM_Start+0x1f8>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d009      	beq.n	8005488 <HAL_TIM_PWM_Start+0x1a8>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a18      	ldr	r2, [pc, #96]	; (80054dc <HAL_TIM_PWM_Start+0x1fc>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d004      	beq.n	8005488 <HAL_TIM_PWM_Start+0x1a8>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a19      	ldr	r2, [pc, #100]	; (80054e8 <HAL_TIM_PWM_Start+0x208>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d115      	bne.n	80054b4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689a      	ldr	r2, [r3, #8]
 800548e:	4b19      	ldr	r3, [pc, #100]	; (80054f4 <HAL_TIM_PWM_Start+0x214>)
 8005490:	4013      	ands	r3, r2
 8005492:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2b06      	cmp	r3, #6
 8005498:	d015      	beq.n	80054c6 <HAL_TIM_PWM_Start+0x1e6>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054a0:	d011      	beq.n	80054c6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f042 0201 	orr.w	r2, r2, #1
 80054b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b2:	e008      	b.n	80054c6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f042 0201 	orr.w	r2, r2, #1
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	e000      	b.n	80054c8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	40012c00 	.word	0x40012c00
 80054d8:	40013400 	.word	0x40013400
 80054dc:	40014000 	.word	0x40014000
 80054e0:	40014400 	.word	0x40014400
 80054e4:	40014800 	.word	0x40014800
 80054e8:	40015000 	.word	0x40015000
 80054ec:	40000400 	.word	0x40000400
 80054f0:	40000800 	.word	0x40000800
 80054f4:	00010007 	.word	0x00010007

080054f8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e049      	b.n	800559e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d106      	bne.n	8005524 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f841 	bl	80055a6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2202      	movs	r2, #2
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	3304      	adds	r3, #4
 8005534:	4619      	mov	r1, r3
 8005536:	4610      	mov	r0, r2
 8005538:	f000 fd86 	bl	8006048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b083      	sub	sp, #12
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80055ae:	bf00      	nop
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
	...

080055bc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d104      	bne.n	80055da <HAL_TIM_IC_Start_IT+0x1e>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	e023      	b.n	8005622 <HAL_TIM_IC_Start_IT+0x66>
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d104      	bne.n	80055ea <HAL_TIM_IC_Start_IT+0x2e>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	e01b      	b.n	8005622 <HAL_TIM_IC_Start_IT+0x66>
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	2b08      	cmp	r3, #8
 80055ee:	d104      	bne.n	80055fa <HAL_TIM_IC_Start_IT+0x3e>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	e013      	b.n	8005622 <HAL_TIM_IC_Start_IT+0x66>
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b0c      	cmp	r3, #12
 80055fe:	d104      	bne.n	800560a <HAL_TIM_IC_Start_IT+0x4e>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005606:	b2db      	uxtb	r3, r3
 8005608:	e00b      	b.n	8005622 <HAL_TIM_IC_Start_IT+0x66>
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b10      	cmp	r3, #16
 800560e:	d104      	bne.n	800561a <HAL_TIM_IC_Start_IT+0x5e>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005616:	b2db      	uxtb	r3, r3
 8005618:	e003      	b.n	8005622 <HAL_TIM_IC_Start_IT+0x66>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005620:	b2db      	uxtb	r3, r3
 8005622:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d104      	bne.n	8005634 <HAL_TIM_IC_Start_IT+0x78>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005630:	b2db      	uxtb	r3, r3
 8005632:	e013      	b.n	800565c <HAL_TIM_IC_Start_IT+0xa0>
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	2b04      	cmp	r3, #4
 8005638:	d104      	bne.n	8005644 <HAL_TIM_IC_Start_IT+0x88>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005640:	b2db      	uxtb	r3, r3
 8005642:	e00b      	b.n	800565c <HAL_TIM_IC_Start_IT+0xa0>
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	2b08      	cmp	r3, #8
 8005648:	d104      	bne.n	8005654 <HAL_TIM_IC_Start_IT+0x98>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005650:	b2db      	uxtb	r3, r3
 8005652:	e003      	b.n	800565c <HAL_TIM_IC_Start_IT+0xa0>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800565a:	b2db      	uxtb	r3, r3
 800565c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800565e:	7bbb      	ldrb	r3, [r7, #14]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d102      	bne.n	800566a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005664:	7b7b      	ldrb	r3, [r7, #13]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d001      	beq.n	800566e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e0dd      	b.n	800582a <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d104      	bne.n	800567e <HAL_TIM_IC_Start_IT+0xc2>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800567c:	e023      	b.n	80056c6 <HAL_TIM_IC_Start_IT+0x10a>
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b04      	cmp	r3, #4
 8005682:	d104      	bne.n	800568e <HAL_TIM_IC_Start_IT+0xd2>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2202      	movs	r2, #2
 8005688:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800568c:	e01b      	b.n	80056c6 <HAL_TIM_IC_Start_IT+0x10a>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2b08      	cmp	r3, #8
 8005692:	d104      	bne.n	800569e <HAL_TIM_IC_Start_IT+0xe2>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2202      	movs	r2, #2
 8005698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800569c:	e013      	b.n	80056c6 <HAL_TIM_IC_Start_IT+0x10a>
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	2b0c      	cmp	r3, #12
 80056a2:	d104      	bne.n	80056ae <HAL_TIM_IC_Start_IT+0xf2>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2202      	movs	r2, #2
 80056a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056ac:	e00b      	b.n	80056c6 <HAL_TIM_IC_Start_IT+0x10a>
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	2b10      	cmp	r3, #16
 80056b2:	d104      	bne.n	80056be <HAL_TIM_IC_Start_IT+0x102>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056bc:	e003      	b.n	80056c6 <HAL_TIM_IC_Start_IT+0x10a>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2202      	movs	r2, #2
 80056c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d104      	bne.n	80056d6 <HAL_TIM_IC_Start_IT+0x11a>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2202      	movs	r2, #2
 80056d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056d4:	e013      	b.n	80056fe <HAL_TIM_IC_Start_IT+0x142>
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2b04      	cmp	r3, #4
 80056da:	d104      	bne.n	80056e6 <HAL_TIM_IC_Start_IT+0x12a>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056e4:	e00b      	b.n	80056fe <HAL_TIM_IC_Start_IT+0x142>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2b08      	cmp	r3, #8
 80056ea:	d104      	bne.n	80056f6 <HAL_TIM_IC_Start_IT+0x13a>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2202      	movs	r2, #2
 80056f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056f4:	e003      	b.n	80056fe <HAL_TIM_IC_Start_IT+0x142>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2202      	movs	r2, #2
 80056fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	2b0c      	cmp	r3, #12
 8005702:	d841      	bhi.n	8005788 <HAL_TIM_IC_Start_IT+0x1cc>
 8005704:	a201      	add	r2, pc, #4	; (adr r2, 800570c <HAL_TIM_IC_Start_IT+0x150>)
 8005706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570a:	bf00      	nop
 800570c:	08005741 	.word	0x08005741
 8005710:	08005789 	.word	0x08005789
 8005714:	08005789 	.word	0x08005789
 8005718:	08005789 	.word	0x08005789
 800571c:	08005753 	.word	0x08005753
 8005720:	08005789 	.word	0x08005789
 8005724:	08005789 	.word	0x08005789
 8005728:	08005789 	.word	0x08005789
 800572c:	08005765 	.word	0x08005765
 8005730:	08005789 	.word	0x08005789
 8005734:	08005789 	.word	0x08005789
 8005738:	08005789 	.word	0x08005789
 800573c:	08005777 	.word	0x08005777
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68da      	ldr	r2, [r3, #12]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f042 0202 	orr.w	r2, r2, #2
 800574e:	60da      	str	r2, [r3, #12]
      break;
 8005750:	e01d      	b.n	800578e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68da      	ldr	r2, [r3, #12]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f042 0204 	orr.w	r2, r2, #4
 8005760:	60da      	str	r2, [r3, #12]
      break;
 8005762:	e014      	b.n	800578e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f042 0208 	orr.w	r2, r2, #8
 8005772:	60da      	str	r2, [r3, #12]
      break;
 8005774:	e00b      	b.n	800578e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68da      	ldr	r2, [r3, #12]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f042 0210 	orr.w	r2, r2, #16
 8005784:	60da      	str	r2, [r3, #12]
      break;
 8005786:	e002      	b.n	800578e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	73fb      	strb	r3, [r7, #15]
      break;
 800578c:	bf00      	nop
  }

  if (status == HAL_OK)
 800578e:	7bfb      	ldrb	r3, [r7, #15]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d149      	bne.n	8005828 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2201      	movs	r2, #1
 800579a:	6839      	ldr	r1, [r7, #0]
 800579c:	4618      	mov	r0, r3
 800579e:	f001 f9b5 	bl	8006b0c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a23      	ldr	r2, [pc, #140]	; (8005834 <HAL_TIM_IC_Start_IT+0x278>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d01d      	beq.n	80057e8 <HAL_TIM_IC_Start_IT+0x22c>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b4:	d018      	beq.n	80057e8 <HAL_TIM_IC_Start_IT+0x22c>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a1f      	ldr	r2, [pc, #124]	; (8005838 <HAL_TIM_IC_Start_IT+0x27c>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d013      	beq.n	80057e8 <HAL_TIM_IC_Start_IT+0x22c>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a1d      	ldr	r2, [pc, #116]	; (800583c <HAL_TIM_IC_Start_IT+0x280>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d00e      	beq.n	80057e8 <HAL_TIM_IC_Start_IT+0x22c>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a1c      	ldr	r2, [pc, #112]	; (8005840 <HAL_TIM_IC_Start_IT+0x284>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d009      	beq.n	80057e8 <HAL_TIM_IC_Start_IT+0x22c>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a1a      	ldr	r2, [pc, #104]	; (8005844 <HAL_TIM_IC_Start_IT+0x288>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d004      	beq.n	80057e8 <HAL_TIM_IC_Start_IT+0x22c>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a19      	ldr	r2, [pc, #100]	; (8005848 <HAL_TIM_IC_Start_IT+0x28c>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d115      	bne.n	8005814 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689a      	ldr	r2, [r3, #8]
 80057ee:	4b17      	ldr	r3, [pc, #92]	; (800584c <HAL_TIM_IC_Start_IT+0x290>)
 80057f0:	4013      	ands	r3, r2
 80057f2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	2b06      	cmp	r3, #6
 80057f8:	d015      	beq.n	8005826 <HAL_TIM_IC_Start_IT+0x26a>
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005800:	d011      	beq.n	8005826 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f042 0201 	orr.w	r2, r2, #1
 8005810:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005812:	e008      	b.n	8005826 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f042 0201 	orr.w	r2, r2, #1
 8005822:	601a      	str	r2, [r3, #0]
 8005824:	e000      	b.n	8005828 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005826:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005828:	7bfb      	ldrb	r3, [r7, #15]
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	40012c00 	.word	0x40012c00
 8005838:	40000400 	.word	0x40000400
 800583c:	40000800 	.word	0x40000800
 8005840:	40013400 	.word	0x40013400
 8005844:	40014000 	.word	0x40014000
 8005848:	40015000 	.word	0x40015000
 800584c:	00010007 	.word	0x00010007

08005850 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b02      	cmp	r3, #2
 8005864:	d122      	bne.n	80058ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f003 0302 	and.w	r3, r3, #2
 8005870:	2b02      	cmp	r3, #2
 8005872:	d11b      	bne.n	80058ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f06f 0202 	mvn.w	r2, #2
 800587c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	f003 0303 	and.w	r3, r3, #3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7fb f908 	bl	8000aa8 <HAL_TIM_IC_CaptureCallback>
 8005898:	e005      	b.n	80058a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fbb6 	bl	800600c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 fbbd 	bl	8006020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	f003 0304 	and.w	r3, r3, #4
 80058b6:	2b04      	cmp	r3, #4
 80058b8:	d122      	bne.n	8005900 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f003 0304 	and.w	r3, r3, #4
 80058c4:	2b04      	cmp	r3, #4
 80058c6:	d11b      	bne.n	8005900 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f06f 0204 	mvn.w	r2, #4
 80058d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2202      	movs	r2, #2
 80058d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d003      	beq.n	80058ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7fb f8de 	bl	8000aa8 <HAL_TIM_IC_CaptureCallback>
 80058ec:	e005      	b.n	80058fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 fb8c 	bl	800600c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 fb93 	bl	8006020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	f003 0308 	and.w	r3, r3, #8
 800590a:	2b08      	cmp	r3, #8
 800590c:	d122      	bne.n	8005954 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f003 0308 	and.w	r3, r3, #8
 8005918:	2b08      	cmp	r3, #8
 800591a:	d11b      	bne.n	8005954 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f06f 0208 	mvn.w	r2, #8
 8005924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2204      	movs	r2, #4
 800592a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	f003 0303 	and.w	r3, r3, #3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7fb f8b4 	bl	8000aa8 <HAL_TIM_IC_CaptureCallback>
 8005940:	e005      	b.n	800594e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 fb62 	bl	800600c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 fb69 	bl	8006020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	f003 0310 	and.w	r3, r3, #16
 800595e:	2b10      	cmp	r3, #16
 8005960:	d122      	bne.n	80059a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f003 0310 	and.w	r3, r3, #16
 800596c:	2b10      	cmp	r3, #16
 800596e:	d11b      	bne.n	80059a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f06f 0210 	mvn.w	r2, #16
 8005978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2208      	movs	r2, #8
 800597e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7fb f88a 	bl	8000aa8 <HAL_TIM_IC_CaptureCallback>
 8005994:	e005      	b.n	80059a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fb38 	bl	800600c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 fb3f 	bl	8006020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d10e      	bne.n	80059d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d107      	bne.n	80059d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f06f 0201 	mvn.w	r2, #1
 80059cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7fb fe64 	bl	800169c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059de:	2b80      	cmp	r3, #128	; 0x80
 80059e0:	d10e      	bne.n	8005a00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ec:	2b80      	cmp	r3, #128	; 0x80
 80059ee:	d107      	bne.n	8005a00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f001 f942 	bl	8006c84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a0e:	d10e      	bne.n	8005a2e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a1a:	2b80      	cmp	r3, #128	; 0x80
 8005a1c:	d107      	bne.n	8005a2e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f001 f935 	bl	8006c98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a38:	2b40      	cmp	r3, #64	; 0x40
 8005a3a:	d10e      	bne.n	8005a5a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a46:	2b40      	cmp	r3, #64	; 0x40
 8005a48:	d107      	bne.n	8005a5a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 faed 	bl	8006034 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	f003 0320 	and.w	r3, r3, #32
 8005a64:	2b20      	cmp	r3, #32
 8005a66:	d10e      	bne.n	8005a86 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	f003 0320 	and.w	r3, r3, #32
 8005a72:	2b20      	cmp	r3, #32
 8005a74:	d107      	bne.n	8005a86 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f06f 0220 	mvn.w	r2, #32
 8005a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f001 f8f5 	bl	8006c70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a86:	bf00      	nop
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b086      	sub	sp, #24
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	60f8      	str	r0, [r7, #12]
 8005a96:	60b9      	str	r1, [r7, #8]
 8005a98:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d101      	bne.n	8005aac <HAL_TIM_IC_ConfigChannel+0x1e>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	e088      	b.n	8005bbe <HAL_TIM_IC_ConfigChannel+0x130>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d11b      	bne.n	8005af2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005aca:	f000 fe61 	bl	8006790 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	699a      	ldr	r2, [r3, #24]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 020c 	bic.w	r2, r2, #12
 8005adc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	6999      	ldr	r1, [r3, #24]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	619a      	str	r2, [r3, #24]
 8005af0:	e060      	b.n	8005bb4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2b04      	cmp	r3, #4
 8005af6:	d11c      	bne.n	8005b32 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005b08:	f000 fedf 	bl	80068ca <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699a      	ldr	r2, [r3, #24]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005b1a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6999      	ldr	r1, [r3, #24]
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	021a      	lsls	r2, r3, #8
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	619a      	str	r2, [r3, #24]
 8005b30:	e040      	b.n	8005bb4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b08      	cmp	r3, #8
 8005b36:	d11b      	bne.n	8005b70 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005b48:	f000 ff2c 	bl	80069a4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	69da      	ldr	r2, [r3, #28]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 020c 	bic.w	r2, r2, #12
 8005b5a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	69d9      	ldr	r1, [r3, #28]
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	689a      	ldr	r2, [r3, #8]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	61da      	str	r2, [r3, #28]
 8005b6e:	e021      	b.n	8005bb4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b0c      	cmp	r3, #12
 8005b74:	d11c      	bne.n	8005bb0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005b86:	f000 ff49 	bl	8006a1c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	69da      	ldr	r2, [r3, #28]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005b98:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	69d9      	ldr	r1, [r3, #28]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	021a      	lsls	r2, r3, #8
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	61da      	str	r2, [r3, #28]
 8005bae:	e001      	b.n	8005bb4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3718      	adds	r7, #24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
	...

08005bc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d101      	bne.n	8005be6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005be2:	2302      	movs	r3, #2
 8005be4:	e0ff      	b.n	8005de6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b14      	cmp	r3, #20
 8005bf2:	f200 80f0 	bhi.w	8005dd6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005bf6:	a201      	add	r2, pc, #4	; (adr r2, 8005bfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bfc:	08005c51 	.word	0x08005c51
 8005c00:	08005dd7 	.word	0x08005dd7
 8005c04:	08005dd7 	.word	0x08005dd7
 8005c08:	08005dd7 	.word	0x08005dd7
 8005c0c:	08005c91 	.word	0x08005c91
 8005c10:	08005dd7 	.word	0x08005dd7
 8005c14:	08005dd7 	.word	0x08005dd7
 8005c18:	08005dd7 	.word	0x08005dd7
 8005c1c:	08005cd3 	.word	0x08005cd3
 8005c20:	08005dd7 	.word	0x08005dd7
 8005c24:	08005dd7 	.word	0x08005dd7
 8005c28:	08005dd7 	.word	0x08005dd7
 8005c2c:	08005d13 	.word	0x08005d13
 8005c30:	08005dd7 	.word	0x08005dd7
 8005c34:	08005dd7 	.word	0x08005dd7
 8005c38:	08005dd7 	.word	0x08005dd7
 8005c3c:	08005d55 	.word	0x08005d55
 8005c40:	08005dd7 	.word	0x08005dd7
 8005c44:	08005dd7 	.word	0x08005dd7
 8005c48:	08005dd7 	.word	0x08005dd7
 8005c4c:	08005d95 	.word	0x08005d95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68b9      	ldr	r1, [r7, #8]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 fa94 	bl	8006184 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	699a      	ldr	r2, [r3, #24]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f042 0208 	orr.w	r2, r2, #8
 8005c6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	699a      	ldr	r2, [r3, #24]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 0204 	bic.w	r2, r2, #4
 8005c7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6999      	ldr	r1, [r3, #24]
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	691a      	ldr	r2, [r3, #16]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	619a      	str	r2, [r3, #24]
      break;
 8005c8e:	e0a5      	b.n	8005ddc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68b9      	ldr	r1, [r7, #8]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f000 fb0e 	bl	80062b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	699a      	ldr	r2, [r3, #24]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005caa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	699a      	ldr	r2, [r3, #24]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6999      	ldr	r1, [r3, #24]
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	021a      	lsls	r2, r3, #8
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	619a      	str	r2, [r3, #24]
      break;
 8005cd0:	e084      	b.n	8005ddc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68b9      	ldr	r1, [r7, #8]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f000 fb81 	bl	80063e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	69da      	ldr	r2, [r3, #28]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f042 0208 	orr.w	r2, r2, #8
 8005cec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	69da      	ldr	r2, [r3, #28]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0204 	bic.w	r2, r2, #4
 8005cfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	69d9      	ldr	r1, [r3, #28]
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	691a      	ldr	r2, [r3, #16]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	430a      	orrs	r2, r1
 8005d0e:	61da      	str	r2, [r3, #28]
      break;
 8005d10:	e064      	b.n	8005ddc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68b9      	ldr	r1, [r7, #8]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f000 fbf3 	bl	8006504 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	69da      	ldr	r2, [r3, #28]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	69da      	ldr	r2, [r3, #28]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	69d9      	ldr	r1, [r3, #28]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	021a      	lsls	r2, r3, #8
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	61da      	str	r2, [r3, #28]
      break;
 8005d52:	e043      	b.n	8005ddc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68b9      	ldr	r1, [r7, #8]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 fc42 	bl	80065e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f042 0208 	orr.w	r2, r2, #8
 8005d6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f022 0204 	bic.w	r2, r2, #4
 8005d7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	691a      	ldr	r2, [r3, #16]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d92:	e023      	b.n	8005ddc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68b9      	ldr	r1, [r7, #8]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 fc8c 	bl	80066b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dbe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	021a      	lsls	r2, r3, #8
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005dd4:	e002      	b.n	8005ddc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	75fb      	strb	r3, [r7, #23]
      break;
 8005dda:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005de4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3718      	adds	r7, #24
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop

08005df0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d101      	bne.n	8005e0c <HAL_TIM_ConfigClockSource+0x1c>
 8005e08:	2302      	movs	r3, #2
 8005e0a:	e0b6      	b.n	8005f7a <HAL_TIM_ConfigClockSource+0x18a>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e48:	d03e      	beq.n	8005ec8 <HAL_TIM_ConfigClockSource+0xd8>
 8005e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e4e:	f200 8087 	bhi.w	8005f60 <HAL_TIM_ConfigClockSource+0x170>
 8005e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e56:	f000 8086 	beq.w	8005f66 <HAL_TIM_ConfigClockSource+0x176>
 8005e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e5e:	d87f      	bhi.n	8005f60 <HAL_TIM_ConfigClockSource+0x170>
 8005e60:	2b70      	cmp	r3, #112	; 0x70
 8005e62:	d01a      	beq.n	8005e9a <HAL_TIM_ConfigClockSource+0xaa>
 8005e64:	2b70      	cmp	r3, #112	; 0x70
 8005e66:	d87b      	bhi.n	8005f60 <HAL_TIM_ConfigClockSource+0x170>
 8005e68:	2b60      	cmp	r3, #96	; 0x60
 8005e6a:	d050      	beq.n	8005f0e <HAL_TIM_ConfigClockSource+0x11e>
 8005e6c:	2b60      	cmp	r3, #96	; 0x60
 8005e6e:	d877      	bhi.n	8005f60 <HAL_TIM_ConfigClockSource+0x170>
 8005e70:	2b50      	cmp	r3, #80	; 0x50
 8005e72:	d03c      	beq.n	8005eee <HAL_TIM_ConfigClockSource+0xfe>
 8005e74:	2b50      	cmp	r3, #80	; 0x50
 8005e76:	d873      	bhi.n	8005f60 <HAL_TIM_ConfigClockSource+0x170>
 8005e78:	2b40      	cmp	r3, #64	; 0x40
 8005e7a:	d058      	beq.n	8005f2e <HAL_TIM_ConfigClockSource+0x13e>
 8005e7c:	2b40      	cmp	r3, #64	; 0x40
 8005e7e:	d86f      	bhi.n	8005f60 <HAL_TIM_ConfigClockSource+0x170>
 8005e80:	2b30      	cmp	r3, #48	; 0x30
 8005e82:	d064      	beq.n	8005f4e <HAL_TIM_ConfigClockSource+0x15e>
 8005e84:	2b30      	cmp	r3, #48	; 0x30
 8005e86:	d86b      	bhi.n	8005f60 <HAL_TIM_ConfigClockSource+0x170>
 8005e88:	2b20      	cmp	r3, #32
 8005e8a:	d060      	beq.n	8005f4e <HAL_TIM_ConfigClockSource+0x15e>
 8005e8c:	2b20      	cmp	r3, #32
 8005e8e:	d867      	bhi.n	8005f60 <HAL_TIM_ConfigClockSource+0x170>
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d05c      	beq.n	8005f4e <HAL_TIM_ConfigClockSource+0x15e>
 8005e94:	2b10      	cmp	r3, #16
 8005e96:	d05a      	beq.n	8005f4e <HAL_TIM_ConfigClockSource+0x15e>
 8005e98:	e062      	b.n	8005f60 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005eaa:	f000 fe0f 	bl	8006acc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ebc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	609a      	str	r2, [r3, #8]
      break;
 8005ec6:	e04f      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ed8:	f000 fdf8 	bl	8006acc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689a      	ldr	r2, [r3, #8]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005eea:	609a      	str	r2, [r3, #8]
      break;
 8005eec:	e03c      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005efa:	461a      	mov	r2, r3
 8005efc:	f000 fcb6 	bl	800686c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2150      	movs	r1, #80	; 0x50
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 fdc5 	bl	8006a96 <TIM_ITRx_SetConfig>
      break;
 8005f0c:	e02c      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	f000 fd12 	bl	8006944 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2160      	movs	r1, #96	; 0x60
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 fdb5 	bl	8006a96 <TIM_ITRx_SetConfig>
      break;
 8005f2c:	e01c      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	f000 fc96 	bl	800686c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2140      	movs	r1, #64	; 0x40
 8005f46:	4618      	mov	r0, r3
 8005f48:	f000 fda5 	bl	8006a96 <TIM_ITRx_SetConfig>
      break;
 8005f4c:	e00c      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4619      	mov	r1, r3
 8005f58:	4610      	mov	r0, r2
 8005f5a:	f000 fd9c 	bl	8006a96 <TIM_ITRx_SetConfig>
      break;
 8005f5e:	e003      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	73fb      	strb	r3, [r7, #15]
      break;
 8005f64:	e000      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005f66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
	...

08005f84 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	2b0c      	cmp	r3, #12
 8005f96:	d831      	bhi.n	8005ffc <HAL_TIM_ReadCapturedValue+0x78>
 8005f98:	a201      	add	r2, pc, #4	; (adr r2, 8005fa0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9e:	bf00      	nop
 8005fa0:	08005fd5 	.word	0x08005fd5
 8005fa4:	08005ffd 	.word	0x08005ffd
 8005fa8:	08005ffd 	.word	0x08005ffd
 8005fac:	08005ffd 	.word	0x08005ffd
 8005fb0:	08005fdf 	.word	0x08005fdf
 8005fb4:	08005ffd 	.word	0x08005ffd
 8005fb8:	08005ffd 	.word	0x08005ffd
 8005fbc:	08005ffd 	.word	0x08005ffd
 8005fc0:	08005fe9 	.word	0x08005fe9
 8005fc4:	08005ffd 	.word	0x08005ffd
 8005fc8:	08005ffd 	.word	0x08005ffd
 8005fcc:	08005ffd 	.word	0x08005ffd
 8005fd0:	08005ff3 	.word	0x08005ff3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fda:	60fb      	str	r3, [r7, #12]

      break;
 8005fdc:	e00f      	b.n	8005ffe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe4:	60fb      	str	r3, [r7, #12]

      break;
 8005fe6:	e00a      	b.n	8005ffe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fee:	60fb      	str	r3, [r7, #12]

      break;
 8005ff0:	e005      	b.n	8005ffe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff8:	60fb      	str	r3, [r7, #12]

      break;
 8005ffa:	e000      	b.n	8005ffe <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005ffc:	bf00      	nop
  }

  return tmpreg;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a42      	ldr	r2, [pc, #264]	; (8006164 <TIM_Base_SetConfig+0x11c>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d013      	beq.n	8006088 <TIM_Base_SetConfig+0x40>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006066:	d00f      	beq.n	8006088 <TIM_Base_SetConfig+0x40>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a3f      	ldr	r2, [pc, #252]	; (8006168 <TIM_Base_SetConfig+0x120>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d00b      	beq.n	8006088 <TIM_Base_SetConfig+0x40>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a3e      	ldr	r2, [pc, #248]	; (800616c <TIM_Base_SetConfig+0x124>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d007      	beq.n	8006088 <TIM_Base_SetConfig+0x40>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a3d      	ldr	r2, [pc, #244]	; (8006170 <TIM_Base_SetConfig+0x128>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d003      	beq.n	8006088 <TIM_Base_SetConfig+0x40>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a3c      	ldr	r2, [pc, #240]	; (8006174 <TIM_Base_SetConfig+0x12c>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d108      	bne.n	800609a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800608e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	4313      	orrs	r3, r2
 8006098:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a31      	ldr	r2, [pc, #196]	; (8006164 <TIM_Base_SetConfig+0x11c>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d01f      	beq.n	80060e2 <TIM_Base_SetConfig+0x9a>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060a8:	d01b      	beq.n	80060e2 <TIM_Base_SetConfig+0x9a>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a2e      	ldr	r2, [pc, #184]	; (8006168 <TIM_Base_SetConfig+0x120>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d017      	beq.n	80060e2 <TIM_Base_SetConfig+0x9a>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a2d      	ldr	r2, [pc, #180]	; (800616c <TIM_Base_SetConfig+0x124>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d013      	beq.n	80060e2 <TIM_Base_SetConfig+0x9a>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a2c      	ldr	r2, [pc, #176]	; (8006170 <TIM_Base_SetConfig+0x128>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d00f      	beq.n	80060e2 <TIM_Base_SetConfig+0x9a>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a2c      	ldr	r2, [pc, #176]	; (8006178 <TIM_Base_SetConfig+0x130>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d00b      	beq.n	80060e2 <TIM_Base_SetConfig+0x9a>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a2b      	ldr	r2, [pc, #172]	; (800617c <TIM_Base_SetConfig+0x134>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d007      	beq.n	80060e2 <TIM_Base_SetConfig+0x9a>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a2a      	ldr	r2, [pc, #168]	; (8006180 <TIM_Base_SetConfig+0x138>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d003      	beq.n	80060e2 <TIM_Base_SetConfig+0x9a>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a25      	ldr	r2, [pc, #148]	; (8006174 <TIM_Base_SetConfig+0x12c>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d108      	bne.n	80060f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	4313      	orrs	r3, r2
 8006100:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a12      	ldr	r2, [pc, #72]	; (8006164 <TIM_Base_SetConfig+0x11c>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d013      	beq.n	8006148 <TIM_Base_SetConfig+0x100>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a13      	ldr	r2, [pc, #76]	; (8006170 <TIM_Base_SetConfig+0x128>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d00f      	beq.n	8006148 <TIM_Base_SetConfig+0x100>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a13      	ldr	r2, [pc, #76]	; (8006178 <TIM_Base_SetConfig+0x130>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d00b      	beq.n	8006148 <TIM_Base_SetConfig+0x100>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a12      	ldr	r2, [pc, #72]	; (800617c <TIM_Base_SetConfig+0x134>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d007      	beq.n	8006148 <TIM_Base_SetConfig+0x100>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a11      	ldr	r2, [pc, #68]	; (8006180 <TIM_Base_SetConfig+0x138>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d003      	beq.n	8006148 <TIM_Base_SetConfig+0x100>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a0c      	ldr	r2, [pc, #48]	; (8006174 <TIM_Base_SetConfig+0x12c>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d103      	bne.n	8006150 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	691a      	ldr	r2, [r3, #16]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	615a      	str	r2, [r3, #20]
}
 8006156:	bf00      	nop
 8006158:	3714      	adds	r7, #20
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	40012c00 	.word	0x40012c00
 8006168:	40000400 	.word	0x40000400
 800616c:	40000800 	.word	0x40000800
 8006170:	40013400 	.word	0x40013400
 8006174:	40015000 	.word	0x40015000
 8006178:	40014000 	.word	0x40014000
 800617c:	40014400 	.word	0x40014400
 8006180:	40014800 	.word	0x40014800

08006184 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006184:	b480      	push	{r7}
 8006186:	b087      	sub	sp, #28
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	f023 0201 	bic.w	r2, r3, #1
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f023 0303 	bic.w	r3, r3, #3
 80061be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f023 0302 	bic.w	r3, r3, #2
 80061d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	4313      	orrs	r3, r2
 80061da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a30      	ldr	r2, [pc, #192]	; (80062a0 <TIM_OC1_SetConfig+0x11c>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d013      	beq.n	800620c <TIM_OC1_SetConfig+0x88>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a2f      	ldr	r2, [pc, #188]	; (80062a4 <TIM_OC1_SetConfig+0x120>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d00f      	beq.n	800620c <TIM_OC1_SetConfig+0x88>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a2e      	ldr	r2, [pc, #184]	; (80062a8 <TIM_OC1_SetConfig+0x124>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d00b      	beq.n	800620c <TIM_OC1_SetConfig+0x88>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a2d      	ldr	r2, [pc, #180]	; (80062ac <TIM_OC1_SetConfig+0x128>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d007      	beq.n	800620c <TIM_OC1_SetConfig+0x88>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a2c      	ldr	r2, [pc, #176]	; (80062b0 <TIM_OC1_SetConfig+0x12c>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d003      	beq.n	800620c <TIM_OC1_SetConfig+0x88>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a2b      	ldr	r2, [pc, #172]	; (80062b4 <TIM_OC1_SetConfig+0x130>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d10c      	bne.n	8006226 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	f023 0308 	bic.w	r3, r3, #8
 8006212:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	4313      	orrs	r3, r2
 800621c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f023 0304 	bic.w	r3, r3, #4
 8006224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a1d      	ldr	r2, [pc, #116]	; (80062a0 <TIM_OC1_SetConfig+0x11c>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d013      	beq.n	8006256 <TIM_OC1_SetConfig+0xd2>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a1c      	ldr	r2, [pc, #112]	; (80062a4 <TIM_OC1_SetConfig+0x120>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d00f      	beq.n	8006256 <TIM_OC1_SetConfig+0xd2>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a1b      	ldr	r2, [pc, #108]	; (80062a8 <TIM_OC1_SetConfig+0x124>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d00b      	beq.n	8006256 <TIM_OC1_SetConfig+0xd2>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a1a      	ldr	r2, [pc, #104]	; (80062ac <TIM_OC1_SetConfig+0x128>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d007      	beq.n	8006256 <TIM_OC1_SetConfig+0xd2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a19      	ldr	r2, [pc, #100]	; (80062b0 <TIM_OC1_SetConfig+0x12c>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d003      	beq.n	8006256 <TIM_OC1_SetConfig+0xd2>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a18      	ldr	r2, [pc, #96]	; (80062b4 <TIM_OC1_SetConfig+0x130>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d111      	bne.n	800627a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800625c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006264:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	4313      	orrs	r3, r2
 800626e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	4313      	orrs	r3, r2
 8006278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	621a      	str	r2, [r3, #32]
}
 8006294:	bf00      	nop
 8006296:	371c      	adds	r7, #28
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr
 80062a0:	40012c00 	.word	0x40012c00
 80062a4:	40013400 	.word	0x40013400
 80062a8:	40014000 	.word	0x40014000
 80062ac:	40014400 	.word	0x40014400
 80062b0:	40014800 	.word	0x40014800
 80062b4:	40015000 	.word	0x40015000

080062b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b087      	sub	sp, #28
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	f023 0210 	bic.w	r2, r3, #16
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	021b      	lsls	r3, r3, #8
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f023 0320 	bic.w	r3, r3, #32
 8006306:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	011b      	lsls	r3, r3, #4
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	4313      	orrs	r3, r2
 8006312:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a2c      	ldr	r2, [pc, #176]	; (80063c8 <TIM_OC2_SetConfig+0x110>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d007      	beq.n	800632c <TIM_OC2_SetConfig+0x74>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a2b      	ldr	r2, [pc, #172]	; (80063cc <TIM_OC2_SetConfig+0x114>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d003      	beq.n	800632c <TIM_OC2_SetConfig+0x74>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a2a      	ldr	r2, [pc, #168]	; (80063d0 <TIM_OC2_SetConfig+0x118>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d10d      	bne.n	8006348 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006332:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	011b      	lsls	r3, r3, #4
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	4313      	orrs	r3, r2
 800633e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006346:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a1f      	ldr	r2, [pc, #124]	; (80063c8 <TIM_OC2_SetConfig+0x110>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d013      	beq.n	8006378 <TIM_OC2_SetConfig+0xc0>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a1e      	ldr	r2, [pc, #120]	; (80063cc <TIM_OC2_SetConfig+0x114>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d00f      	beq.n	8006378 <TIM_OC2_SetConfig+0xc0>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a1e      	ldr	r2, [pc, #120]	; (80063d4 <TIM_OC2_SetConfig+0x11c>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d00b      	beq.n	8006378 <TIM_OC2_SetConfig+0xc0>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a1d      	ldr	r2, [pc, #116]	; (80063d8 <TIM_OC2_SetConfig+0x120>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d007      	beq.n	8006378 <TIM_OC2_SetConfig+0xc0>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a1c      	ldr	r2, [pc, #112]	; (80063dc <TIM_OC2_SetConfig+0x124>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d003      	beq.n	8006378 <TIM_OC2_SetConfig+0xc0>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a17      	ldr	r2, [pc, #92]	; (80063d0 <TIM_OC2_SetConfig+0x118>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d113      	bne.n	80063a0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800637e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006386:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	695b      	ldr	r3, [r3, #20]
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	4313      	orrs	r3, r2
 8006392:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	4313      	orrs	r3, r2
 800639e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	685a      	ldr	r2, [r3, #4]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	621a      	str	r2, [r3, #32]
}
 80063ba:	bf00      	nop
 80063bc:	371c      	adds	r7, #28
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	40012c00 	.word	0x40012c00
 80063cc:	40013400 	.word	0x40013400
 80063d0:	40015000 	.word	0x40015000
 80063d4:	40014000 	.word	0x40014000
 80063d8:	40014400 	.word	0x40014400
 80063dc:	40014800 	.word	0x40014800

080063e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b087      	sub	sp, #28
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a1b      	ldr	r3, [r3, #32]
 80063ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	69db      	ldr	r3, [r3, #28]
 8006406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800640e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f023 0303 	bic.w	r3, r3, #3
 800641a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	4313      	orrs	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800642c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	021b      	lsls	r3, r3, #8
 8006434:	697a      	ldr	r2, [r7, #20]
 8006436:	4313      	orrs	r3, r2
 8006438:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a2b      	ldr	r2, [pc, #172]	; (80064ec <TIM_OC3_SetConfig+0x10c>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d007      	beq.n	8006452 <TIM_OC3_SetConfig+0x72>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a2a      	ldr	r2, [pc, #168]	; (80064f0 <TIM_OC3_SetConfig+0x110>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d003      	beq.n	8006452 <TIM_OC3_SetConfig+0x72>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a29      	ldr	r2, [pc, #164]	; (80064f4 <TIM_OC3_SetConfig+0x114>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d10d      	bne.n	800646e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006458:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	021b      	lsls	r3, r3, #8
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	4313      	orrs	r3, r2
 8006464:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800646c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a1e      	ldr	r2, [pc, #120]	; (80064ec <TIM_OC3_SetConfig+0x10c>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d013      	beq.n	800649e <TIM_OC3_SetConfig+0xbe>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a1d      	ldr	r2, [pc, #116]	; (80064f0 <TIM_OC3_SetConfig+0x110>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d00f      	beq.n	800649e <TIM_OC3_SetConfig+0xbe>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a1d      	ldr	r2, [pc, #116]	; (80064f8 <TIM_OC3_SetConfig+0x118>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d00b      	beq.n	800649e <TIM_OC3_SetConfig+0xbe>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a1c      	ldr	r2, [pc, #112]	; (80064fc <TIM_OC3_SetConfig+0x11c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d007      	beq.n	800649e <TIM_OC3_SetConfig+0xbe>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a1b      	ldr	r2, [pc, #108]	; (8006500 <TIM_OC3_SetConfig+0x120>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d003      	beq.n	800649e <TIM_OC3_SetConfig+0xbe>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a16      	ldr	r2, [pc, #88]	; (80064f4 <TIM_OC3_SetConfig+0x114>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d113      	bne.n	80064c6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	011b      	lsls	r3, r3, #4
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	011b      	lsls	r3, r3, #4
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	685a      	ldr	r2, [r3, #4]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	621a      	str	r2, [r3, #32]
}
 80064e0:	bf00      	nop
 80064e2:	371c      	adds	r7, #28
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr
 80064ec:	40012c00 	.word	0x40012c00
 80064f0:	40013400 	.word	0x40013400
 80064f4:	40015000 	.word	0x40015000
 80064f8:	40014000 	.word	0x40014000
 80064fc:	40014400 	.word	0x40014400
 8006500:	40014800 	.word	0x40014800

08006504 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006504:	b480      	push	{r7}
 8006506:	b087      	sub	sp, #28
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800653e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	021b      	lsls	r3, r3, #8
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	4313      	orrs	r3, r2
 800654a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006552:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	031b      	lsls	r3, r3, #12
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	4313      	orrs	r3, r2
 800655e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a1a      	ldr	r2, [pc, #104]	; (80065cc <TIM_OC4_SetConfig+0xc8>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d013      	beq.n	8006590 <TIM_OC4_SetConfig+0x8c>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a19      	ldr	r2, [pc, #100]	; (80065d0 <TIM_OC4_SetConfig+0xcc>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d00f      	beq.n	8006590 <TIM_OC4_SetConfig+0x8c>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a18      	ldr	r2, [pc, #96]	; (80065d4 <TIM_OC4_SetConfig+0xd0>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d00b      	beq.n	8006590 <TIM_OC4_SetConfig+0x8c>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a17      	ldr	r2, [pc, #92]	; (80065d8 <TIM_OC4_SetConfig+0xd4>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d007      	beq.n	8006590 <TIM_OC4_SetConfig+0x8c>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a16      	ldr	r2, [pc, #88]	; (80065dc <TIM_OC4_SetConfig+0xd8>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d003      	beq.n	8006590 <TIM_OC4_SetConfig+0x8c>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a15      	ldr	r2, [pc, #84]	; (80065e0 <TIM_OC4_SetConfig+0xdc>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d109      	bne.n	80065a4 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006596:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	019b      	lsls	r3, r3, #6
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	621a      	str	r2, [r3, #32]
}
 80065be:	bf00      	nop
 80065c0:	371c      	adds	r7, #28
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	40012c00 	.word	0x40012c00
 80065d0:	40013400 	.word	0x40013400
 80065d4:	40014000 	.word	0x40014000
 80065d8:	40014400 	.word	0x40014400
 80065dc:	40014800 	.word	0x40014800
 80065e0:	40015000 	.word	0x40015000

080065e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b087      	sub	sp, #28
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800660a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	4313      	orrs	r3, r2
 8006620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006628:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	041b      	lsls	r3, r3, #16
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	4313      	orrs	r3, r2
 8006634:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a19      	ldr	r2, [pc, #100]	; (80066a0 <TIM_OC5_SetConfig+0xbc>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d013      	beq.n	8006666 <TIM_OC5_SetConfig+0x82>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a18      	ldr	r2, [pc, #96]	; (80066a4 <TIM_OC5_SetConfig+0xc0>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d00f      	beq.n	8006666 <TIM_OC5_SetConfig+0x82>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a17      	ldr	r2, [pc, #92]	; (80066a8 <TIM_OC5_SetConfig+0xc4>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d00b      	beq.n	8006666 <TIM_OC5_SetConfig+0x82>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a16      	ldr	r2, [pc, #88]	; (80066ac <TIM_OC5_SetConfig+0xc8>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d007      	beq.n	8006666 <TIM_OC5_SetConfig+0x82>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a15      	ldr	r2, [pc, #84]	; (80066b0 <TIM_OC5_SetConfig+0xcc>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d003      	beq.n	8006666 <TIM_OC5_SetConfig+0x82>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a14      	ldr	r2, [pc, #80]	; (80066b4 <TIM_OC5_SetConfig+0xd0>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d109      	bne.n	800667a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800666c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	021b      	lsls	r3, r3, #8
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	4313      	orrs	r3, r2
 8006678:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	685a      	ldr	r2, [r3, #4]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	621a      	str	r2, [r3, #32]
}
 8006694:	bf00      	nop
 8006696:	371c      	adds	r7, #28
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr
 80066a0:	40012c00 	.word	0x40012c00
 80066a4:	40013400 	.word	0x40013400
 80066a8:	40014000 	.word	0x40014000
 80066ac:	40014400 	.word	0x40014400
 80066b0:	40014800 	.word	0x40014800
 80066b4:	40015000 	.word	0x40015000

080066b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b087      	sub	sp, #28
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	021b      	lsls	r3, r3, #8
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	051b      	lsls	r3, r3, #20
 8006706:	693a      	ldr	r2, [r7, #16]
 8006708:	4313      	orrs	r3, r2
 800670a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a1a      	ldr	r2, [pc, #104]	; (8006778 <TIM_OC6_SetConfig+0xc0>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d013      	beq.n	800673c <TIM_OC6_SetConfig+0x84>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a19      	ldr	r2, [pc, #100]	; (800677c <TIM_OC6_SetConfig+0xc4>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d00f      	beq.n	800673c <TIM_OC6_SetConfig+0x84>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a18      	ldr	r2, [pc, #96]	; (8006780 <TIM_OC6_SetConfig+0xc8>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d00b      	beq.n	800673c <TIM_OC6_SetConfig+0x84>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a17      	ldr	r2, [pc, #92]	; (8006784 <TIM_OC6_SetConfig+0xcc>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d007      	beq.n	800673c <TIM_OC6_SetConfig+0x84>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a16      	ldr	r2, [pc, #88]	; (8006788 <TIM_OC6_SetConfig+0xd0>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d003      	beq.n	800673c <TIM_OC6_SetConfig+0x84>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a15      	ldr	r2, [pc, #84]	; (800678c <TIM_OC6_SetConfig+0xd4>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d109      	bne.n	8006750 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006742:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	695b      	ldr	r3, [r3, #20]
 8006748:	029b      	lsls	r3, r3, #10
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	4313      	orrs	r3, r2
 800674e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	685a      	ldr	r2, [r3, #4]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	621a      	str	r2, [r3, #32]
}
 800676a:	bf00      	nop
 800676c:	371c      	adds	r7, #28
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	40012c00 	.word	0x40012c00
 800677c:	40013400 	.word	0x40013400
 8006780:	40014000 	.word	0x40014000
 8006784:	40014400 	.word	0x40014400
 8006788:	40014800 	.word	0x40014800
 800678c:	40015000 	.word	0x40015000

08006790 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006790:	b480      	push	{r7}
 8006792:	b087      	sub	sp, #28
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
 800679c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	f023 0201 	bic.w	r2, r3, #1
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	4a26      	ldr	r2, [pc, #152]	; (8006854 <TIM_TI1_SetConfig+0xc4>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d017      	beq.n	80067ee <TIM_TI1_SetConfig+0x5e>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067c4:	d013      	beq.n	80067ee <TIM_TI1_SetConfig+0x5e>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	4a23      	ldr	r2, [pc, #140]	; (8006858 <TIM_TI1_SetConfig+0xc8>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d00f      	beq.n	80067ee <TIM_TI1_SetConfig+0x5e>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	4a22      	ldr	r2, [pc, #136]	; (800685c <TIM_TI1_SetConfig+0xcc>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d00b      	beq.n	80067ee <TIM_TI1_SetConfig+0x5e>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	4a21      	ldr	r2, [pc, #132]	; (8006860 <TIM_TI1_SetConfig+0xd0>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d007      	beq.n	80067ee <TIM_TI1_SetConfig+0x5e>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	4a20      	ldr	r2, [pc, #128]	; (8006864 <TIM_TI1_SetConfig+0xd4>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d003      	beq.n	80067ee <TIM_TI1_SetConfig+0x5e>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	4a1f      	ldr	r2, [pc, #124]	; (8006868 <TIM_TI1_SetConfig+0xd8>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d101      	bne.n	80067f2 <TIM_TI1_SetConfig+0x62>
 80067ee:	2301      	movs	r3, #1
 80067f0:	e000      	b.n	80067f4 <TIM_TI1_SetConfig+0x64>
 80067f2:	2300      	movs	r3, #0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d008      	beq.n	800680a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	f023 0303 	bic.w	r3, r3, #3
 80067fe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006800:	697a      	ldr	r2, [r7, #20]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4313      	orrs	r3, r2
 8006806:	617b      	str	r3, [r7, #20]
 8006808:	e003      	b.n	8006812 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	f043 0301 	orr.w	r3, r3, #1
 8006810:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006818:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	011b      	lsls	r3, r3, #4
 800681e:	b2db      	uxtb	r3, r3
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	4313      	orrs	r3, r2
 8006824:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	f023 030a 	bic.w	r3, r3, #10
 800682c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	f003 030a 	and.w	r3, r3, #10
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	4313      	orrs	r3, r2
 8006838:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	621a      	str	r2, [r3, #32]
}
 8006846:	bf00      	nop
 8006848:	371c      	adds	r7, #28
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	40012c00 	.word	0x40012c00
 8006858:	40000400 	.word	0x40000400
 800685c:	40000800 	.word	0x40000800
 8006860:	40013400 	.word	0x40013400
 8006864:	40014000 	.word	0x40014000
 8006868:	40015000 	.word	0x40015000

0800686c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800686c:	b480      	push	{r7}
 800686e:	b087      	sub	sp, #28
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6a1b      	ldr	r3, [r3, #32]
 800687c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	f023 0201 	bic.w	r2, r3, #1
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	011b      	lsls	r3, r3, #4
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	4313      	orrs	r3, r2
 80068a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	f023 030a 	bic.w	r3, r3, #10
 80068a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	621a      	str	r2, [r3, #32]
}
 80068be:	bf00      	nop
 80068c0:	371c      	adds	r7, #28
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b087      	sub	sp, #28
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	60f8      	str	r0, [r7, #12]
 80068d2:	60b9      	str	r1, [r7, #8]
 80068d4:	607a      	str	r2, [r7, #4]
 80068d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6a1b      	ldr	r3, [r3, #32]
 80068dc:	f023 0210 	bic.w	r2, r3, #16
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	021b      	lsls	r3, r3, #8
 80068fc:	697a      	ldr	r2, [r7, #20]
 80068fe:	4313      	orrs	r3, r2
 8006900:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006908:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	031b      	lsls	r3, r3, #12
 800690e:	b29b      	uxth	r3, r3
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	4313      	orrs	r3, r2
 8006914:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800691c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	011b      	lsls	r3, r3, #4
 8006922:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006926:	693a      	ldr	r2, [r7, #16]
 8006928:	4313      	orrs	r3, r2
 800692a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	621a      	str	r2, [r3, #32]
}
 8006938:	bf00      	nop
 800693a:	371c      	adds	r7, #28
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006944:	b480      	push	{r7}
 8006946:	b087      	sub	sp, #28
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6a1b      	ldr	r3, [r3, #32]
 8006954:	f023 0210 	bic.w	r2, r3, #16
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6a1b      	ldr	r3, [r3, #32]
 8006966:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800696e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	031b      	lsls	r3, r3, #12
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	4313      	orrs	r3, r2
 8006978:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006980:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	011b      	lsls	r3, r3, #4
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	4313      	orrs	r3, r2
 800698a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	621a      	str	r2, [r3, #32]
}
 8006998:	bf00      	nop
 800699a:	371c      	adds	r7, #28
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b087      	sub	sp, #28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
 80069b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6a1b      	ldr	r3, [r3, #32]
 80069c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	f023 0303 	bic.w	r3, r3, #3
 80069d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	011b      	lsls	r3, r3, #4
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80069f4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	021b      	lsls	r3, r3, #8
 80069fa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	621a      	str	r2, [r3, #32]
}
 8006a10:	bf00      	nop
 8006a12:	371c      	adds	r7, #28
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b087      	sub	sp, #28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
 8006a28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	69db      	ldr	r3, [r3, #28]
 8006a3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6a1b      	ldr	r3, [r3, #32]
 8006a40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a48:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	021b      	lsls	r3, r3, #8
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a5a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	031b      	lsls	r3, r3, #12
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006a6e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	031b      	lsls	r3, r3, #12
 8006a74:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	621a      	str	r2, [r3, #32]
}
 8006a8a:	bf00      	nop
 8006a8c:	371c      	adds	r7, #28
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr

08006a96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a96:	b480      	push	{r7}
 8006a98:	b085      	sub	sp, #20
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
 8006a9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006aae:	683a      	ldr	r2, [r7, #0]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	f043 0307 	orr.w	r3, r3, #7
 8006ab8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	609a      	str	r2, [r3, #8]
}
 8006ac0:	bf00      	nop
 8006ac2:	3714      	adds	r7, #20
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b087      	sub	sp, #28
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	607a      	str	r2, [r7, #4]
 8006ad8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ae6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	021a      	lsls	r2, r3, #8
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	431a      	orrs	r2, r3
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	609a      	str	r2, [r3, #8]
}
 8006b00:	bf00      	nop
 8006b02:	371c      	adds	r7, #28
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	f003 031f 	and.w	r3, r3, #31
 8006b1e:	2201      	movs	r2, #1
 8006b20:	fa02 f303 	lsl.w	r3, r2, r3
 8006b24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6a1a      	ldr	r2, [r3, #32]
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	43db      	mvns	r3, r3
 8006b2e:	401a      	ands	r2, r3
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6a1a      	ldr	r2, [r3, #32]
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	f003 031f 	and.w	r3, r3, #31
 8006b3e:	6879      	ldr	r1, [r7, #4]
 8006b40:	fa01 f303 	lsl.w	r3, r1, r3
 8006b44:	431a      	orrs	r2, r3
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	621a      	str	r2, [r3, #32]
}
 8006b4a:	bf00      	nop
 8006b4c:	371c      	adds	r7, #28
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
	...

08006b58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d101      	bne.n	8006b70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	e06d      	b.n	8006c4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a30      	ldr	r2, [pc, #192]	; (8006c58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d009      	beq.n	8006bae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a2f      	ldr	r2, [pc, #188]	; (8006c5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d004      	beq.n	8006bae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a2d      	ldr	r2, [pc, #180]	; (8006c60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d108      	bne.n	8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006bb4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a1e      	ldr	r2, [pc, #120]	; (8006c58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d01d      	beq.n	8006c20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bec:	d018      	beq.n	8006c20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a1c      	ldr	r2, [pc, #112]	; (8006c64 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d013      	beq.n	8006c20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a1a      	ldr	r2, [pc, #104]	; (8006c68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d00e      	beq.n	8006c20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a15      	ldr	r2, [pc, #84]	; (8006c5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d009      	beq.n	8006c20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a16      	ldr	r2, [pc, #88]	; (8006c6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d004      	beq.n	8006c20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a11      	ldr	r2, [pc, #68]	; (8006c60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d10c      	bne.n	8006c3a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3714      	adds	r7, #20
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr
 8006c58:	40012c00 	.word	0x40012c00
 8006c5c:	40013400 	.word	0x40013400
 8006c60:	40015000 	.word	0x40015000
 8006c64:	40000400 	.word	0x40000400
 8006c68:	40000800 	.word	0x40000800
 8006c6c:	40014000 	.word	0x40014000

08006c70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c78:	bf00      	nop
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d101      	bne.n	8006cbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e040      	b.n	8006d40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d106      	bne.n	8006cd4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f7fb f8b2 	bl	8001e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2224      	movs	r2, #36	; 0x24
 8006cd8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f022 0201 	bic.w	r2, r2, #1
 8006ce8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 f8f6 	bl	8006edc <UART_SetConfig>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d101      	bne.n	8006cfa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e022      	b.n	8006d40 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d002      	beq.n	8006d08 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 fabe 	bl	8007284 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	685a      	ldr	r2, [r3, #4]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	689a      	ldr	r2, [r3, #8]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f042 0201 	orr.w	r2, r2, #1
 8006d36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 fb45 	bl	80073c8 <UART_CheckIdleState>
 8006d3e:	4603      	mov	r3, r0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3708      	adds	r7, #8
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b08a      	sub	sp, #40	; 0x28
 8006d4c:	af02      	add	r7, sp, #8
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	603b      	str	r3, [r7, #0]
 8006d54:	4613      	mov	r3, r2
 8006d56:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d5e:	2b20      	cmp	r3, #32
 8006d60:	f040 80b6 	bne.w	8006ed0 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d002      	beq.n	8006d70 <HAL_UART_Receive+0x28>
 8006d6a:	88fb      	ldrh	r3, [r7, #6]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d101      	bne.n	8006d74 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e0ae      	b.n	8006ed2 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2222      	movs	r2, #34	; 0x22
 8006d80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d8a:	f7fb f91d 	bl	8001fc8 <HAL_GetTick>
 8006d8e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	88fa      	ldrh	r2, [r7, #6]
 8006d94:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	88fa      	ldrh	r2, [r7, #6]
 8006d9c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006da8:	d10e      	bne.n	8006dc8 <HAL_UART_Receive+0x80>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d105      	bne.n	8006dbe <HAL_UART_Receive+0x76>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006db8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006dbc:	e02d      	b.n	8006e1a <HAL_UART_Receive+0xd2>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	22ff      	movs	r2, #255	; 0xff
 8006dc2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006dc6:	e028      	b.n	8006e1a <HAL_UART_Receive+0xd2>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d10d      	bne.n	8006dec <HAL_UART_Receive+0xa4>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d104      	bne.n	8006de2 <HAL_UART_Receive+0x9a>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	22ff      	movs	r2, #255	; 0xff
 8006ddc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006de0:	e01b      	b.n	8006e1a <HAL_UART_Receive+0xd2>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	227f      	movs	r2, #127	; 0x7f
 8006de6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006dea:	e016      	b.n	8006e1a <HAL_UART_Receive+0xd2>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006df4:	d10d      	bne.n	8006e12 <HAL_UART_Receive+0xca>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d104      	bne.n	8006e08 <HAL_UART_Receive+0xc0>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	227f      	movs	r2, #127	; 0x7f
 8006e02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e06:	e008      	b.n	8006e1a <HAL_UART_Receive+0xd2>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	223f      	movs	r2, #63	; 0x3f
 8006e0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e10:	e003      	b.n	8006e1a <HAL_UART_Receive+0xd2>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e20:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e2a:	d108      	bne.n	8006e3e <HAL_UART_Receive+0xf6>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d104      	bne.n	8006e3e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006e34:	2300      	movs	r3, #0
 8006e36:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	61bb      	str	r3, [r7, #24]
 8006e3c:	e003      	b.n	8006e46 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e42:	2300      	movs	r3, #0
 8006e44:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006e46:	e037      	b.n	8006eb8 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	9300      	str	r3, [sp, #0]
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	2120      	movs	r1, #32
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f000 fb60 	bl	8007518 <UART_WaitOnFlagUntilTimeout>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d005      	beq.n	8006e6a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2220      	movs	r2, #32
 8006e62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e033      	b.n	8006ed2 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d10c      	bne.n	8006e8a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	8a7b      	ldrh	r3, [r7, #18]
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	3302      	adds	r3, #2
 8006e86:	61bb      	str	r3, [r7, #24]
 8006e88:	e00d      	b.n	8006ea6 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	b2da      	uxtb	r2, r3
 8006e94:	8a7b      	ldrh	r3, [r7, #18]
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	4013      	ands	r3, r2
 8006e9a:	b2da      	uxtb	r2, r3
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1c1      	bne.n	8006e48 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2220      	movs	r2, #32
 8006ec8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	e000      	b.n	8006ed2 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8006ed0:	2302      	movs	r3, #2
  }
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3720      	adds	r7, #32
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
	...

08006edc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b088      	sub	sp, #32
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	689a      	ldr	r2, [r3, #8]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	431a      	orrs	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	695b      	ldr	r3, [r3, #20]
 8006ef6:	431a      	orrs	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	69db      	ldr	r3, [r3, #28]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	4b92      	ldr	r3, [pc, #584]	; (8007150 <UART_SetConfig+0x274>)
 8006f08:	4013      	ands	r3, r2
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	6812      	ldr	r2, [r2, #0]
 8006f0e:	6979      	ldr	r1, [r7, #20]
 8006f10:	430b      	orrs	r3, r1
 8006f12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68da      	ldr	r2, [r3, #12]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	430a      	orrs	r2, r1
 8006f28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a1b      	ldr	r3, [r3, #32]
 8006f34:	697a      	ldr	r2, [r7, #20]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	697a      	ldr	r2, [r7, #20]
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a80      	ldr	r2, [pc, #512]	; (8007154 <UART_SetConfig+0x278>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d120      	bne.n	8006f9a <UART_SetConfig+0xbe>
 8006f58:	4b7f      	ldr	r3, [pc, #508]	; (8007158 <UART_SetConfig+0x27c>)
 8006f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f5c:	f003 0303 	and.w	r3, r3, #3
 8006f60:	2b03      	cmp	r3, #3
 8006f62:	d817      	bhi.n	8006f94 <UART_SetConfig+0xb8>
 8006f64:	a201      	add	r2, pc, #4	; (adr r2, 8006f6c <UART_SetConfig+0x90>)
 8006f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6a:	bf00      	nop
 8006f6c:	08006f7d 	.word	0x08006f7d
 8006f70:	08006f89 	.word	0x08006f89
 8006f74:	08006f8f 	.word	0x08006f8f
 8006f78:	08006f83 	.word	0x08006f83
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	77fb      	strb	r3, [r7, #31]
 8006f80:	e0b5      	b.n	80070ee <UART_SetConfig+0x212>
 8006f82:	2302      	movs	r3, #2
 8006f84:	77fb      	strb	r3, [r7, #31]
 8006f86:	e0b2      	b.n	80070ee <UART_SetConfig+0x212>
 8006f88:	2304      	movs	r3, #4
 8006f8a:	77fb      	strb	r3, [r7, #31]
 8006f8c:	e0af      	b.n	80070ee <UART_SetConfig+0x212>
 8006f8e:	2308      	movs	r3, #8
 8006f90:	77fb      	strb	r3, [r7, #31]
 8006f92:	e0ac      	b.n	80070ee <UART_SetConfig+0x212>
 8006f94:	2310      	movs	r3, #16
 8006f96:	77fb      	strb	r3, [r7, #31]
 8006f98:	e0a9      	b.n	80070ee <UART_SetConfig+0x212>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a6f      	ldr	r2, [pc, #444]	; (800715c <UART_SetConfig+0x280>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d124      	bne.n	8006fee <UART_SetConfig+0x112>
 8006fa4:	4b6c      	ldr	r3, [pc, #432]	; (8007158 <UART_SetConfig+0x27c>)
 8006fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006fac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006fb0:	d011      	beq.n	8006fd6 <UART_SetConfig+0xfa>
 8006fb2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006fb6:	d817      	bhi.n	8006fe8 <UART_SetConfig+0x10c>
 8006fb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fbc:	d011      	beq.n	8006fe2 <UART_SetConfig+0x106>
 8006fbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fc2:	d811      	bhi.n	8006fe8 <UART_SetConfig+0x10c>
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d003      	beq.n	8006fd0 <UART_SetConfig+0xf4>
 8006fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fcc:	d006      	beq.n	8006fdc <UART_SetConfig+0x100>
 8006fce:	e00b      	b.n	8006fe8 <UART_SetConfig+0x10c>
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	77fb      	strb	r3, [r7, #31]
 8006fd4:	e08b      	b.n	80070ee <UART_SetConfig+0x212>
 8006fd6:	2302      	movs	r3, #2
 8006fd8:	77fb      	strb	r3, [r7, #31]
 8006fda:	e088      	b.n	80070ee <UART_SetConfig+0x212>
 8006fdc:	2304      	movs	r3, #4
 8006fde:	77fb      	strb	r3, [r7, #31]
 8006fe0:	e085      	b.n	80070ee <UART_SetConfig+0x212>
 8006fe2:	2308      	movs	r3, #8
 8006fe4:	77fb      	strb	r3, [r7, #31]
 8006fe6:	e082      	b.n	80070ee <UART_SetConfig+0x212>
 8006fe8:	2310      	movs	r3, #16
 8006fea:	77fb      	strb	r3, [r7, #31]
 8006fec:	e07f      	b.n	80070ee <UART_SetConfig+0x212>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a5b      	ldr	r2, [pc, #364]	; (8007160 <UART_SetConfig+0x284>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d124      	bne.n	8007042 <UART_SetConfig+0x166>
 8006ff8:	4b57      	ldr	r3, [pc, #348]	; (8007158 <UART_SetConfig+0x27c>)
 8006ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ffc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007000:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007004:	d011      	beq.n	800702a <UART_SetConfig+0x14e>
 8007006:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800700a:	d817      	bhi.n	800703c <UART_SetConfig+0x160>
 800700c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007010:	d011      	beq.n	8007036 <UART_SetConfig+0x15a>
 8007012:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007016:	d811      	bhi.n	800703c <UART_SetConfig+0x160>
 8007018:	2b00      	cmp	r3, #0
 800701a:	d003      	beq.n	8007024 <UART_SetConfig+0x148>
 800701c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007020:	d006      	beq.n	8007030 <UART_SetConfig+0x154>
 8007022:	e00b      	b.n	800703c <UART_SetConfig+0x160>
 8007024:	2300      	movs	r3, #0
 8007026:	77fb      	strb	r3, [r7, #31]
 8007028:	e061      	b.n	80070ee <UART_SetConfig+0x212>
 800702a:	2302      	movs	r3, #2
 800702c:	77fb      	strb	r3, [r7, #31]
 800702e:	e05e      	b.n	80070ee <UART_SetConfig+0x212>
 8007030:	2304      	movs	r3, #4
 8007032:	77fb      	strb	r3, [r7, #31]
 8007034:	e05b      	b.n	80070ee <UART_SetConfig+0x212>
 8007036:	2308      	movs	r3, #8
 8007038:	77fb      	strb	r3, [r7, #31]
 800703a:	e058      	b.n	80070ee <UART_SetConfig+0x212>
 800703c:	2310      	movs	r3, #16
 800703e:	77fb      	strb	r3, [r7, #31]
 8007040:	e055      	b.n	80070ee <UART_SetConfig+0x212>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a47      	ldr	r2, [pc, #284]	; (8007164 <UART_SetConfig+0x288>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d124      	bne.n	8007096 <UART_SetConfig+0x1ba>
 800704c:	4b42      	ldr	r3, [pc, #264]	; (8007158 <UART_SetConfig+0x27c>)
 800704e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007050:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007054:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007058:	d011      	beq.n	800707e <UART_SetConfig+0x1a2>
 800705a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800705e:	d817      	bhi.n	8007090 <UART_SetConfig+0x1b4>
 8007060:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007064:	d011      	beq.n	800708a <UART_SetConfig+0x1ae>
 8007066:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800706a:	d811      	bhi.n	8007090 <UART_SetConfig+0x1b4>
 800706c:	2b00      	cmp	r3, #0
 800706e:	d003      	beq.n	8007078 <UART_SetConfig+0x19c>
 8007070:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007074:	d006      	beq.n	8007084 <UART_SetConfig+0x1a8>
 8007076:	e00b      	b.n	8007090 <UART_SetConfig+0x1b4>
 8007078:	2300      	movs	r3, #0
 800707a:	77fb      	strb	r3, [r7, #31]
 800707c:	e037      	b.n	80070ee <UART_SetConfig+0x212>
 800707e:	2302      	movs	r3, #2
 8007080:	77fb      	strb	r3, [r7, #31]
 8007082:	e034      	b.n	80070ee <UART_SetConfig+0x212>
 8007084:	2304      	movs	r3, #4
 8007086:	77fb      	strb	r3, [r7, #31]
 8007088:	e031      	b.n	80070ee <UART_SetConfig+0x212>
 800708a:	2308      	movs	r3, #8
 800708c:	77fb      	strb	r3, [r7, #31]
 800708e:	e02e      	b.n	80070ee <UART_SetConfig+0x212>
 8007090:	2310      	movs	r3, #16
 8007092:	77fb      	strb	r3, [r7, #31]
 8007094:	e02b      	b.n	80070ee <UART_SetConfig+0x212>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a33      	ldr	r2, [pc, #204]	; (8007168 <UART_SetConfig+0x28c>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d124      	bne.n	80070ea <UART_SetConfig+0x20e>
 80070a0:	4b2d      	ldr	r3, [pc, #180]	; (8007158 <UART_SetConfig+0x27c>)
 80070a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80070a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80070ac:	d011      	beq.n	80070d2 <UART_SetConfig+0x1f6>
 80070ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80070b2:	d817      	bhi.n	80070e4 <UART_SetConfig+0x208>
 80070b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070b8:	d011      	beq.n	80070de <UART_SetConfig+0x202>
 80070ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070be:	d811      	bhi.n	80070e4 <UART_SetConfig+0x208>
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d003      	beq.n	80070cc <UART_SetConfig+0x1f0>
 80070c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070c8:	d006      	beq.n	80070d8 <UART_SetConfig+0x1fc>
 80070ca:	e00b      	b.n	80070e4 <UART_SetConfig+0x208>
 80070cc:	2300      	movs	r3, #0
 80070ce:	77fb      	strb	r3, [r7, #31]
 80070d0:	e00d      	b.n	80070ee <UART_SetConfig+0x212>
 80070d2:	2302      	movs	r3, #2
 80070d4:	77fb      	strb	r3, [r7, #31]
 80070d6:	e00a      	b.n	80070ee <UART_SetConfig+0x212>
 80070d8:	2304      	movs	r3, #4
 80070da:	77fb      	strb	r3, [r7, #31]
 80070dc:	e007      	b.n	80070ee <UART_SetConfig+0x212>
 80070de:	2308      	movs	r3, #8
 80070e0:	77fb      	strb	r3, [r7, #31]
 80070e2:	e004      	b.n	80070ee <UART_SetConfig+0x212>
 80070e4:	2310      	movs	r3, #16
 80070e6:	77fb      	strb	r3, [r7, #31]
 80070e8:	e001      	b.n	80070ee <UART_SetConfig+0x212>
 80070ea:	2310      	movs	r3, #16
 80070ec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	69db      	ldr	r3, [r3, #28]
 80070f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070f6:	d16b      	bne.n	80071d0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80070f8:	7ffb      	ldrb	r3, [r7, #31]
 80070fa:	2b08      	cmp	r3, #8
 80070fc:	d838      	bhi.n	8007170 <UART_SetConfig+0x294>
 80070fe:	a201      	add	r2, pc, #4	; (adr r2, 8007104 <UART_SetConfig+0x228>)
 8007100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007104:	08007129 	.word	0x08007129
 8007108:	08007131 	.word	0x08007131
 800710c:	08007139 	.word	0x08007139
 8007110:	08007171 	.word	0x08007171
 8007114:	0800713f 	.word	0x0800713f
 8007118:	08007171 	.word	0x08007171
 800711c:	08007171 	.word	0x08007171
 8007120:	08007171 	.word	0x08007171
 8007124:	08007147 	.word	0x08007147
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007128:	f7fd fd1c 	bl	8004b64 <HAL_RCC_GetPCLK1Freq>
 800712c:	61b8      	str	r0, [r7, #24]
        break;
 800712e:	e024      	b.n	800717a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007130:	f7fd fd3a 	bl	8004ba8 <HAL_RCC_GetPCLK2Freq>
 8007134:	61b8      	str	r0, [r7, #24]
        break;
 8007136:	e020      	b.n	800717a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007138:	4b0c      	ldr	r3, [pc, #48]	; (800716c <UART_SetConfig+0x290>)
 800713a:	61bb      	str	r3, [r7, #24]
        break;
 800713c:	e01d      	b.n	800717a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800713e:	f7fd fc9b 	bl	8004a78 <HAL_RCC_GetSysClockFreq>
 8007142:	61b8      	str	r0, [r7, #24]
        break;
 8007144:	e019      	b.n	800717a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800714a:	61bb      	str	r3, [r7, #24]
        break;
 800714c:	e015      	b.n	800717a <UART_SetConfig+0x29e>
 800714e:	bf00      	nop
 8007150:	efff69f3 	.word	0xefff69f3
 8007154:	40013800 	.word	0x40013800
 8007158:	40021000 	.word	0x40021000
 800715c:	40004400 	.word	0x40004400
 8007160:	40004800 	.word	0x40004800
 8007164:	40004c00 	.word	0x40004c00
 8007168:	40005000 	.word	0x40005000
 800716c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8007170:	2300      	movs	r3, #0
 8007172:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	77bb      	strb	r3, [r7, #30]
        break;
 8007178:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d073      	beq.n	8007268 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	005a      	lsls	r2, r3, #1
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	085b      	lsrs	r3, r3, #1
 800718a:	441a      	add	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	fbb2 f3f3 	udiv	r3, r2, r3
 8007194:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	2b0f      	cmp	r3, #15
 800719a:	d916      	bls.n	80071ca <UART_SetConfig+0x2ee>
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071a2:	d212      	bcs.n	80071ca <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	f023 030f 	bic.w	r3, r3, #15
 80071ac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	085b      	lsrs	r3, r3, #1
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	f003 0307 	and.w	r3, r3, #7
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	89fb      	ldrh	r3, [r7, #14]
 80071bc:	4313      	orrs	r3, r2
 80071be:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	89fa      	ldrh	r2, [r7, #14]
 80071c6:	60da      	str	r2, [r3, #12]
 80071c8:	e04e      	b.n	8007268 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	77bb      	strb	r3, [r7, #30]
 80071ce:	e04b      	b.n	8007268 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80071d0:	7ffb      	ldrb	r3, [r7, #31]
 80071d2:	2b08      	cmp	r3, #8
 80071d4:	d827      	bhi.n	8007226 <UART_SetConfig+0x34a>
 80071d6:	a201      	add	r2, pc, #4	; (adr r2, 80071dc <UART_SetConfig+0x300>)
 80071d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071dc:	08007201 	.word	0x08007201
 80071e0:	08007209 	.word	0x08007209
 80071e4:	08007211 	.word	0x08007211
 80071e8:	08007227 	.word	0x08007227
 80071ec:	08007217 	.word	0x08007217
 80071f0:	08007227 	.word	0x08007227
 80071f4:	08007227 	.word	0x08007227
 80071f8:	08007227 	.word	0x08007227
 80071fc:	0800721f 	.word	0x0800721f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007200:	f7fd fcb0 	bl	8004b64 <HAL_RCC_GetPCLK1Freq>
 8007204:	61b8      	str	r0, [r7, #24]
        break;
 8007206:	e013      	b.n	8007230 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007208:	f7fd fcce 	bl	8004ba8 <HAL_RCC_GetPCLK2Freq>
 800720c:	61b8      	str	r0, [r7, #24]
        break;
 800720e:	e00f      	b.n	8007230 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007210:	4b1b      	ldr	r3, [pc, #108]	; (8007280 <UART_SetConfig+0x3a4>)
 8007212:	61bb      	str	r3, [r7, #24]
        break;
 8007214:	e00c      	b.n	8007230 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007216:	f7fd fc2f 	bl	8004a78 <HAL_RCC_GetSysClockFreq>
 800721a:	61b8      	str	r0, [r7, #24]
        break;
 800721c:	e008      	b.n	8007230 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800721e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007222:	61bb      	str	r3, [r7, #24]
        break;
 8007224:	e004      	b.n	8007230 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8007226:	2300      	movs	r3, #0
 8007228:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	77bb      	strb	r3, [r7, #30]
        break;
 800722e:	bf00      	nop
    }

    if (pclk != 0U)
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d018      	beq.n	8007268 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	085a      	lsrs	r2, r3, #1
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	441a      	add	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	fbb2 f3f3 	udiv	r3, r2, r3
 8007248:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	2b0f      	cmp	r3, #15
 800724e:	d909      	bls.n	8007264 <UART_SetConfig+0x388>
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007256:	d205      	bcs.n	8007264 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	b29a      	uxth	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	60da      	str	r2, [r3, #12]
 8007262:	e001      	b.n	8007268 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007274:	7fbb      	ldrb	r3, [r7, #30]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3720      	adds	r7, #32
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	007a1200 	.word	0x007a1200

08007284 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007290:	f003 0301 	and.w	r3, r3, #1
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00a      	beq.n	80072ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	430a      	orrs	r2, r1
 80072ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b2:	f003 0302 	and.w	r3, r3, #2
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00a      	beq.n	80072d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	430a      	orrs	r2, r1
 80072ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d4:	f003 0304 	and.w	r3, r3, #4
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00a      	beq.n	80072f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	430a      	orrs	r2, r1
 80072f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f6:	f003 0308 	and.w	r3, r3, #8
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00a      	beq.n	8007314 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	430a      	orrs	r2, r1
 8007312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007318:	f003 0310 	and.w	r3, r3, #16
 800731c:	2b00      	cmp	r3, #0
 800731e:	d00a      	beq.n	8007336 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	430a      	orrs	r2, r1
 8007334:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733a:	f003 0320 	and.w	r3, r3, #32
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00a      	beq.n	8007358 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	430a      	orrs	r2, r1
 8007356:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007360:	2b00      	cmp	r3, #0
 8007362:	d01a      	beq.n	800739a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	430a      	orrs	r2, r1
 8007378:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007382:	d10a      	bne.n	800739a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	430a      	orrs	r2, r1
 8007398:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00a      	beq.n	80073bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	430a      	orrs	r2, r1
 80073ba:	605a      	str	r2, [r3, #4]
  }
}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b098      	sub	sp, #96	; 0x60
 80073cc:	af02      	add	r7, sp, #8
 80073ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073d8:	f7fa fdf6 	bl	8001fc8 <HAL_GetTick>
 80073dc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 0308 	and.w	r3, r3, #8
 80073e8:	2b08      	cmp	r3, #8
 80073ea:	d12e      	bne.n	800744a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073f4:	2200      	movs	r2, #0
 80073f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f88c 	bl	8007518 <UART_WaitOnFlagUntilTimeout>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d021      	beq.n	800744a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740e:	e853 3f00 	ldrex	r3, [r3]
 8007412:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007416:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800741a:	653b      	str	r3, [r7, #80]	; 0x50
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	461a      	mov	r2, r3
 8007422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007424:	647b      	str	r3, [r7, #68]	; 0x44
 8007426:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007428:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800742a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800742c:	e841 2300 	strex	r3, r2, [r1]
 8007430:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007434:	2b00      	cmp	r3, #0
 8007436:	d1e6      	bne.n	8007406 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2220      	movs	r2, #32
 800743c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e062      	b.n	8007510 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 0304 	and.w	r3, r3, #4
 8007454:	2b04      	cmp	r3, #4
 8007456:	d149      	bne.n	80074ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007458:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800745c:	9300      	str	r3, [sp, #0]
 800745e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007460:	2200      	movs	r2, #0
 8007462:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f856 	bl	8007518 <UART_WaitOnFlagUntilTimeout>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d03c      	beq.n	80074ec <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747a:	e853 3f00 	ldrex	r3, [r3]
 800747e:	623b      	str	r3, [r7, #32]
   return(result);
 8007480:	6a3b      	ldr	r3, [r7, #32]
 8007482:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007486:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	461a      	mov	r2, r3
 800748e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007490:	633b      	str	r3, [r7, #48]	; 0x30
 8007492:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007494:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007498:	e841 2300 	strex	r3, r2, [r1]
 800749c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800749e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d1e6      	bne.n	8007472 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	3308      	adds	r3, #8
 80074aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	e853 3f00 	ldrex	r3, [r3]
 80074b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f023 0301 	bic.w	r3, r3, #1
 80074ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	3308      	adds	r3, #8
 80074c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074c4:	61fa      	str	r2, [r7, #28]
 80074c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c8:	69b9      	ldr	r1, [r7, #24]
 80074ca:	69fa      	ldr	r2, [r7, #28]
 80074cc:	e841 2300 	strex	r3, r2, [r1]
 80074d0:	617b      	str	r3, [r7, #20]
   return(result);
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d1e5      	bne.n	80074a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2220      	movs	r2, #32
 80074dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e011      	b.n	8007510 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2220      	movs	r2, #32
 80074f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2220      	movs	r2, #32
 80074f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3758      	adds	r7, #88	; 0x58
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	603b      	str	r3, [r7, #0]
 8007524:	4613      	mov	r3, r2
 8007526:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007528:	e049      	b.n	80075be <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007530:	d045      	beq.n	80075be <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007532:	f7fa fd49 	bl	8001fc8 <HAL_GetTick>
 8007536:	4602      	mov	r2, r0
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	1ad3      	subs	r3, r2, r3
 800753c:	69ba      	ldr	r2, [r7, #24]
 800753e:	429a      	cmp	r2, r3
 8007540:	d302      	bcc.n	8007548 <UART_WaitOnFlagUntilTimeout+0x30>
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d101      	bne.n	800754c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e048      	b.n	80075de <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 0304 	and.w	r3, r3, #4
 8007556:	2b00      	cmp	r3, #0
 8007558:	d031      	beq.n	80075be <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	69db      	ldr	r3, [r3, #28]
 8007560:	f003 0308 	and.w	r3, r3, #8
 8007564:	2b08      	cmp	r3, #8
 8007566:	d110      	bne.n	800758a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2208      	movs	r2, #8
 800756e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f000 f838 	bl	80075e6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2208      	movs	r2, #8
 800757a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e029      	b.n	80075de <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	69db      	ldr	r3, [r3, #28]
 8007590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007594:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007598:	d111      	bne.n	80075be <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f000 f81e 	bl	80075e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2220      	movs	r2, #32
 80075ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80075ba:	2303      	movs	r3, #3
 80075bc:	e00f      	b.n	80075de <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	69da      	ldr	r2, [r3, #28]
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	4013      	ands	r3, r2
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	bf0c      	ite	eq
 80075ce:	2301      	moveq	r3, #1
 80075d0:	2300      	movne	r3, #0
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	461a      	mov	r2, r3
 80075d6:	79fb      	ldrb	r3, [r7, #7]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d0a6      	beq.n	800752a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075e6:	b480      	push	{r7}
 80075e8:	b095      	sub	sp, #84	; 0x54
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075f6:	e853 3f00 	ldrex	r3, [r3]
 80075fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007602:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	461a      	mov	r2, r3
 800760a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800760c:	643b      	str	r3, [r7, #64]	; 0x40
 800760e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007610:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007612:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007614:	e841 2300 	strex	r3, r2, [r1]
 8007618:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800761a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1e6      	bne.n	80075ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	3308      	adds	r3, #8
 8007626:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007628:	6a3b      	ldr	r3, [r7, #32]
 800762a:	e853 3f00 	ldrex	r3, [r3]
 800762e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	f023 0301 	bic.w	r3, r3, #1
 8007636:	64bb      	str	r3, [r7, #72]	; 0x48
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	3308      	adds	r3, #8
 800763e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007640:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007642:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007644:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007648:	e841 2300 	strex	r3, r2, [r1]
 800764c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800764e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1e5      	bne.n	8007620 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007658:	2b01      	cmp	r3, #1
 800765a:	d118      	bne.n	800768e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	e853 3f00 	ldrex	r3, [r3]
 8007668:	60bb      	str	r3, [r7, #8]
   return(result);
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	f023 0310 	bic.w	r3, r3, #16
 8007670:	647b      	str	r3, [r7, #68]	; 0x44
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	461a      	mov	r2, r3
 8007678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800767a:	61bb      	str	r3, [r7, #24]
 800767c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767e:	6979      	ldr	r1, [r7, #20]
 8007680:	69ba      	ldr	r2, [r7, #24]
 8007682:	e841 2300 	strex	r3, r2, [r1]
 8007686:	613b      	str	r3, [r7, #16]
   return(result);
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1e6      	bne.n	800765c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2220      	movs	r2, #32
 8007692:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80076a2:	bf00      	nop
 80076a4:	3754      	adds	r7, #84	; 0x54
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
	...

080076b0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076b6:	f3ef 8305 	mrs	r3, IPSR
 80076ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80076bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d10f      	bne.n	80076e2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076c2:	f3ef 8310 	mrs	r3, PRIMASK
 80076c6:	607b      	str	r3, [r7, #4]
  return(result);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d109      	bne.n	80076e2 <osKernelInitialize+0x32>
 80076ce:	4b11      	ldr	r3, [pc, #68]	; (8007714 <osKernelInitialize+0x64>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d109      	bne.n	80076ea <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80076d6:	f3ef 8311 	mrs	r3, BASEPRI
 80076da:	603b      	str	r3, [r7, #0]
  return(result);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d003      	beq.n	80076ea <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80076e2:	f06f 0305 	mvn.w	r3, #5
 80076e6:	60fb      	str	r3, [r7, #12]
 80076e8:	e00c      	b.n	8007704 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80076ea:	4b0a      	ldr	r3, [pc, #40]	; (8007714 <osKernelInitialize+0x64>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d105      	bne.n	80076fe <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80076f2:	4b08      	ldr	r3, [pc, #32]	; (8007714 <osKernelInitialize+0x64>)
 80076f4:	2201      	movs	r2, #1
 80076f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80076f8:	2300      	movs	r3, #0
 80076fa:	60fb      	str	r3, [r7, #12]
 80076fc:	e002      	b.n	8007704 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80076fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007702:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007704:	68fb      	ldr	r3, [r7, #12]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3714      	adds	r7, #20
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	200002ac 	.word	0x200002ac

08007718 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800771e:	f3ef 8305 	mrs	r3, IPSR
 8007722:	60bb      	str	r3, [r7, #8]
  return(result);
 8007724:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10f      	bne.n	800774a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800772a:	f3ef 8310 	mrs	r3, PRIMASK
 800772e:	607b      	str	r3, [r7, #4]
  return(result);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d109      	bne.n	800774a <osKernelStart+0x32>
 8007736:	4b11      	ldr	r3, [pc, #68]	; (800777c <osKernelStart+0x64>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2b02      	cmp	r3, #2
 800773c:	d109      	bne.n	8007752 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800773e:	f3ef 8311 	mrs	r3, BASEPRI
 8007742:	603b      	str	r3, [r7, #0]
  return(result);
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d003      	beq.n	8007752 <osKernelStart+0x3a>
    stat = osErrorISR;
 800774a:	f06f 0305 	mvn.w	r3, #5
 800774e:	60fb      	str	r3, [r7, #12]
 8007750:	e00e      	b.n	8007770 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8007752:	4b0a      	ldr	r3, [pc, #40]	; (800777c <osKernelStart+0x64>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2b01      	cmp	r3, #1
 8007758:	d107      	bne.n	800776a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800775a:	4b08      	ldr	r3, [pc, #32]	; (800777c <osKernelStart+0x64>)
 800775c:	2202      	movs	r2, #2
 800775e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8007760:	f001 fa12 	bl	8008b88 <vTaskStartScheduler>
      stat = osOK;
 8007764:	2300      	movs	r3, #0
 8007766:	60fb      	str	r3, [r7, #12]
 8007768:	e002      	b.n	8007770 <osKernelStart+0x58>
    } else {
      stat = osError;
 800776a:	f04f 33ff 	mov.w	r3, #4294967295
 800776e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007770:	68fb      	ldr	r3, [r7, #12]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	200002ac 	.word	0x200002ac

08007780 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007780:	b580      	push	{r7, lr}
 8007782:	b092      	sub	sp, #72	; 0x48
 8007784:	af04      	add	r7, sp, #16
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800778c:	2300      	movs	r3, #0
 800778e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007790:	f3ef 8305 	mrs	r3, IPSR
 8007794:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007796:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8007798:	2b00      	cmp	r3, #0
 800779a:	f040 8094 	bne.w	80078c6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800779e:	f3ef 8310 	mrs	r3, PRIMASK
 80077a2:	623b      	str	r3, [r7, #32]
  return(result);
 80077a4:	6a3b      	ldr	r3, [r7, #32]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f040 808d 	bne.w	80078c6 <osThreadNew+0x146>
 80077ac:	4b48      	ldr	r3, [pc, #288]	; (80078d0 <osThreadNew+0x150>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d106      	bne.n	80077c2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80077b4:	f3ef 8311 	mrs	r3, BASEPRI
 80077b8:	61fb      	str	r3, [r7, #28]
  return(result);
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f040 8082 	bne.w	80078c6 <osThreadNew+0x146>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d07e      	beq.n	80078c6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80077c8:	2380      	movs	r3, #128	; 0x80
 80077ca:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80077cc:	2318      	movs	r3, #24
 80077ce:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80077d0:	2300      	movs	r3, #0
 80077d2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80077d4:	f107 031b 	add.w	r3, r7, #27
 80077d8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80077da:	f04f 33ff 	mov.w	r3, #4294967295
 80077de:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d045      	beq.n	8007872 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d002      	beq.n	80077f4 <osThreadNew+0x74>
        name = attr->name;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	699b      	ldr	r3, [r3, #24]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d002      	beq.n	8007802 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007804:	2b00      	cmp	r3, #0
 8007806:	d008      	beq.n	800781a <osThreadNew+0x9a>
 8007808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780a:	2b38      	cmp	r3, #56	; 0x38
 800780c:	d805      	bhi.n	800781a <osThreadNew+0x9a>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b00      	cmp	r3, #0
 8007818:	d001      	beq.n	800781e <osThreadNew+0x9e>
        return (NULL);
 800781a:	2300      	movs	r3, #0
 800781c:	e054      	b.n	80078c8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d003      	beq.n	800782e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	089b      	lsrs	r3, r3, #2
 800782c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00e      	beq.n	8007854 <osThreadNew+0xd4>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	2b5b      	cmp	r3, #91	; 0x5b
 800783c:	d90a      	bls.n	8007854 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007842:	2b00      	cmp	r3, #0
 8007844:	d006      	beq.n	8007854 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	695b      	ldr	r3, [r3, #20]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d002      	beq.n	8007854 <osThreadNew+0xd4>
        mem = 1;
 800784e:	2301      	movs	r3, #1
 8007850:	62bb      	str	r3, [r7, #40]	; 0x28
 8007852:	e010      	b.n	8007876 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d10c      	bne.n	8007876 <osThreadNew+0xf6>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d108      	bne.n	8007876 <osThreadNew+0xf6>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d104      	bne.n	8007876 <osThreadNew+0xf6>
          mem = 0;
 800786c:	2300      	movs	r3, #0
 800786e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007870:	e001      	b.n	8007876 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8007872:	2300      	movs	r3, #0
 8007874:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8007876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007878:	2b01      	cmp	r3, #1
 800787a:	d110      	bne.n	800789e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007884:	9202      	str	r2, [sp, #8]
 8007886:	9301      	str	r3, [sp, #4]
 8007888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788a:	9300      	str	r3, [sp, #0]
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007890:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	f000 ffac 	bl	80087f0 <xTaskCreateStatic>
 8007898:	4603      	mov	r3, r0
 800789a:	617b      	str	r3, [r7, #20]
 800789c:	e013      	b.n	80078c6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800789e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d110      	bne.n	80078c6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80078a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	f107 0314 	add.w	r3, r7, #20
 80078ac:	9301      	str	r3, [sp, #4]
 80078ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b0:	9300      	str	r3, [sp, #0]
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80078b6:	68f8      	ldr	r0, [r7, #12]
 80078b8:	f000 fff6 	bl	80088a8 <xTaskCreate>
 80078bc:	4603      	mov	r3, r0
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d001      	beq.n	80078c6 <osThreadNew+0x146>
          hTask = NULL;
 80078c2:	2300      	movs	r3, #0
 80078c4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80078c6:	697b      	ldr	r3, [r7, #20]
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3738      	adds	r7, #56	; 0x38
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	200002ac 	.word	0x200002ac

080078d4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b086      	sub	sp, #24
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078dc:	f3ef 8305 	mrs	r3, IPSR
 80078e0:	613b      	str	r3, [r7, #16]
  return(result);
 80078e2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d10f      	bne.n	8007908 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078e8:	f3ef 8310 	mrs	r3, PRIMASK
 80078ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d109      	bne.n	8007908 <osDelay+0x34>
 80078f4:	4b0d      	ldr	r3, [pc, #52]	; (800792c <osDelay+0x58>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d109      	bne.n	8007910 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80078fc:	f3ef 8311 	mrs	r3, BASEPRI
 8007900:	60bb      	str	r3, [r7, #8]
  return(result);
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d003      	beq.n	8007910 <osDelay+0x3c>
    stat = osErrorISR;
 8007908:	f06f 0305 	mvn.w	r3, #5
 800790c:	617b      	str	r3, [r7, #20]
 800790e:	e007      	b.n	8007920 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007910:	2300      	movs	r3, #0
 8007912:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d002      	beq.n	8007920 <osDelay+0x4c>
      vTaskDelay(ticks);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f001 f900 	bl	8008b20 <vTaskDelay>
    }
  }

  return (stat);
 8007920:	697b      	ldr	r3, [r7, #20]
}
 8007922:	4618      	mov	r0, r3
 8007924:	3718      	adds	r7, #24
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	200002ac 	.word	0x200002ac

08007930 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007930:	b580      	push	{r7, lr}
 8007932:	b08c      	sub	sp, #48	; 0x30
 8007934:	af02      	add	r7, sp, #8
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800793c:	2300      	movs	r3, #0
 800793e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007940:	f3ef 8305 	mrs	r3, IPSR
 8007944:	61bb      	str	r3, [r7, #24]
  return(result);
 8007946:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007948:	2b00      	cmp	r3, #0
 800794a:	f040 8086 	bne.w	8007a5a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800794e:	f3ef 8310 	mrs	r3, PRIMASK
 8007952:	617b      	str	r3, [r7, #20]
  return(result);
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d17f      	bne.n	8007a5a <osSemaphoreNew+0x12a>
 800795a:	4b42      	ldr	r3, [pc, #264]	; (8007a64 <osSemaphoreNew+0x134>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2b02      	cmp	r3, #2
 8007960:	d105      	bne.n	800796e <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007962:	f3ef 8311 	mrs	r3, BASEPRI
 8007966:	613b      	str	r3, [r7, #16]
  return(result);
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d175      	bne.n	8007a5a <osSemaphoreNew+0x12a>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d072      	beq.n	8007a5a <osSemaphoreNew+0x12a>
 8007974:	68ba      	ldr	r2, [r7, #8]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	429a      	cmp	r2, r3
 800797a:	d86e      	bhi.n	8007a5a <osSemaphoreNew+0x12a>
    mem = -1;
 800797c:	f04f 33ff 	mov.w	r3, #4294967295
 8007980:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d015      	beq.n	80079b4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d006      	beq.n	800799e <osSemaphoreNew+0x6e>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	2b4f      	cmp	r3, #79	; 0x4f
 8007996:	d902      	bls.n	800799e <osSemaphoreNew+0x6e>
        mem = 1;
 8007998:	2301      	movs	r3, #1
 800799a:	623b      	str	r3, [r7, #32]
 800799c:	e00c      	b.n	80079b8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d108      	bne.n	80079b8 <osSemaphoreNew+0x88>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d104      	bne.n	80079b8 <osSemaphoreNew+0x88>
          mem = 0;
 80079ae:	2300      	movs	r3, #0
 80079b0:	623b      	str	r3, [r7, #32]
 80079b2:	e001      	b.n	80079b8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80079b4:	2300      	movs	r3, #0
 80079b6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80079b8:	6a3b      	ldr	r3, [r7, #32]
 80079ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079be:	d04c      	beq.n	8007a5a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d128      	bne.n	8007a18 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80079c6:	6a3b      	ldr	r3, [r7, #32]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d10a      	bne.n	80079e2 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	2203      	movs	r2, #3
 80079d2:	9200      	str	r2, [sp, #0]
 80079d4:	2200      	movs	r2, #0
 80079d6:	2100      	movs	r1, #0
 80079d8:	2001      	movs	r0, #1
 80079da:	f000 f995 	bl	8007d08 <xQueueGenericCreateStatic>
 80079de:	6278      	str	r0, [r7, #36]	; 0x24
 80079e0:	e005      	b.n	80079ee <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80079e2:	2203      	movs	r2, #3
 80079e4:	2100      	movs	r1, #0
 80079e6:	2001      	movs	r0, #1
 80079e8:	f000 fa05 	bl	8007df6 <xQueueGenericCreate>
 80079ec:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80079ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d022      	beq.n	8007a3a <osSemaphoreNew+0x10a>
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d01f      	beq.n	8007a3a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80079fa:	2300      	movs	r3, #0
 80079fc:	2200      	movs	r2, #0
 80079fe:	2100      	movs	r1, #0
 8007a00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a02:	f000 fac3 	bl	8007f8c <xQueueGenericSend>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d016      	beq.n	8007a3a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8007a0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a0e:	f000 fd33 	bl	8008478 <vQueueDelete>
            hSemaphore = NULL;
 8007a12:	2300      	movs	r3, #0
 8007a14:	627b      	str	r3, [r7, #36]	; 0x24
 8007a16:	e010      	b.n	8007a3a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8007a18:	6a3b      	ldr	r3, [r7, #32]
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d108      	bne.n	8007a30 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	461a      	mov	r2, r3
 8007a24:	68b9      	ldr	r1, [r7, #8]
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f000 fa46 	bl	8007eb8 <xQueueCreateCountingSemaphoreStatic>
 8007a2c:	6278      	str	r0, [r7, #36]	; 0x24
 8007a2e:	e004      	b.n	8007a3a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007a30:	68b9      	ldr	r1, [r7, #8]
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	f000 fa77 	bl	8007f26 <xQueueCreateCountingSemaphore>
 8007a38:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00c      	beq.n	8007a5a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d003      	beq.n	8007a4e <osSemaphoreNew+0x11e>
          name = attr->name;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	61fb      	str	r3, [r7, #28]
 8007a4c:	e001      	b.n	8007a52 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007a52:	69f9      	ldr	r1, [r7, #28]
 8007a54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a56:	f000 fe43 	bl	80086e0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3728      	adds	r7, #40	; 0x28
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	200002ac 	.word	0x200002ac

08007a68 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	4a07      	ldr	r2, [pc, #28]	; (8007a94 <vApplicationGetIdleTaskMemory+0x2c>)
 8007a78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	4a06      	ldr	r2, [pc, #24]	; (8007a98 <vApplicationGetIdleTaskMemory+0x30>)
 8007a7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2280      	movs	r2, #128	; 0x80
 8007a84:	601a      	str	r2, [r3, #0]
}
 8007a86:	bf00      	nop
 8007a88:	3714      	adds	r7, #20
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	200002b0 	.word	0x200002b0
 8007a98:	2000030c 	.word	0x2000030c

08007a9c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	4a07      	ldr	r2, [pc, #28]	; (8007ac8 <vApplicationGetTimerTaskMemory+0x2c>)
 8007aac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	4a06      	ldr	r2, [pc, #24]	; (8007acc <vApplicationGetTimerTaskMemory+0x30>)
 8007ab2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007aba:	601a      	str	r2, [r3, #0]
}
 8007abc:	bf00      	nop
 8007abe:	3714      	adds	r7, #20
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr
 8007ac8:	2000050c 	.word	0x2000050c
 8007acc:	20000568 	.word	0x20000568

08007ad0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f103 0208 	add.w	r2, r3, #8
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ae8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f103 0208 	add.w	r2, r3, #8
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f103 0208 	add.w	r2, r3, #8
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b1e:	bf00      	nop
 8007b20:	370c      	adds	r7, #12
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b085      	sub	sp, #20
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	689a      	ldr	r2, [r3, #8]
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	683a      	ldr	r2, [r7, #0]
 8007b4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	683a      	ldr	r2, [r7, #0]
 8007b54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	1c5a      	adds	r2, r3, #1
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	601a      	str	r2, [r3, #0]
}
 8007b66:	bf00      	nop
 8007b68:	3714      	adds	r7, #20
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr

08007b72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b72:	b480      	push	{r7}
 8007b74:	b085      	sub	sp, #20
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
 8007b7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b88:	d103      	bne.n	8007b92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	60fb      	str	r3, [r7, #12]
 8007b90:	e00c      	b.n	8007bac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	3308      	adds	r3, #8
 8007b96:	60fb      	str	r3, [r7, #12]
 8007b98:	e002      	b.n	8007ba0 <vListInsert+0x2e>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	60fb      	str	r3, [r7, #12]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d2f6      	bcs.n	8007b9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	685a      	ldr	r2, [r3, #4]
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	683a      	ldr	r2, [r7, #0]
 8007bba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	683a      	ldr	r2, [r7, #0]
 8007bc6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	1c5a      	adds	r2, r3, #1
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	601a      	str	r2, [r3, #0]
}
 8007bd8:	bf00      	nop
 8007bda:	3714      	adds	r7, #20
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007be4:	b480      	push	{r7}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	6892      	ldr	r2, [r2, #8]
 8007bfa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	6852      	ldr	r2, [r2, #4]
 8007c04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d103      	bne.n	8007c18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	689a      	ldr	r2, [r3, #8]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	1e5a      	subs	r2, r3, #1
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3714      	adds	r7, #20
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d10a      	bne.n	8007c62 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c50:	f383 8811 	msr	BASEPRI, r3
 8007c54:	f3bf 8f6f 	isb	sy
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007c5e:	bf00      	nop
 8007c60:	e7fe      	b.n	8007c60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007c62:	f002 f8ff 	bl	8009e64 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c6e:	68f9      	ldr	r1, [r7, #12]
 8007c70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007c72:	fb01 f303 	mul.w	r3, r1, r3
 8007c76:	441a      	add	r2, r3
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c92:	3b01      	subs	r3, #1
 8007c94:	68f9      	ldr	r1, [r7, #12]
 8007c96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007c98:	fb01 f303 	mul.w	r3, r1, r3
 8007c9c:	441a      	add	r2, r3
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	22ff      	movs	r2, #255	; 0xff
 8007ca6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	22ff      	movs	r2, #255	; 0xff
 8007cae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d114      	bne.n	8007ce2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d01a      	beq.n	8007cf6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	3310      	adds	r3, #16
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f001 f9ed 	bl	80090a4 <xTaskRemoveFromEventList>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d012      	beq.n	8007cf6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007cd0:	4b0c      	ldr	r3, [pc, #48]	; (8007d04 <xQueueGenericReset+0xcc>)
 8007cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cd6:	601a      	str	r2, [r3, #0]
 8007cd8:	f3bf 8f4f 	dsb	sy
 8007cdc:	f3bf 8f6f 	isb	sy
 8007ce0:	e009      	b.n	8007cf6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	3310      	adds	r3, #16
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7ff fef2 	bl	8007ad0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	3324      	adds	r3, #36	; 0x24
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7ff feed 	bl	8007ad0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007cf6:	f002 f8e5 	bl	8009ec4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007cfa:	2301      	movs	r3, #1
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	e000ed04 	.word	0xe000ed04

08007d08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b08e      	sub	sp, #56	; 0x38
 8007d0c:	af02      	add	r7, sp, #8
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	607a      	str	r2, [r7, #4]
 8007d14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d10a      	bne.n	8007d32 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d20:	f383 8811 	msr	BASEPRI, r3
 8007d24:	f3bf 8f6f 	isb	sy
 8007d28:	f3bf 8f4f 	dsb	sy
 8007d2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d2e:	bf00      	nop
 8007d30:	e7fe      	b.n	8007d30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d10a      	bne.n	8007d4e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d3c:	f383 8811 	msr	BASEPRI, r3
 8007d40:	f3bf 8f6f 	isb	sy
 8007d44:	f3bf 8f4f 	dsb	sy
 8007d48:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d4a:	bf00      	nop
 8007d4c:	e7fe      	b.n	8007d4c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d002      	beq.n	8007d5a <xQueueGenericCreateStatic+0x52>
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d001      	beq.n	8007d5e <xQueueGenericCreateStatic+0x56>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e000      	b.n	8007d60 <xQueueGenericCreateStatic+0x58>
 8007d5e:	2300      	movs	r3, #0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10a      	bne.n	8007d7a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d68:	f383 8811 	msr	BASEPRI, r3
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	f3bf 8f4f 	dsb	sy
 8007d74:	623b      	str	r3, [r7, #32]
}
 8007d76:	bf00      	nop
 8007d78:	e7fe      	b.n	8007d78 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d102      	bne.n	8007d86 <xQueueGenericCreateStatic+0x7e>
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d101      	bne.n	8007d8a <xQueueGenericCreateStatic+0x82>
 8007d86:	2301      	movs	r3, #1
 8007d88:	e000      	b.n	8007d8c <xQueueGenericCreateStatic+0x84>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d10a      	bne.n	8007da6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d94:	f383 8811 	msr	BASEPRI, r3
 8007d98:	f3bf 8f6f 	isb	sy
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	61fb      	str	r3, [r7, #28]
}
 8007da2:	bf00      	nop
 8007da4:	e7fe      	b.n	8007da4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007da6:	2350      	movs	r3, #80	; 0x50
 8007da8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	2b50      	cmp	r3, #80	; 0x50
 8007dae:	d00a      	beq.n	8007dc6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db4:	f383 8811 	msr	BASEPRI, r3
 8007db8:	f3bf 8f6f 	isb	sy
 8007dbc:	f3bf 8f4f 	dsb	sy
 8007dc0:	61bb      	str	r3, [r7, #24]
}
 8007dc2:	bf00      	nop
 8007dc4:	e7fe      	b.n	8007dc4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00d      	beq.n	8007dec <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007dd8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dde:	9300      	str	r3, [sp, #0]
 8007de0:	4613      	mov	r3, r2
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	68b9      	ldr	r1, [r7, #8]
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f000 f843 	bl	8007e72 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3730      	adds	r7, #48	; 0x30
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b08a      	sub	sp, #40	; 0x28
 8007dfa:	af02      	add	r7, sp, #8
 8007dfc:	60f8      	str	r0, [r7, #12]
 8007dfe:	60b9      	str	r1, [r7, #8]
 8007e00:	4613      	mov	r3, r2
 8007e02:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d10a      	bne.n	8007e20 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0e:	f383 8811 	msr	BASEPRI, r3
 8007e12:	f3bf 8f6f 	isb	sy
 8007e16:	f3bf 8f4f 	dsb	sy
 8007e1a:	613b      	str	r3, [r7, #16]
}
 8007e1c:	bf00      	nop
 8007e1e:	e7fe      	b.n	8007e1e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d102      	bne.n	8007e2c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007e26:	2300      	movs	r3, #0
 8007e28:	61fb      	str	r3, [r7, #28]
 8007e2a:	e004      	b.n	8007e36 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	68ba      	ldr	r2, [r7, #8]
 8007e30:	fb02 f303 	mul.w	r3, r2, r3
 8007e34:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	3350      	adds	r3, #80	; 0x50
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f002 f934 	bl	800a0a8 <pvPortMalloc>
 8007e40:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d00f      	beq.n	8007e68 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	3350      	adds	r3, #80	; 0x50
 8007e4c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e56:	79fa      	ldrb	r2, [r7, #7]
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	9300      	str	r3, [sp, #0]
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	697a      	ldr	r2, [r7, #20]
 8007e60:	68b9      	ldr	r1, [r7, #8]
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	f000 f805 	bl	8007e72 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007e68:	69bb      	ldr	r3, [r7, #24]
	}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3720      	adds	r7, #32
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b084      	sub	sp, #16
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	60f8      	str	r0, [r7, #12]
 8007e7a:	60b9      	str	r1, [r7, #8]
 8007e7c:	607a      	str	r2, [r7, #4]
 8007e7e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d103      	bne.n	8007e8e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	69ba      	ldr	r2, [r7, #24]
 8007e8a:	601a      	str	r2, [r3, #0]
 8007e8c:	e002      	b.n	8007e94 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007ea0:	2101      	movs	r1, #1
 8007ea2:	69b8      	ldr	r0, [r7, #24]
 8007ea4:	f7ff fec8 	bl	8007c38 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	78fa      	ldrb	r2, [r7, #3]
 8007eac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007eb0:	bf00      	nop
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b08a      	sub	sp, #40	; 0x28
 8007ebc:	af02      	add	r7, sp, #8
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d10a      	bne.n	8007ee0 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ece:	f383 8811 	msr	BASEPRI, r3
 8007ed2:	f3bf 8f6f 	isb	sy
 8007ed6:	f3bf 8f4f 	dsb	sy
 8007eda:	61bb      	str	r3, [r7, #24]
}
 8007edc:	bf00      	nop
 8007ede:	e7fe      	b.n	8007ede <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007ee0:	68ba      	ldr	r2, [r7, #8]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d90a      	bls.n	8007efe <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8007ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eec:	f383 8811 	msr	BASEPRI, r3
 8007ef0:	f3bf 8f6f 	isb	sy
 8007ef4:	f3bf 8f4f 	dsb	sy
 8007ef8:	617b      	str	r3, [r7, #20]
}
 8007efa:	bf00      	nop
 8007efc:	e7fe      	b.n	8007efc <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007efe:	2302      	movs	r3, #2
 8007f00:	9300      	str	r3, [sp, #0]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	2100      	movs	r1, #0
 8007f08:	68f8      	ldr	r0, [r7, #12]
 8007f0a:	f7ff fefd 	bl	8007d08 <xQueueGenericCreateStatic>
 8007f0e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d002      	beq.n	8007f1c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	68ba      	ldr	r2, [r7, #8]
 8007f1a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007f1c:	69fb      	ldr	r3, [r7, #28]
	}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3720      	adds	r7, #32
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b086      	sub	sp, #24
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
 8007f2e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d10a      	bne.n	8007f4c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8007f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3a:	f383 8811 	msr	BASEPRI, r3
 8007f3e:	f3bf 8f6f 	isb	sy
 8007f42:	f3bf 8f4f 	dsb	sy
 8007f46:	613b      	str	r3, [r7, #16]
}
 8007f48:	bf00      	nop
 8007f4a:	e7fe      	b.n	8007f4a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007f4c:	683a      	ldr	r2, [r7, #0]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d90a      	bls.n	8007f6a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8007f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f58:	f383 8811 	msr	BASEPRI, r3
 8007f5c:	f3bf 8f6f 	isb	sy
 8007f60:	f3bf 8f4f 	dsb	sy
 8007f64:	60fb      	str	r3, [r7, #12]
}
 8007f66:	bf00      	nop
 8007f68:	e7fe      	b.n	8007f68 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007f6a:	2202      	movs	r2, #2
 8007f6c:	2100      	movs	r1, #0
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f7ff ff41 	bl	8007df6 <xQueueGenericCreate>
 8007f74:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d002      	beq.n	8007f82 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007f82:	697b      	ldr	r3, [r7, #20]
	}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3718      	adds	r7, #24
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b08e      	sub	sp, #56	; 0x38
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
 8007f98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d10a      	bne.n	8007fbe <xQueueGenericSend+0x32>
	__asm volatile
 8007fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fac:	f383 8811 	msr	BASEPRI, r3
 8007fb0:	f3bf 8f6f 	isb	sy
 8007fb4:	f3bf 8f4f 	dsb	sy
 8007fb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007fba:	bf00      	nop
 8007fbc:	e7fe      	b.n	8007fbc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d103      	bne.n	8007fcc <xQueueGenericSend+0x40>
 8007fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d101      	bne.n	8007fd0 <xQueueGenericSend+0x44>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e000      	b.n	8007fd2 <xQueueGenericSend+0x46>
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d10a      	bne.n	8007fec <xQueueGenericSend+0x60>
	__asm volatile
 8007fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fda:	f383 8811 	msr	BASEPRI, r3
 8007fde:	f3bf 8f6f 	isb	sy
 8007fe2:	f3bf 8f4f 	dsb	sy
 8007fe6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007fe8:	bf00      	nop
 8007fea:	e7fe      	b.n	8007fea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d103      	bne.n	8007ffa <xQueueGenericSend+0x6e>
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d101      	bne.n	8007ffe <xQueueGenericSend+0x72>
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e000      	b.n	8008000 <xQueueGenericSend+0x74>
 8007ffe:	2300      	movs	r3, #0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d10a      	bne.n	800801a <xQueueGenericSend+0x8e>
	__asm volatile
 8008004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008008:	f383 8811 	msr	BASEPRI, r3
 800800c:	f3bf 8f6f 	isb	sy
 8008010:	f3bf 8f4f 	dsb	sy
 8008014:	623b      	str	r3, [r7, #32]
}
 8008016:	bf00      	nop
 8008018:	e7fe      	b.n	8008018 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800801a:	f001 fa07 	bl	800942c <xTaskGetSchedulerState>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d102      	bne.n	800802a <xQueueGenericSend+0x9e>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d101      	bne.n	800802e <xQueueGenericSend+0xa2>
 800802a:	2301      	movs	r3, #1
 800802c:	e000      	b.n	8008030 <xQueueGenericSend+0xa4>
 800802e:	2300      	movs	r3, #0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d10a      	bne.n	800804a <xQueueGenericSend+0xbe>
	__asm volatile
 8008034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008038:	f383 8811 	msr	BASEPRI, r3
 800803c:	f3bf 8f6f 	isb	sy
 8008040:	f3bf 8f4f 	dsb	sy
 8008044:	61fb      	str	r3, [r7, #28]
}
 8008046:	bf00      	nop
 8008048:	e7fe      	b.n	8008048 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800804a:	f001 ff0b 	bl	8009e64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800804e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008056:	429a      	cmp	r2, r3
 8008058:	d302      	bcc.n	8008060 <xQueueGenericSend+0xd4>
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	2b02      	cmp	r3, #2
 800805e:	d129      	bne.n	80080b4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008060:	683a      	ldr	r2, [r7, #0]
 8008062:	68b9      	ldr	r1, [r7, #8]
 8008064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008066:	f000 fa2a 	bl	80084be <prvCopyDataToQueue>
 800806a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800806c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008070:	2b00      	cmp	r3, #0
 8008072:	d010      	beq.n	8008096 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008076:	3324      	adds	r3, #36	; 0x24
 8008078:	4618      	mov	r0, r3
 800807a:	f001 f813 	bl	80090a4 <xTaskRemoveFromEventList>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d013      	beq.n	80080ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008084:	4b3f      	ldr	r3, [pc, #252]	; (8008184 <xQueueGenericSend+0x1f8>)
 8008086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800808a:	601a      	str	r2, [r3, #0]
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	f3bf 8f6f 	isb	sy
 8008094:	e00a      	b.n	80080ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008098:	2b00      	cmp	r3, #0
 800809a:	d007      	beq.n	80080ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800809c:	4b39      	ldr	r3, [pc, #228]	; (8008184 <xQueueGenericSend+0x1f8>)
 800809e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080a2:	601a      	str	r2, [r3, #0]
 80080a4:	f3bf 8f4f 	dsb	sy
 80080a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80080ac:	f001 ff0a 	bl	8009ec4 <vPortExitCritical>
				return pdPASS;
 80080b0:	2301      	movs	r3, #1
 80080b2:	e063      	b.n	800817c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d103      	bne.n	80080c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80080ba:	f001 ff03 	bl	8009ec4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80080be:	2300      	movs	r3, #0
 80080c0:	e05c      	b.n	800817c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d106      	bne.n	80080d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080c8:	f107 0314 	add.w	r3, r7, #20
 80080cc:	4618      	mov	r0, r3
 80080ce:	f001 f84d 	bl	800916c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080d2:	2301      	movs	r3, #1
 80080d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080d6:	f001 fef5 	bl	8009ec4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080da:	f000 fdbb 	bl	8008c54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080de:	f001 fec1 	bl	8009e64 <vPortEnterCritical>
 80080e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080e8:	b25b      	sxtb	r3, r3
 80080ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ee:	d103      	bne.n	80080f8 <xQueueGenericSend+0x16c>
 80080f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f2:	2200      	movs	r2, #0
 80080f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080fe:	b25b      	sxtb	r3, r3
 8008100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008104:	d103      	bne.n	800810e <xQueueGenericSend+0x182>
 8008106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008108:	2200      	movs	r2, #0
 800810a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800810e:	f001 fed9 	bl	8009ec4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008112:	1d3a      	adds	r2, r7, #4
 8008114:	f107 0314 	add.w	r3, r7, #20
 8008118:	4611      	mov	r1, r2
 800811a:	4618      	mov	r0, r3
 800811c:	f001 f83c 	bl	8009198 <xTaskCheckForTimeOut>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d124      	bne.n	8008170 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008126:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008128:	f000 fac1 	bl	80086ae <prvIsQueueFull>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d018      	beq.n	8008164 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008134:	3310      	adds	r3, #16
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	4611      	mov	r1, r2
 800813a:	4618      	mov	r0, r3
 800813c:	f000 ff62 	bl	8009004 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008140:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008142:	f000 fa4c 	bl	80085de <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008146:	f000 fd93 	bl	8008c70 <xTaskResumeAll>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	f47f af7c 	bne.w	800804a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008152:	4b0c      	ldr	r3, [pc, #48]	; (8008184 <xQueueGenericSend+0x1f8>)
 8008154:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	f3bf 8f6f 	isb	sy
 8008162:	e772      	b.n	800804a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008164:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008166:	f000 fa3a 	bl	80085de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800816a:	f000 fd81 	bl	8008c70 <xTaskResumeAll>
 800816e:	e76c      	b.n	800804a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008170:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008172:	f000 fa34 	bl	80085de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008176:	f000 fd7b 	bl	8008c70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800817a:	2300      	movs	r3, #0
		}
	}
}
 800817c:	4618      	mov	r0, r3
 800817e:	3738      	adds	r7, #56	; 0x38
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	e000ed04 	.word	0xe000ed04

08008188 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b08e      	sub	sp, #56	; 0x38
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	607a      	str	r2, [r7, #4]
 8008194:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800819a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819c:	2b00      	cmp	r3, #0
 800819e:	d10a      	bne.n	80081b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80081a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a4:	f383 8811 	msr	BASEPRI, r3
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80081b2:	bf00      	nop
 80081b4:	e7fe      	b.n	80081b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d103      	bne.n	80081c4 <xQueueGenericSendFromISR+0x3c>
 80081bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d101      	bne.n	80081c8 <xQueueGenericSendFromISR+0x40>
 80081c4:	2301      	movs	r3, #1
 80081c6:	e000      	b.n	80081ca <xQueueGenericSendFromISR+0x42>
 80081c8:	2300      	movs	r3, #0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d10a      	bne.n	80081e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80081ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d2:	f383 8811 	msr	BASEPRI, r3
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	f3bf 8f4f 	dsb	sy
 80081de:	623b      	str	r3, [r7, #32]
}
 80081e0:	bf00      	nop
 80081e2:	e7fe      	b.n	80081e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d103      	bne.n	80081f2 <xQueueGenericSendFromISR+0x6a>
 80081ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d101      	bne.n	80081f6 <xQueueGenericSendFromISR+0x6e>
 80081f2:	2301      	movs	r3, #1
 80081f4:	e000      	b.n	80081f8 <xQueueGenericSendFromISR+0x70>
 80081f6:	2300      	movs	r3, #0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10a      	bne.n	8008212 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80081fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008200:	f383 8811 	msr	BASEPRI, r3
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	61fb      	str	r3, [r7, #28]
}
 800820e:	bf00      	nop
 8008210:	e7fe      	b.n	8008210 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008212:	f001 ff09 	bl	800a028 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008216:	f3ef 8211 	mrs	r2, BASEPRI
 800821a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821e:	f383 8811 	msr	BASEPRI, r3
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	61ba      	str	r2, [r7, #24]
 800822c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800822e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008230:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800823a:	429a      	cmp	r2, r3
 800823c:	d302      	bcc.n	8008244 <xQueueGenericSendFromISR+0xbc>
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	2b02      	cmp	r3, #2
 8008242:	d12c      	bne.n	800829e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008246:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800824a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800824e:	683a      	ldr	r2, [r7, #0]
 8008250:	68b9      	ldr	r1, [r7, #8]
 8008252:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008254:	f000 f933 	bl	80084be <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008258:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800825c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008260:	d112      	bne.n	8008288 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008266:	2b00      	cmp	r3, #0
 8008268:	d016      	beq.n	8008298 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800826a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826c:	3324      	adds	r3, #36	; 0x24
 800826e:	4618      	mov	r0, r3
 8008270:	f000 ff18 	bl	80090a4 <xTaskRemoveFromEventList>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00e      	beq.n	8008298 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00b      	beq.n	8008298 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	601a      	str	r2, [r3, #0]
 8008286:	e007      	b.n	8008298 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008288:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800828c:	3301      	adds	r3, #1
 800828e:	b2db      	uxtb	r3, r3
 8008290:	b25a      	sxtb	r2, r3
 8008292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008298:	2301      	movs	r3, #1
 800829a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800829c:	e001      	b.n	80082a2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800829e:	2300      	movs	r3, #0
 80082a0:	637b      	str	r3, [r7, #52]	; 0x34
 80082a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80082ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80082ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3738      	adds	r7, #56	; 0x38
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b08c      	sub	sp, #48	; 0x30
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80082c4:	2300      	movs	r3, #0
 80082c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80082cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10a      	bne.n	80082e8 <xQueueReceive+0x30>
	__asm volatile
 80082d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d6:	f383 8811 	msr	BASEPRI, r3
 80082da:	f3bf 8f6f 	isb	sy
 80082de:	f3bf 8f4f 	dsb	sy
 80082e2:	623b      	str	r3, [r7, #32]
}
 80082e4:	bf00      	nop
 80082e6:	e7fe      	b.n	80082e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d103      	bne.n	80082f6 <xQueueReceive+0x3e>
 80082ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d101      	bne.n	80082fa <xQueueReceive+0x42>
 80082f6:	2301      	movs	r3, #1
 80082f8:	e000      	b.n	80082fc <xQueueReceive+0x44>
 80082fa:	2300      	movs	r3, #0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d10a      	bne.n	8008316 <xQueueReceive+0x5e>
	__asm volatile
 8008300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008304:	f383 8811 	msr	BASEPRI, r3
 8008308:	f3bf 8f6f 	isb	sy
 800830c:	f3bf 8f4f 	dsb	sy
 8008310:	61fb      	str	r3, [r7, #28]
}
 8008312:	bf00      	nop
 8008314:	e7fe      	b.n	8008314 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008316:	f001 f889 	bl	800942c <xTaskGetSchedulerState>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d102      	bne.n	8008326 <xQueueReceive+0x6e>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d101      	bne.n	800832a <xQueueReceive+0x72>
 8008326:	2301      	movs	r3, #1
 8008328:	e000      	b.n	800832c <xQueueReceive+0x74>
 800832a:	2300      	movs	r3, #0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10a      	bne.n	8008346 <xQueueReceive+0x8e>
	__asm volatile
 8008330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008334:	f383 8811 	msr	BASEPRI, r3
 8008338:	f3bf 8f6f 	isb	sy
 800833c:	f3bf 8f4f 	dsb	sy
 8008340:	61bb      	str	r3, [r7, #24]
}
 8008342:	bf00      	nop
 8008344:	e7fe      	b.n	8008344 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008346:	f001 fd8d 	bl	8009e64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800834a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800834e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008352:	2b00      	cmp	r3, #0
 8008354:	d01f      	beq.n	8008396 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008356:	68b9      	ldr	r1, [r7, #8]
 8008358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800835a:	f000 f91a 	bl	8008592 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800835e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008360:	1e5a      	subs	r2, r3, #1
 8008362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008364:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008368:	691b      	ldr	r3, [r3, #16]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d00f      	beq.n	800838e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800836e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008370:	3310      	adds	r3, #16
 8008372:	4618      	mov	r0, r3
 8008374:	f000 fe96 	bl	80090a4 <xTaskRemoveFromEventList>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d007      	beq.n	800838e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800837e:	4b3d      	ldr	r3, [pc, #244]	; (8008474 <xQueueReceive+0x1bc>)
 8008380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008384:	601a      	str	r2, [r3, #0]
 8008386:	f3bf 8f4f 	dsb	sy
 800838a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800838e:	f001 fd99 	bl	8009ec4 <vPortExitCritical>
				return pdPASS;
 8008392:	2301      	movs	r3, #1
 8008394:	e069      	b.n	800846a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d103      	bne.n	80083a4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800839c:	f001 fd92 	bl	8009ec4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80083a0:	2300      	movs	r3, #0
 80083a2:	e062      	b.n	800846a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d106      	bne.n	80083b8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083aa:	f107 0310 	add.w	r3, r7, #16
 80083ae:	4618      	mov	r0, r3
 80083b0:	f000 fedc 	bl	800916c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083b4:	2301      	movs	r3, #1
 80083b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083b8:	f001 fd84 	bl	8009ec4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083bc:	f000 fc4a 	bl	8008c54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083c0:	f001 fd50 	bl	8009e64 <vPortEnterCritical>
 80083c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083ca:	b25b      	sxtb	r3, r3
 80083cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083d0:	d103      	bne.n	80083da <xQueueReceive+0x122>
 80083d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d4:	2200      	movs	r2, #0
 80083d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083e0:	b25b      	sxtb	r3, r3
 80083e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e6:	d103      	bne.n	80083f0 <xQueueReceive+0x138>
 80083e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ea:	2200      	movs	r2, #0
 80083ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083f0:	f001 fd68 	bl	8009ec4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80083f4:	1d3a      	adds	r2, r7, #4
 80083f6:	f107 0310 	add.w	r3, r7, #16
 80083fa:	4611      	mov	r1, r2
 80083fc:	4618      	mov	r0, r3
 80083fe:	f000 fecb 	bl	8009198 <xTaskCheckForTimeOut>
 8008402:	4603      	mov	r3, r0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d123      	bne.n	8008450 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008408:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800840a:	f000 f93a 	bl	8008682 <prvIsQueueEmpty>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d017      	beq.n	8008444 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008416:	3324      	adds	r3, #36	; 0x24
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	4611      	mov	r1, r2
 800841c:	4618      	mov	r0, r3
 800841e:	f000 fdf1 	bl	8009004 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008422:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008424:	f000 f8db 	bl	80085de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008428:	f000 fc22 	bl	8008c70 <xTaskResumeAll>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d189      	bne.n	8008346 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008432:	4b10      	ldr	r3, [pc, #64]	; (8008474 <xQueueReceive+0x1bc>)
 8008434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008438:	601a      	str	r2, [r3, #0]
 800843a:	f3bf 8f4f 	dsb	sy
 800843e:	f3bf 8f6f 	isb	sy
 8008442:	e780      	b.n	8008346 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008446:	f000 f8ca 	bl	80085de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800844a:	f000 fc11 	bl	8008c70 <xTaskResumeAll>
 800844e:	e77a      	b.n	8008346 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008452:	f000 f8c4 	bl	80085de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008456:	f000 fc0b 	bl	8008c70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800845a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800845c:	f000 f911 	bl	8008682 <prvIsQueueEmpty>
 8008460:	4603      	mov	r3, r0
 8008462:	2b00      	cmp	r3, #0
 8008464:	f43f af6f 	beq.w	8008346 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008468:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800846a:	4618      	mov	r0, r3
 800846c:	3730      	adds	r7, #48	; 0x30
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	e000ed04 	.word	0xe000ed04

08008478 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d10a      	bne.n	80084a0 <vQueueDelete+0x28>
	__asm volatile
 800848a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848e:	f383 8811 	msr	BASEPRI, r3
 8008492:	f3bf 8f6f 	isb	sy
 8008496:	f3bf 8f4f 	dsb	sy
 800849a:	60bb      	str	r3, [r7, #8]
}
 800849c:	bf00      	nop
 800849e:	e7fe      	b.n	800849e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	f000 f947 	bl	8008734 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d102      	bne.n	80084b6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80084b0:	68f8      	ldr	r0, [r7, #12]
 80084b2:	f001 febd 	bl	800a230 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80084b6:	bf00      	nop
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b086      	sub	sp, #24
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	60f8      	str	r0, [r7, #12]
 80084c6:	60b9      	str	r1, [r7, #8]
 80084c8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80084ca:	2300      	movs	r3, #0
 80084cc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10d      	bne.n	80084f8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d14d      	bne.n	8008580 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	4618      	mov	r0, r3
 80084ea:	f000 ffbd 	bl	8009468 <xTaskPriorityDisinherit>
 80084ee:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2200      	movs	r2, #0
 80084f4:	605a      	str	r2, [r3, #4]
 80084f6:	e043      	b.n	8008580 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d119      	bne.n	8008532 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6898      	ldr	r0, [r3, #8]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008506:	461a      	mov	r2, r3
 8008508:	68b9      	ldr	r1, [r7, #8]
 800850a:	f001 ffd3 	bl	800a4b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	689a      	ldr	r2, [r3, #8]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008516:	441a      	add	r2, r3
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	689a      	ldr	r2, [r3, #8]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	429a      	cmp	r2, r3
 8008526:	d32b      	bcc.n	8008580 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	609a      	str	r2, [r3, #8]
 8008530:	e026      	b.n	8008580 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	68d8      	ldr	r0, [r3, #12]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853a:	461a      	mov	r2, r3
 800853c:	68b9      	ldr	r1, [r7, #8]
 800853e:	f001 ffb9 	bl	800a4b4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	68da      	ldr	r2, [r3, #12]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854a:	425b      	negs	r3, r3
 800854c:	441a      	add	r2, r3
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	68da      	ldr	r2, [r3, #12]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	429a      	cmp	r2, r3
 800855c:	d207      	bcs.n	800856e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	685a      	ldr	r2, [r3, #4]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008566:	425b      	negs	r3, r3
 8008568:	441a      	add	r2, r3
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2b02      	cmp	r3, #2
 8008572:	d105      	bne.n	8008580 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d002      	beq.n	8008580 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	3b01      	subs	r3, #1
 800857e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	1c5a      	adds	r2, r3, #1
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008588:	697b      	ldr	r3, [r7, #20]
}
 800858a:	4618      	mov	r0, r3
 800858c:	3718      	adds	r7, #24
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b082      	sub	sp, #8
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
 800859a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d018      	beq.n	80085d6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	68da      	ldr	r2, [r3, #12]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ac:	441a      	add	r2, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	68da      	ldr	r2, [r3, #12]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d303      	bcc.n	80085c6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	68d9      	ldr	r1, [r3, #12]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ce:	461a      	mov	r2, r3
 80085d0:	6838      	ldr	r0, [r7, #0]
 80085d2:	f001 ff6f 	bl	800a4b4 <memcpy>
	}
}
 80085d6:	bf00      	nop
 80085d8:	3708      	adds	r7, #8
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b084      	sub	sp, #16
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80085e6:	f001 fc3d 	bl	8009e64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085f0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085f2:	e011      	b.n	8008618 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d012      	beq.n	8008622 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	3324      	adds	r3, #36	; 0x24
 8008600:	4618      	mov	r0, r3
 8008602:	f000 fd4f 	bl	80090a4 <xTaskRemoveFromEventList>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d001      	beq.n	8008610 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800860c:	f000 fe26 	bl	800925c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008610:	7bfb      	ldrb	r3, [r7, #15]
 8008612:	3b01      	subs	r3, #1
 8008614:	b2db      	uxtb	r3, r3
 8008616:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008618:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800861c:	2b00      	cmp	r3, #0
 800861e:	dce9      	bgt.n	80085f4 <prvUnlockQueue+0x16>
 8008620:	e000      	b.n	8008624 <prvUnlockQueue+0x46>
					break;
 8008622:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	22ff      	movs	r2, #255	; 0xff
 8008628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800862c:	f001 fc4a 	bl	8009ec4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008630:	f001 fc18 	bl	8009e64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800863a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800863c:	e011      	b.n	8008662 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	691b      	ldr	r3, [r3, #16]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d012      	beq.n	800866c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	3310      	adds	r3, #16
 800864a:	4618      	mov	r0, r3
 800864c:	f000 fd2a 	bl	80090a4 <xTaskRemoveFromEventList>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d001      	beq.n	800865a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008656:	f000 fe01 	bl	800925c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800865a:	7bbb      	ldrb	r3, [r7, #14]
 800865c:	3b01      	subs	r3, #1
 800865e:	b2db      	uxtb	r3, r3
 8008660:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008662:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008666:	2b00      	cmp	r3, #0
 8008668:	dce9      	bgt.n	800863e <prvUnlockQueue+0x60>
 800866a:	e000      	b.n	800866e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800866c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	22ff      	movs	r2, #255	; 0xff
 8008672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008676:	f001 fc25 	bl	8009ec4 <vPortExitCritical>
}
 800867a:	bf00      	nop
 800867c:	3710      	adds	r7, #16
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008682:	b580      	push	{r7, lr}
 8008684:	b084      	sub	sp, #16
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800868a:	f001 fbeb 	bl	8009e64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008692:	2b00      	cmp	r3, #0
 8008694:	d102      	bne.n	800869c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008696:	2301      	movs	r3, #1
 8008698:	60fb      	str	r3, [r7, #12]
 800869a:	e001      	b.n	80086a0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800869c:	2300      	movs	r3, #0
 800869e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086a0:	f001 fc10 	bl	8009ec4 <vPortExitCritical>

	return xReturn;
 80086a4:	68fb      	ldr	r3, [r7, #12]
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b084      	sub	sp, #16
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086b6:	f001 fbd5 	bl	8009e64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d102      	bne.n	80086cc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80086c6:	2301      	movs	r3, #1
 80086c8:	60fb      	str	r3, [r7, #12]
 80086ca:	e001      	b.n	80086d0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80086cc:	2300      	movs	r3, #0
 80086ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086d0:	f001 fbf8 	bl	8009ec4 <vPortExitCritical>

	return xReturn;
 80086d4:	68fb      	ldr	r3, [r7, #12]
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
	...

080086e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80086e0:	b480      	push	{r7}
 80086e2:	b085      	sub	sp, #20
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80086ea:	2300      	movs	r3, #0
 80086ec:	60fb      	str	r3, [r7, #12]
 80086ee:	e014      	b.n	800871a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80086f0:	4a0f      	ldr	r2, [pc, #60]	; (8008730 <vQueueAddToRegistry+0x50>)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d10b      	bne.n	8008714 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80086fc:	490c      	ldr	r1, [pc, #48]	; (8008730 <vQueueAddToRegistry+0x50>)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	683a      	ldr	r2, [r7, #0]
 8008702:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008706:	4a0a      	ldr	r2, [pc, #40]	; (8008730 <vQueueAddToRegistry+0x50>)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	00db      	lsls	r3, r3, #3
 800870c:	4413      	add	r3, r2
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008712:	e006      	b.n	8008722 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	3301      	adds	r3, #1
 8008718:	60fb      	str	r3, [r7, #12]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2b07      	cmp	r3, #7
 800871e:	d9e7      	bls.n	80086f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008720:	bf00      	nop
 8008722:	bf00      	nop
 8008724:	3714      	adds	r7, #20
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	20000968 	.word	0x20000968

08008734 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800873c:	2300      	movs	r3, #0
 800873e:	60fb      	str	r3, [r7, #12]
 8008740:	e016      	b.n	8008770 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008742:	4a10      	ldr	r2, [pc, #64]	; (8008784 <vQueueUnregisterQueue+0x50>)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	00db      	lsls	r3, r3, #3
 8008748:	4413      	add	r3, r2
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	429a      	cmp	r2, r3
 8008750:	d10b      	bne.n	800876a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008752:	4a0c      	ldr	r2, [pc, #48]	; (8008784 <vQueueUnregisterQueue+0x50>)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2100      	movs	r1, #0
 8008758:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800875c:	4a09      	ldr	r2, [pc, #36]	; (8008784 <vQueueUnregisterQueue+0x50>)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	00db      	lsls	r3, r3, #3
 8008762:	4413      	add	r3, r2
 8008764:	2200      	movs	r2, #0
 8008766:	605a      	str	r2, [r3, #4]
				break;
 8008768:	e006      	b.n	8008778 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	3301      	adds	r3, #1
 800876e:	60fb      	str	r3, [r7, #12]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2b07      	cmp	r3, #7
 8008774:	d9e5      	bls.n	8008742 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008776:	bf00      	nop
 8008778:	bf00      	nop
 800877a:	3714      	adds	r7, #20
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr
 8008784:	20000968 	.word	0x20000968

08008788 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008788:	b580      	push	{r7, lr}
 800878a:	b086      	sub	sp, #24
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008798:	f001 fb64 	bl	8009e64 <vPortEnterCritical>
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087a2:	b25b      	sxtb	r3, r3
 80087a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a8:	d103      	bne.n	80087b2 <vQueueWaitForMessageRestricted+0x2a>
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	2200      	movs	r2, #0
 80087ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087b8:	b25b      	sxtb	r3, r3
 80087ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087be:	d103      	bne.n	80087c8 <vQueueWaitForMessageRestricted+0x40>
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087c8:	f001 fb7c 	bl	8009ec4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d106      	bne.n	80087e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	3324      	adds	r3, #36	; 0x24
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	68b9      	ldr	r1, [r7, #8]
 80087dc:	4618      	mov	r0, r3
 80087de:	f000 fc35 	bl	800904c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80087e2:	6978      	ldr	r0, [r7, #20]
 80087e4:	f7ff fefb 	bl	80085de <prvUnlockQueue>
	}
 80087e8:	bf00      	nop
 80087ea:	3718      	adds	r7, #24
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b08e      	sub	sp, #56	; 0x38
 80087f4:	af04      	add	r7, sp, #16
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]
 80087fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80087fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008800:	2b00      	cmp	r3, #0
 8008802:	d10a      	bne.n	800881a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008808:	f383 8811 	msr	BASEPRI, r3
 800880c:	f3bf 8f6f 	isb	sy
 8008810:	f3bf 8f4f 	dsb	sy
 8008814:	623b      	str	r3, [r7, #32]
}
 8008816:	bf00      	nop
 8008818:	e7fe      	b.n	8008818 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800881a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881c:	2b00      	cmp	r3, #0
 800881e:	d10a      	bne.n	8008836 <xTaskCreateStatic+0x46>
	__asm volatile
 8008820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008824:	f383 8811 	msr	BASEPRI, r3
 8008828:	f3bf 8f6f 	isb	sy
 800882c:	f3bf 8f4f 	dsb	sy
 8008830:	61fb      	str	r3, [r7, #28]
}
 8008832:	bf00      	nop
 8008834:	e7fe      	b.n	8008834 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008836:	235c      	movs	r3, #92	; 0x5c
 8008838:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	2b5c      	cmp	r3, #92	; 0x5c
 800883e:	d00a      	beq.n	8008856 <xTaskCreateStatic+0x66>
	__asm volatile
 8008840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008844:	f383 8811 	msr	BASEPRI, r3
 8008848:	f3bf 8f6f 	isb	sy
 800884c:	f3bf 8f4f 	dsb	sy
 8008850:	61bb      	str	r3, [r7, #24]
}
 8008852:	bf00      	nop
 8008854:	e7fe      	b.n	8008854 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008858:	2b00      	cmp	r3, #0
 800885a:	d01e      	beq.n	800889a <xTaskCreateStatic+0xaa>
 800885c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800885e:	2b00      	cmp	r3, #0
 8008860:	d01b      	beq.n	800889a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008864:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008868:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800886a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800886c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886e:	2202      	movs	r2, #2
 8008870:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008874:	2300      	movs	r3, #0
 8008876:	9303      	str	r3, [sp, #12]
 8008878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887a:	9302      	str	r3, [sp, #8]
 800887c:	f107 0314 	add.w	r3, r7, #20
 8008880:	9301      	str	r3, [sp, #4]
 8008882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008884:	9300      	str	r3, [sp, #0]
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	68b9      	ldr	r1, [r7, #8]
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f000 f850 	bl	8008932 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008892:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008894:	f000 f8d4 	bl	8008a40 <prvAddNewTaskToReadyList>
 8008898:	e001      	b.n	800889e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800889a:	2300      	movs	r3, #0
 800889c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800889e:	697b      	ldr	r3, [r7, #20]
	}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3728      	adds	r7, #40	; 0x28
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b08c      	sub	sp, #48	; 0x30
 80088ac:	af04      	add	r7, sp, #16
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	603b      	str	r3, [r7, #0]
 80088b4:	4613      	mov	r3, r2
 80088b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088b8:	88fb      	ldrh	r3, [r7, #6]
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	4618      	mov	r0, r3
 80088be:	f001 fbf3 	bl	800a0a8 <pvPortMalloc>
 80088c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d00e      	beq.n	80088e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80088ca:	205c      	movs	r0, #92	; 0x5c
 80088cc:	f001 fbec 	bl	800a0a8 <pvPortMalloc>
 80088d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d003      	beq.n	80088e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	697a      	ldr	r2, [r7, #20]
 80088dc:	631a      	str	r2, [r3, #48]	; 0x30
 80088de:	e005      	b.n	80088ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80088e0:	6978      	ldr	r0, [r7, #20]
 80088e2:	f001 fca5 	bl	800a230 <vPortFree>
 80088e6:	e001      	b.n	80088ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80088e8:	2300      	movs	r3, #0
 80088ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d017      	beq.n	8008922 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80088fa:	88fa      	ldrh	r2, [r7, #6]
 80088fc:	2300      	movs	r3, #0
 80088fe:	9303      	str	r3, [sp, #12]
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	9302      	str	r3, [sp, #8]
 8008904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008906:	9301      	str	r3, [sp, #4]
 8008908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	68b9      	ldr	r1, [r7, #8]
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f000 f80e 	bl	8008932 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008916:	69f8      	ldr	r0, [r7, #28]
 8008918:	f000 f892 	bl	8008a40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800891c:	2301      	movs	r3, #1
 800891e:	61bb      	str	r3, [r7, #24]
 8008920:	e002      	b.n	8008928 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008922:	f04f 33ff 	mov.w	r3, #4294967295
 8008926:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008928:	69bb      	ldr	r3, [r7, #24]
	}
 800892a:	4618      	mov	r0, r3
 800892c:	3720      	adds	r7, #32
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b088      	sub	sp, #32
 8008936:	af00      	add	r7, sp, #0
 8008938:	60f8      	str	r0, [r7, #12]
 800893a:	60b9      	str	r1, [r7, #8]
 800893c:	607a      	str	r2, [r7, #4]
 800893e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008942:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	461a      	mov	r2, r3
 800894a:	21a5      	movs	r1, #165	; 0xa5
 800894c:	f001 fd86 	bl	800a45c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008952:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800895a:	3b01      	subs	r3, #1
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	4413      	add	r3, r2
 8008960:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	f023 0307 	bic.w	r3, r3, #7
 8008968:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	f003 0307 	and.w	r3, r3, #7
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00a      	beq.n	800898a <prvInitialiseNewTask+0x58>
	__asm volatile
 8008974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008978:	f383 8811 	msr	BASEPRI, r3
 800897c:	f3bf 8f6f 	isb	sy
 8008980:	f3bf 8f4f 	dsb	sy
 8008984:	617b      	str	r3, [r7, #20]
}
 8008986:	bf00      	nop
 8008988:	e7fe      	b.n	8008988 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800898a:	2300      	movs	r3, #0
 800898c:	61fb      	str	r3, [r7, #28]
 800898e:	e012      	b.n	80089b6 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008990:	68ba      	ldr	r2, [r7, #8]
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	4413      	add	r3, r2
 8008996:	7819      	ldrb	r1, [r3, #0]
 8008998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	4413      	add	r3, r2
 800899e:	3334      	adds	r3, #52	; 0x34
 80089a0:	460a      	mov	r2, r1
 80089a2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80089a4:	68ba      	ldr	r2, [r7, #8]
 80089a6:	69fb      	ldr	r3, [r7, #28]
 80089a8:	4413      	add	r3, r2
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d006      	beq.n	80089be <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	3301      	adds	r3, #1
 80089b4:	61fb      	str	r3, [r7, #28]
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	2b0f      	cmp	r3, #15
 80089ba:	d9e9      	bls.n	8008990 <prvInitialiseNewTask+0x5e>
 80089bc:	e000      	b.n	80089c0 <prvInitialiseNewTask+0x8e>
		{
			break;
 80089be:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80089c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c2:	2200      	movs	r2, #0
 80089c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80089c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ca:	2b37      	cmp	r3, #55	; 0x37
 80089cc:	d901      	bls.n	80089d2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80089ce:	2337      	movs	r3, #55	; 0x37
 80089d0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80089d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089d6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80089d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089dc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80089de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e0:	2200      	movs	r2, #0
 80089e2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80089e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e6:	3304      	adds	r3, #4
 80089e8:	4618      	mov	r0, r3
 80089ea:	f7ff f891 	bl	8007b10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80089ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f0:	3318      	adds	r3, #24
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7ff f88c 	bl	8007b10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80089f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089fc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a00:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a06:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a0c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a10:	2200      	movs	r2, #0
 8008a12:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a16:	2200      	movs	r2, #0
 8008a18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008a1c:	683a      	ldr	r2, [r7, #0]
 8008a1e:	68f9      	ldr	r1, [r7, #12]
 8008a20:	69b8      	ldr	r0, [r7, #24]
 8008a22:	f001 f8f5 	bl	8009c10 <pxPortInitialiseStack>
 8008a26:	4602      	mov	r2, r0
 8008a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d002      	beq.n	8008a38 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a36:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a38:	bf00      	nop
 8008a3a:	3720      	adds	r7, #32
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008a48:	f001 fa0c 	bl	8009e64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008a4c:	4b2d      	ldr	r3, [pc, #180]	; (8008b04 <prvAddNewTaskToReadyList+0xc4>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	3301      	adds	r3, #1
 8008a52:	4a2c      	ldr	r2, [pc, #176]	; (8008b04 <prvAddNewTaskToReadyList+0xc4>)
 8008a54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008a56:	4b2c      	ldr	r3, [pc, #176]	; (8008b08 <prvAddNewTaskToReadyList+0xc8>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d109      	bne.n	8008a72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008a5e:	4a2a      	ldr	r2, [pc, #168]	; (8008b08 <prvAddNewTaskToReadyList+0xc8>)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008a64:	4b27      	ldr	r3, [pc, #156]	; (8008b04 <prvAddNewTaskToReadyList+0xc4>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d110      	bne.n	8008a8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008a6c:	f000 fc1a 	bl	80092a4 <prvInitialiseTaskLists>
 8008a70:	e00d      	b.n	8008a8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008a72:	4b26      	ldr	r3, [pc, #152]	; (8008b0c <prvAddNewTaskToReadyList+0xcc>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d109      	bne.n	8008a8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008a7a:	4b23      	ldr	r3, [pc, #140]	; (8008b08 <prvAddNewTaskToReadyList+0xc8>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d802      	bhi.n	8008a8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008a88:	4a1f      	ldr	r2, [pc, #124]	; (8008b08 <prvAddNewTaskToReadyList+0xc8>)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008a8e:	4b20      	ldr	r3, [pc, #128]	; (8008b10 <prvAddNewTaskToReadyList+0xd0>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	3301      	adds	r3, #1
 8008a94:	4a1e      	ldr	r2, [pc, #120]	; (8008b10 <prvAddNewTaskToReadyList+0xd0>)
 8008a96:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008a98:	4b1d      	ldr	r3, [pc, #116]	; (8008b10 <prvAddNewTaskToReadyList+0xd0>)
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aa4:	4b1b      	ldr	r3, [pc, #108]	; (8008b14 <prvAddNewTaskToReadyList+0xd4>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d903      	bls.n	8008ab4 <prvAddNewTaskToReadyList+0x74>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab0:	4a18      	ldr	r2, [pc, #96]	; (8008b14 <prvAddNewTaskToReadyList+0xd4>)
 8008ab2:	6013      	str	r3, [r2, #0]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ab8:	4613      	mov	r3, r2
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	4413      	add	r3, r2
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	4a15      	ldr	r2, [pc, #84]	; (8008b18 <prvAddNewTaskToReadyList+0xd8>)
 8008ac2:	441a      	add	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	3304      	adds	r3, #4
 8008ac8:	4619      	mov	r1, r3
 8008aca:	4610      	mov	r0, r2
 8008acc:	f7ff f82d 	bl	8007b2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008ad0:	f001 f9f8 	bl	8009ec4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008ad4:	4b0d      	ldr	r3, [pc, #52]	; (8008b0c <prvAddNewTaskToReadyList+0xcc>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d00e      	beq.n	8008afa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008adc:	4b0a      	ldr	r3, [pc, #40]	; (8008b08 <prvAddNewTaskToReadyList+0xc8>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d207      	bcs.n	8008afa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008aea:	4b0c      	ldr	r3, [pc, #48]	; (8008b1c <prvAddNewTaskToReadyList+0xdc>)
 8008aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008af0:	601a      	str	r2, [r3, #0]
 8008af2:	f3bf 8f4f 	dsb	sy
 8008af6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008afa:	bf00      	nop
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	20000e7c 	.word	0x20000e7c
 8008b08:	200009a8 	.word	0x200009a8
 8008b0c:	20000e88 	.word	0x20000e88
 8008b10:	20000e98 	.word	0x20000e98
 8008b14:	20000e84 	.word	0x20000e84
 8008b18:	200009ac 	.word	0x200009ac
 8008b1c:	e000ed04 	.word	0xe000ed04

08008b20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d017      	beq.n	8008b62 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008b32:	4b13      	ldr	r3, [pc, #76]	; (8008b80 <vTaskDelay+0x60>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00a      	beq.n	8008b50 <vTaskDelay+0x30>
	__asm volatile
 8008b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b3e:	f383 8811 	msr	BASEPRI, r3
 8008b42:	f3bf 8f6f 	isb	sy
 8008b46:	f3bf 8f4f 	dsb	sy
 8008b4a:	60bb      	str	r3, [r7, #8]
}
 8008b4c:	bf00      	nop
 8008b4e:	e7fe      	b.n	8008b4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008b50:	f000 f880 	bl	8008c54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008b54:	2100      	movs	r1, #0
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 fcf4 	bl	8009544 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008b5c:	f000 f888 	bl	8008c70 <xTaskResumeAll>
 8008b60:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d107      	bne.n	8008b78 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008b68:	4b06      	ldr	r3, [pc, #24]	; (8008b84 <vTaskDelay+0x64>)
 8008b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b6e:	601a      	str	r2, [r3, #0]
 8008b70:	f3bf 8f4f 	dsb	sy
 8008b74:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b78:	bf00      	nop
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	20000ea4 	.word	0x20000ea4
 8008b84:	e000ed04 	.word	0xe000ed04

08008b88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b08a      	sub	sp, #40	; 0x28
 8008b8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008b92:	2300      	movs	r3, #0
 8008b94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008b96:	463a      	mov	r2, r7
 8008b98:	1d39      	adds	r1, r7, #4
 8008b9a:	f107 0308 	add.w	r3, r7, #8
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7fe ff62 	bl	8007a68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008ba4:	6839      	ldr	r1, [r7, #0]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	68ba      	ldr	r2, [r7, #8]
 8008baa:	9202      	str	r2, [sp, #8]
 8008bac:	9301      	str	r3, [sp, #4]
 8008bae:	2300      	movs	r3, #0
 8008bb0:	9300      	str	r3, [sp, #0]
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	460a      	mov	r2, r1
 8008bb6:	4921      	ldr	r1, [pc, #132]	; (8008c3c <vTaskStartScheduler+0xb4>)
 8008bb8:	4821      	ldr	r0, [pc, #132]	; (8008c40 <vTaskStartScheduler+0xb8>)
 8008bba:	f7ff fe19 	bl	80087f0 <xTaskCreateStatic>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	4a20      	ldr	r2, [pc, #128]	; (8008c44 <vTaskStartScheduler+0xbc>)
 8008bc2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008bc4:	4b1f      	ldr	r3, [pc, #124]	; (8008c44 <vTaskStartScheduler+0xbc>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d002      	beq.n	8008bd2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	617b      	str	r3, [r7, #20]
 8008bd0:	e001      	b.n	8008bd6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d102      	bne.n	8008be2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008bdc:	f000 fd06 	bl	80095ec <xTimerCreateTimerTask>
 8008be0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d116      	bne.n	8008c16 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bec:	f383 8811 	msr	BASEPRI, r3
 8008bf0:	f3bf 8f6f 	isb	sy
 8008bf4:	f3bf 8f4f 	dsb	sy
 8008bf8:	613b      	str	r3, [r7, #16]
}
 8008bfa:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008bfc:	4b12      	ldr	r3, [pc, #72]	; (8008c48 <vTaskStartScheduler+0xc0>)
 8008bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8008c02:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008c04:	4b11      	ldr	r3, [pc, #68]	; (8008c4c <vTaskStartScheduler+0xc4>)
 8008c06:	2201      	movs	r2, #1
 8008c08:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008c0a:	4b11      	ldr	r3, [pc, #68]	; (8008c50 <vTaskStartScheduler+0xc8>)
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008c10:	f001 f886 	bl	8009d20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008c14:	e00e      	b.n	8008c34 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c1c:	d10a      	bne.n	8008c34 <vTaskStartScheduler+0xac>
	__asm volatile
 8008c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c22:	f383 8811 	msr	BASEPRI, r3
 8008c26:	f3bf 8f6f 	isb	sy
 8008c2a:	f3bf 8f4f 	dsb	sy
 8008c2e:	60fb      	str	r3, [r7, #12]
}
 8008c30:	bf00      	nop
 8008c32:	e7fe      	b.n	8008c32 <vTaskStartScheduler+0xaa>
}
 8008c34:	bf00      	nop
 8008c36:	3718      	adds	r7, #24
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	0800a520 	.word	0x0800a520
 8008c40:	08009275 	.word	0x08009275
 8008c44:	20000ea0 	.word	0x20000ea0
 8008c48:	20000e9c 	.word	0x20000e9c
 8008c4c:	20000e88 	.word	0x20000e88
 8008c50:	20000e80 	.word	0x20000e80

08008c54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008c54:	b480      	push	{r7}
 8008c56:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008c58:	4b04      	ldr	r3, [pc, #16]	; (8008c6c <vTaskSuspendAll+0x18>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	4a03      	ldr	r2, [pc, #12]	; (8008c6c <vTaskSuspendAll+0x18>)
 8008c60:	6013      	str	r3, [r2, #0]
}
 8008c62:	bf00      	nop
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr
 8008c6c:	20000ea4 	.word	0x20000ea4

08008c70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008c76:	2300      	movs	r3, #0
 8008c78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008c7e:	4b42      	ldr	r3, [pc, #264]	; (8008d88 <xTaskResumeAll+0x118>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d10a      	bne.n	8008c9c <xTaskResumeAll+0x2c>
	__asm volatile
 8008c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8a:	f383 8811 	msr	BASEPRI, r3
 8008c8e:	f3bf 8f6f 	isb	sy
 8008c92:	f3bf 8f4f 	dsb	sy
 8008c96:	603b      	str	r3, [r7, #0]
}
 8008c98:	bf00      	nop
 8008c9a:	e7fe      	b.n	8008c9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008c9c:	f001 f8e2 	bl	8009e64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008ca0:	4b39      	ldr	r3, [pc, #228]	; (8008d88 <xTaskResumeAll+0x118>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	3b01      	subs	r3, #1
 8008ca6:	4a38      	ldr	r2, [pc, #224]	; (8008d88 <xTaskResumeAll+0x118>)
 8008ca8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008caa:	4b37      	ldr	r3, [pc, #220]	; (8008d88 <xTaskResumeAll+0x118>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d162      	bne.n	8008d78 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008cb2:	4b36      	ldr	r3, [pc, #216]	; (8008d8c <xTaskResumeAll+0x11c>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d05e      	beq.n	8008d78 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008cba:	e02f      	b.n	8008d1c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008cbc:	4b34      	ldr	r3, [pc, #208]	; (8008d90 <xTaskResumeAll+0x120>)
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	3318      	adds	r3, #24
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f7fe ff8b 	bl	8007be4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	3304      	adds	r3, #4
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7fe ff86 	bl	8007be4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cdc:	4b2d      	ldr	r3, [pc, #180]	; (8008d94 <xTaskResumeAll+0x124>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d903      	bls.n	8008cec <xTaskResumeAll+0x7c>
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce8:	4a2a      	ldr	r2, [pc, #168]	; (8008d94 <xTaskResumeAll+0x124>)
 8008cea:	6013      	str	r3, [r2, #0]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	4413      	add	r3, r2
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	4a27      	ldr	r2, [pc, #156]	; (8008d98 <xTaskResumeAll+0x128>)
 8008cfa:	441a      	add	r2, r3
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	3304      	adds	r3, #4
 8008d00:	4619      	mov	r1, r3
 8008d02:	4610      	mov	r0, r2
 8008d04:	f7fe ff11 	bl	8007b2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d0c:	4b23      	ldr	r3, [pc, #140]	; (8008d9c <xTaskResumeAll+0x12c>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d302      	bcc.n	8008d1c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008d16:	4b22      	ldr	r3, [pc, #136]	; (8008da0 <xTaskResumeAll+0x130>)
 8008d18:	2201      	movs	r2, #1
 8008d1a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d1c:	4b1c      	ldr	r3, [pc, #112]	; (8008d90 <xTaskResumeAll+0x120>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d1cb      	bne.n	8008cbc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d001      	beq.n	8008d2e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008d2a:	f000 fb59 	bl	80093e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008d2e:	4b1d      	ldr	r3, [pc, #116]	; (8008da4 <xTaskResumeAll+0x134>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d010      	beq.n	8008d5c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008d3a:	f000 f847 	bl	8008dcc <xTaskIncrementTick>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d002      	beq.n	8008d4a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008d44:	4b16      	ldr	r3, [pc, #88]	; (8008da0 <xTaskResumeAll+0x130>)
 8008d46:	2201      	movs	r2, #1
 8008d48:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1f1      	bne.n	8008d3a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8008d56:	4b13      	ldr	r3, [pc, #76]	; (8008da4 <xTaskResumeAll+0x134>)
 8008d58:	2200      	movs	r2, #0
 8008d5a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008d5c:	4b10      	ldr	r3, [pc, #64]	; (8008da0 <xTaskResumeAll+0x130>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d009      	beq.n	8008d78 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008d64:	2301      	movs	r3, #1
 8008d66:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008d68:	4b0f      	ldr	r3, [pc, #60]	; (8008da8 <xTaskResumeAll+0x138>)
 8008d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d6e:	601a      	str	r2, [r3, #0]
 8008d70:	f3bf 8f4f 	dsb	sy
 8008d74:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d78:	f001 f8a4 	bl	8009ec4 <vPortExitCritical>

	return xAlreadyYielded;
 8008d7c:	68bb      	ldr	r3, [r7, #8]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	20000ea4 	.word	0x20000ea4
 8008d8c:	20000e7c 	.word	0x20000e7c
 8008d90:	20000e3c 	.word	0x20000e3c
 8008d94:	20000e84 	.word	0x20000e84
 8008d98:	200009ac 	.word	0x200009ac
 8008d9c:	200009a8 	.word	0x200009a8
 8008da0:	20000e90 	.word	0x20000e90
 8008da4:	20000e8c 	.word	0x20000e8c
 8008da8:	e000ed04 	.word	0xe000ed04

08008dac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008db2:	4b05      	ldr	r3, [pc, #20]	; (8008dc8 <xTaskGetTickCount+0x1c>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008db8:	687b      	ldr	r3, [r7, #4]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	370c      	adds	r7, #12
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr
 8008dc6:	bf00      	nop
 8008dc8:	20000e80 	.word	0x20000e80

08008dcc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b086      	sub	sp, #24
 8008dd0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dd6:	4b51      	ldr	r3, [pc, #324]	; (8008f1c <xTaskIncrementTick+0x150>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	f040 808e 	bne.w	8008efc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008de0:	4b4f      	ldr	r3, [pc, #316]	; (8008f20 <xTaskIncrementTick+0x154>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	3301      	adds	r3, #1
 8008de6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008de8:	4a4d      	ldr	r2, [pc, #308]	; (8008f20 <xTaskIncrementTick+0x154>)
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d120      	bne.n	8008e36 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008df4:	4b4b      	ldr	r3, [pc, #300]	; (8008f24 <xTaskIncrementTick+0x158>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d00a      	beq.n	8008e14 <xTaskIncrementTick+0x48>
	__asm volatile
 8008dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e02:	f383 8811 	msr	BASEPRI, r3
 8008e06:	f3bf 8f6f 	isb	sy
 8008e0a:	f3bf 8f4f 	dsb	sy
 8008e0e:	603b      	str	r3, [r7, #0]
}
 8008e10:	bf00      	nop
 8008e12:	e7fe      	b.n	8008e12 <xTaskIncrementTick+0x46>
 8008e14:	4b43      	ldr	r3, [pc, #268]	; (8008f24 <xTaskIncrementTick+0x158>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	60fb      	str	r3, [r7, #12]
 8008e1a:	4b43      	ldr	r3, [pc, #268]	; (8008f28 <xTaskIncrementTick+0x15c>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a41      	ldr	r2, [pc, #260]	; (8008f24 <xTaskIncrementTick+0x158>)
 8008e20:	6013      	str	r3, [r2, #0]
 8008e22:	4a41      	ldr	r2, [pc, #260]	; (8008f28 <xTaskIncrementTick+0x15c>)
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6013      	str	r3, [r2, #0]
 8008e28:	4b40      	ldr	r3, [pc, #256]	; (8008f2c <xTaskIncrementTick+0x160>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	4a3f      	ldr	r2, [pc, #252]	; (8008f2c <xTaskIncrementTick+0x160>)
 8008e30:	6013      	str	r3, [r2, #0]
 8008e32:	f000 fad5 	bl	80093e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008e36:	4b3e      	ldr	r3, [pc, #248]	; (8008f30 <xTaskIncrementTick+0x164>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	693a      	ldr	r2, [r7, #16]
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d34e      	bcc.n	8008ede <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e40:	4b38      	ldr	r3, [pc, #224]	; (8008f24 <xTaskIncrementTick+0x158>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d101      	bne.n	8008e4e <xTaskIncrementTick+0x82>
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e000      	b.n	8008e50 <xTaskIncrementTick+0x84>
 8008e4e:	2300      	movs	r3, #0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d004      	beq.n	8008e5e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e54:	4b36      	ldr	r3, [pc, #216]	; (8008f30 <xTaskIncrementTick+0x164>)
 8008e56:	f04f 32ff 	mov.w	r2, #4294967295
 8008e5a:	601a      	str	r2, [r3, #0]
					break;
 8008e5c:	e03f      	b.n	8008ede <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008e5e:	4b31      	ldr	r3, [pc, #196]	; (8008f24 <xTaskIncrementTick+0x158>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	68db      	ldr	r3, [r3, #12]
 8008e66:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008e6e:	693a      	ldr	r2, [r7, #16]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d203      	bcs.n	8008e7e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008e76:	4a2e      	ldr	r2, [pc, #184]	; (8008f30 <xTaskIncrementTick+0x164>)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6013      	str	r3, [r2, #0]
						break;
 8008e7c:	e02f      	b.n	8008ede <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	3304      	adds	r3, #4
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7fe feae 	bl	8007be4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d004      	beq.n	8008e9a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	3318      	adds	r3, #24
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7fe fea5 	bl	8007be4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e9e:	4b25      	ldr	r3, [pc, #148]	; (8008f34 <xTaskIncrementTick+0x168>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d903      	bls.n	8008eae <xTaskIncrementTick+0xe2>
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eaa:	4a22      	ldr	r2, [pc, #136]	; (8008f34 <xTaskIncrementTick+0x168>)
 8008eac:	6013      	str	r3, [r2, #0]
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	4413      	add	r3, r2
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	4a1f      	ldr	r2, [pc, #124]	; (8008f38 <xTaskIncrementTick+0x16c>)
 8008ebc:	441a      	add	r2, r3
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	3304      	adds	r3, #4
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	4610      	mov	r0, r2
 8008ec6:	f7fe fe30 	bl	8007b2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ece:	4b1b      	ldr	r3, [pc, #108]	; (8008f3c <xTaskIncrementTick+0x170>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d3b3      	bcc.n	8008e40 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008edc:	e7b0      	b.n	8008e40 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008ede:	4b17      	ldr	r3, [pc, #92]	; (8008f3c <xTaskIncrementTick+0x170>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ee4:	4914      	ldr	r1, [pc, #80]	; (8008f38 <xTaskIncrementTick+0x16c>)
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	4413      	add	r3, r2
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	440b      	add	r3, r1
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d907      	bls.n	8008f06 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	617b      	str	r3, [r7, #20]
 8008efa:	e004      	b.n	8008f06 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008efc:	4b10      	ldr	r3, [pc, #64]	; (8008f40 <xTaskIncrementTick+0x174>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	3301      	adds	r3, #1
 8008f02:	4a0f      	ldr	r2, [pc, #60]	; (8008f40 <xTaskIncrementTick+0x174>)
 8008f04:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008f06:	4b0f      	ldr	r3, [pc, #60]	; (8008f44 <xTaskIncrementTick+0x178>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d001      	beq.n	8008f12 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008f12:	697b      	ldr	r3, [r7, #20]
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3718      	adds	r7, #24
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	20000ea4 	.word	0x20000ea4
 8008f20:	20000e80 	.word	0x20000e80
 8008f24:	20000e34 	.word	0x20000e34
 8008f28:	20000e38 	.word	0x20000e38
 8008f2c:	20000e94 	.word	0x20000e94
 8008f30:	20000e9c 	.word	0x20000e9c
 8008f34:	20000e84 	.word	0x20000e84
 8008f38:	200009ac 	.word	0x200009ac
 8008f3c:	200009a8 	.word	0x200009a8
 8008f40:	20000e8c 	.word	0x20000e8c
 8008f44:	20000e90 	.word	0x20000e90

08008f48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b085      	sub	sp, #20
 8008f4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008f4e:	4b28      	ldr	r3, [pc, #160]	; (8008ff0 <vTaskSwitchContext+0xa8>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d003      	beq.n	8008f5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008f56:	4b27      	ldr	r3, [pc, #156]	; (8008ff4 <vTaskSwitchContext+0xac>)
 8008f58:	2201      	movs	r2, #1
 8008f5a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008f5c:	e041      	b.n	8008fe2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008f5e:	4b25      	ldr	r3, [pc, #148]	; (8008ff4 <vTaskSwitchContext+0xac>)
 8008f60:	2200      	movs	r2, #0
 8008f62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008f64:	4b24      	ldr	r3, [pc, #144]	; (8008ff8 <vTaskSwitchContext+0xb0>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	60fb      	str	r3, [r7, #12]
 8008f6a:	e010      	b.n	8008f8e <vTaskSwitchContext+0x46>
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d10a      	bne.n	8008f88 <vTaskSwitchContext+0x40>
	__asm volatile
 8008f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f76:	f383 8811 	msr	BASEPRI, r3
 8008f7a:	f3bf 8f6f 	isb	sy
 8008f7e:	f3bf 8f4f 	dsb	sy
 8008f82:	607b      	str	r3, [r7, #4]
}
 8008f84:	bf00      	nop
 8008f86:	e7fe      	b.n	8008f86 <vTaskSwitchContext+0x3e>
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	60fb      	str	r3, [r7, #12]
 8008f8e:	491b      	ldr	r1, [pc, #108]	; (8008ffc <vTaskSwitchContext+0xb4>)
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	4613      	mov	r3, r2
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	4413      	add	r3, r2
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	440b      	add	r3, r1
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d0e4      	beq.n	8008f6c <vTaskSwitchContext+0x24>
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	4413      	add	r3, r2
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	4a13      	ldr	r2, [pc, #76]	; (8008ffc <vTaskSwitchContext+0xb4>)
 8008fae:	4413      	add	r3, r2
 8008fb0:	60bb      	str	r3, [r7, #8]
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	685a      	ldr	r2, [r3, #4]
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	605a      	str	r2, [r3, #4]
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	685a      	ldr	r2, [r3, #4]
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	3308      	adds	r3, #8
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d104      	bne.n	8008fd2 <vTaskSwitchContext+0x8a>
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	685a      	ldr	r2, [r3, #4]
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	605a      	str	r2, [r3, #4]
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	4a09      	ldr	r2, [pc, #36]	; (8009000 <vTaskSwitchContext+0xb8>)
 8008fda:	6013      	str	r3, [r2, #0]
 8008fdc:	4a06      	ldr	r2, [pc, #24]	; (8008ff8 <vTaskSwitchContext+0xb0>)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6013      	str	r3, [r2, #0]
}
 8008fe2:	bf00      	nop
 8008fe4:	3714      	adds	r7, #20
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	20000ea4 	.word	0x20000ea4
 8008ff4:	20000e90 	.word	0x20000e90
 8008ff8:	20000e84 	.word	0x20000e84
 8008ffc:	200009ac 	.word	0x200009ac
 8009000:	200009a8 	.word	0x200009a8

08009004 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d10a      	bne.n	800902a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009018:	f383 8811 	msr	BASEPRI, r3
 800901c:	f3bf 8f6f 	isb	sy
 8009020:	f3bf 8f4f 	dsb	sy
 8009024:	60fb      	str	r3, [r7, #12]
}
 8009026:	bf00      	nop
 8009028:	e7fe      	b.n	8009028 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800902a:	4b07      	ldr	r3, [pc, #28]	; (8009048 <vTaskPlaceOnEventList+0x44>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	3318      	adds	r3, #24
 8009030:	4619      	mov	r1, r3
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f7fe fd9d 	bl	8007b72 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009038:	2101      	movs	r1, #1
 800903a:	6838      	ldr	r0, [r7, #0]
 800903c:	f000 fa82 	bl	8009544 <prvAddCurrentTaskToDelayedList>
}
 8009040:	bf00      	nop
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}
 8009048:	200009a8 	.word	0x200009a8

0800904c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800904c:	b580      	push	{r7, lr}
 800904e:	b086      	sub	sp, #24
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d10a      	bne.n	8009074 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800905e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009062:	f383 8811 	msr	BASEPRI, r3
 8009066:	f3bf 8f6f 	isb	sy
 800906a:	f3bf 8f4f 	dsb	sy
 800906e:	617b      	str	r3, [r7, #20]
}
 8009070:	bf00      	nop
 8009072:	e7fe      	b.n	8009072 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009074:	4b0a      	ldr	r3, [pc, #40]	; (80090a0 <vTaskPlaceOnEventListRestricted+0x54>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	3318      	adds	r3, #24
 800907a:	4619      	mov	r1, r3
 800907c:	68f8      	ldr	r0, [r7, #12]
 800907e:	f7fe fd54 	bl	8007b2a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d002      	beq.n	800908e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009088:	f04f 33ff 	mov.w	r3, #4294967295
 800908c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800908e:	6879      	ldr	r1, [r7, #4]
 8009090:	68b8      	ldr	r0, [r7, #8]
 8009092:	f000 fa57 	bl	8009544 <prvAddCurrentTaskToDelayedList>
	}
 8009096:	bf00      	nop
 8009098:	3718      	adds	r7, #24
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	200009a8 	.word	0x200009a8

080090a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b086      	sub	sp, #24
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d10a      	bne.n	80090d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80090ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090be:	f383 8811 	msr	BASEPRI, r3
 80090c2:	f3bf 8f6f 	isb	sy
 80090c6:	f3bf 8f4f 	dsb	sy
 80090ca:	60fb      	str	r3, [r7, #12]
}
 80090cc:	bf00      	nop
 80090ce:	e7fe      	b.n	80090ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	3318      	adds	r3, #24
 80090d4:	4618      	mov	r0, r3
 80090d6:	f7fe fd85 	bl	8007be4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090da:	4b1e      	ldr	r3, [pc, #120]	; (8009154 <xTaskRemoveFromEventList+0xb0>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d11d      	bne.n	800911e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	3304      	adds	r3, #4
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7fe fd7c 	bl	8007be4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090f0:	4b19      	ldr	r3, [pc, #100]	; (8009158 <xTaskRemoveFromEventList+0xb4>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d903      	bls.n	8009100 <xTaskRemoveFromEventList+0x5c>
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090fc:	4a16      	ldr	r2, [pc, #88]	; (8009158 <xTaskRemoveFromEventList+0xb4>)
 80090fe:	6013      	str	r3, [r2, #0]
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009104:	4613      	mov	r3, r2
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	4413      	add	r3, r2
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	4a13      	ldr	r2, [pc, #76]	; (800915c <xTaskRemoveFromEventList+0xb8>)
 800910e:	441a      	add	r2, r3
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	3304      	adds	r3, #4
 8009114:	4619      	mov	r1, r3
 8009116:	4610      	mov	r0, r2
 8009118:	f7fe fd07 	bl	8007b2a <vListInsertEnd>
 800911c:	e005      	b.n	800912a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	3318      	adds	r3, #24
 8009122:	4619      	mov	r1, r3
 8009124:	480e      	ldr	r0, [pc, #56]	; (8009160 <xTaskRemoveFromEventList+0xbc>)
 8009126:	f7fe fd00 	bl	8007b2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800912e:	4b0d      	ldr	r3, [pc, #52]	; (8009164 <xTaskRemoveFromEventList+0xc0>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009134:	429a      	cmp	r2, r3
 8009136:	d905      	bls.n	8009144 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009138:	2301      	movs	r3, #1
 800913a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800913c:	4b0a      	ldr	r3, [pc, #40]	; (8009168 <xTaskRemoveFromEventList+0xc4>)
 800913e:	2201      	movs	r2, #1
 8009140:	601a      	str	r2, [r3, #0]
 8009142:	e001      	b.n	8009148 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009144:	2300      	movs	r3, #0
 8009146:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009148:	697b      	ldr	r3, [r7, #20]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3718      	adds	r7, #24
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	20000ea4 	.word	0x20000ea4
 8009158:	20000e84 	.word	0x20000e84
 800915c:	200009ac 	.word	0x200009ac
 8009160:	20000e3c 	.word	0x20000e3c
 8009164:	200009a8 	.word	0x200009a8
 8009168:	20000e90 	.word	0x20000e90

0800916c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009174:	4b06      	ldr	r3, [pc, #24]	; (8009190 <vTaskInternalSetTimeOutState+0x24>)
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800917c:	4b05      	ldr	r3, [pc, #20]	; (8009194 <vTaskInternalSetTimeOutState+0x28>)
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	605a      	str	r2, [r3, #4]
}
 8009184:	bf00      	nop
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr
 8009190:	20000e94 	.word	0x20000e94
 8009194:	20000e80 	.word	0x20000e80

08009198 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b088      	sub	sp, #32
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d10a      	bne.n	80091be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80091a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ac:	f383 8811 	msr	BASEPRI, r3
 80091b0:	f3bf 8f6f 	isb	sy
 80091b4:	f3bf 8f4f 	dsb	sy
 80091b8:	613b      	str	r3, [r7, #16]
}
 80091ba:	bf00      	nop
 80091bc:	e7fe      	b.n	80091bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d10a      	bne.n	80091da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80091c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c8:	f383 8811 	msr	BASEPRI, r3
 80091cc:	f3bf 8f6f 	isb	sy
 80091d0:	f3bf 8f4f 	dsb	sy
 80091d4:	60fb      	str	r3, [r7, #12]
}
 80091d6:	bf00      	nop
 80091d8:	e7fe      	b.n	80091d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80091da:	f000 fe43 	bl	8009e64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80091de:	4b1d      	ldr	r3, [pc, #116]	; (8009254 <xTaskCheckForTimeOut+0xbc>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	69ba      	ldr	r2, [r7, #24]
 80091ea:	1ad3      	subs	r3, r2, r3
 80091ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f6:	d102      	bne.n	80091fe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80091f8:	2300      	movs	r3, #0
 80091fa:	61fb      	str	r3, [r7, #28]
 80091fc:	e023      	b.n	8009246 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	4b15      	ldr	r3, [pc, #84]	; (8009258 <xTaskCheckForTimeOut+0xc0>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	429a      	cmp	r2, r3
 8009208:	d007      	beq.n	800921a <xTaskCheckForTimeOut+0x82>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	69ba      	ldr	r2, [r7, #24]
 8009210:	429a      	cmp	r2, r3
 8009212:	d302      	bcc.n	800921a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009214:	2301      	movs	r3, #1
 8009216:	61fb      	str	r3, [r7, #28]
 8009218:	e015      	b.n	8009246 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	697a      	ldr	r2, [r7, #20]
 8009220:	429a      	cmp	r2, r3
 8009222:	d20b      	bcs.n	800923c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	1ad2      	subs	r2, r2, r3
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f7ff ff9b 	bl	800916c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009236:	2300      	movs	r3, #0
 8009238:	61fb      	str	r3, [r7, #28]
 800923a:	e004      	b.n	8009246 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	2200      	movs	r2, #0
 8009240:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009242:	2301      	movs	r3, #1
 8009244:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009246:	f000 fe3d 	bl	8009ec4 <vPortExitCritical>

	return xReturn;
 800924a:	69fb      	ldr	r3, [r7, #28]
}
 800924c:	4618      	mov	r0, r3
 800924e:	3720      	adds	r7, #32
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	20000e80 	.word	0x20000e80
 8009258:	20000e94 	.word	0x20000e94

0800925c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800925c:	b480      	push	{r7}
 800925e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009260:	4b03      	ldr	r3, [pc, #12]	; (8009270 <vTaskMissedYield+0x14>)
 8009262:	2201      	movs	r2, #1
 8009264:	601a      	str	r2, [r3, #0]
}
 8009266:	bf00      	nop
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr
 8009270:	20000e90 	.word	0x20000e90

08009274 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800927c:	f000 f852 	bl	8009324 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009280:	4b06      	ldr	r3, [pc, #24]	; (800929c <prvIdleTask+0x28>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2b01      	cmp	r3, #1
 8009286:	d9f9      	bls.n	800927c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009288:	4b05      	ldr	r3, [pc, #20]	; (80092a0 <prvIdleTask+0x2c>)
 800928a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800928e:	601a      	str	r2, [r3, #0]
 8009290:	f3bf 8f4f 	dsb	sy
 8009294:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009298:	e7f0      	b.n	800927c <prvIdleTask+0x8>
 800929a:	bf00      	nop
 800929c:	200009ac 	.word	0x200009ac
 80092a0:	e000ed04 	.word	0xe000ed04

080092a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092aa:	2300      	movs	r3, #0
 80092ac:	607b      	str	r3, [r7, #4]
 80092ae:	e00c      	b.n	80092ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	4613      	mov	r3, r2
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	4413      	add	r3, r2
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	4a12      	ldr	r2, [pc, #72]	; (8009304 <prvInitialiseTaskLists+0x60>)
 80092bc:	4413      	add	r3, r2
 80092be:	4618      	mov	r0, r3
 80092c0:	f7fe fc06 	bl	8007ad0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	3301      	adds	r3, #1
 80092c8:	607b      	str	r3, [r7, #4]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2b37      	cmp	r3, #55	; 0x37
 80092ce:	d9ef      	bls.n	80092b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80092d0:	480d      	ldr	r0, [pc, #52]	; (8009308 <prvInitialiseTaskLists+0x64>)
 80092d2:	f7fe fbfd 	bl	8007ad0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80092d6:	480d      	ldr	r0, [pc, #52]	; (800930c <prvInitialiseTaskLists+0x68>)
 80092d8:	f7fe fbfa 	bl	8007ad0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80092dc:	480c      	ldr	r0, [pc, #48]	; (8009310 <prvInitialiseTaskLists+0x6c>)
 80092de:	f7fe fbf7 	bl	8007ad0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80092e2:	480c      	ldr	r0, [pc, #48]	; (8009314 <prvInitialiseTaskLists+0x70>)
 80092e4:	f7fe fbf4 	bl	8007ad0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80092e8:	480b      	ldr	r0, [pc, #44]	; (8009318 <prvInitialiseTaskLists+0x74>)
 80092ea:	f7fe fbf1 	bl	8007ad0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80092ee:	4b0b      	ldr	r3, [pc, #44]	; (800931c <prvInitialiseTaskLists+0x78>)
 80092f0:	4a05      	ldr	r2, [pc, #20]	; (8009308 <prvInitialiseTaskLists+0x64>)
 80092f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80092f4:	4b0a      	ldr	r3, [pc, #40]	; (8009320 <prvInitialiseTaskLists+0x7c>)
 80092f6:	4a05      	ldr	r2, [pc, #20]	; (800930c <prvInitialiseTaskLists+0x68>)
 80092f8:	601a      	str	r2, [r3, #0]
}
 80092fa:	bf00      	nop
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	200009ac 	.word	0x200009ac
 8009308:	20000e0c 	.word	0x20000e0c
 800930c:	20000e20 	.word	0x20000e20
 8009310:	20000e3c 	.word	0x20000e3c
 8009314:	20000e50 	.word	0x20000e50
 8009318:	20000e68 	.word	0x20000e68
 800931c:	20000e34 	.word	0x20000e34
 8009320:	20000e38 	.word	0x20000e38

08009324 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800932a:	e019      	b.n	8009360 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800932c:	f000 fd9a 	bl	8009e64 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009330:	4b10      	ldr	r3, [pc, #64]	; (8009374 <prvCheckTasksWaitingTermination+0x50>)
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	68db      	ldr	r3, [r3, #12]
 8009336:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	3304      	adds	r3, #4
 800933c:	4618      	mov	r0, r3
 800933e:	f7fe fc51 	bl	8007be4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009342:	4b0d      	ldr	r3, [pc, #52]	; (8009378 <prvCheckTasksWaitingTermination+0x54>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	3b01      	subs	r3, #1
 8009348:	4a0b      	ldr	r2, [pc, #44]	; (8009378 <prvCheckTasksWaitingTermination+0x54>)
 800934a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800934c:	4b0b      	ldr	r3, [pc, #44]	; (800937c <prvCheckTasksWaitingTermination+0x58>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	3b01      	subs	r3, #1
 8009352:	4a0a      	ldr	r2, [pc, #40]	; (800937c <prvCheckTasksWaitingTermination+0x58>)
 8009354:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009356:	f000 fdb5 	bl	8009ec4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 f810 	bl	8009380 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009360:	4b06      	ldr	r3, [pc, #24]	; (800937c <prvCheckTasksWaitingTermination+0x58>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d1e1      	bne.n	800932c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009368:	bf00      	nop
 800936a:	bf00      	nop
 800936c:	3708      	adds	r7, #8
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	20000e50 	.word	0x20000e50
 8009378:	20000e7c 	.word	0x20000e7c
 800937c:	20000e64 	.word	0x20000e64

08009380 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800938e:	2b00      	cmp	r3, #0
 8009390:	d108      	bne.n	80093a4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009396:	4618      	mov	r0, r3
 8009398:	f000 ff4a 	bl	800a230 <vPortFree>
				vPortFree( pxTCB );
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 ff47 	bl	800a230 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80093a2:	e018      	b.n	80093d6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d103      	bne.n	80093b6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 ff3e 	bl	800a230 <vPortFree>
	}
 80093b4:	e00f      	b.n	80093d6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80093bc:	2b02      	cmp	r3, #2
 80093be:	d00a      	beq.n	80093d6 <prvDeleteTCB+0x56>
	__asm volatile
 80093c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c4:	f383 8811 	msr	BASEPRI, r3
 80093c8:	f3bf 8f6f 	isb	sy
 80093cc:	f3bf 8f4f 	dsb	sy
 80093d0:	60fb      	str	r3, [r7, #12]
}
 80093d2:	bf00      	nop
 80093d4:	e7fe      	b.n	80093d4 <prvDeleteTCB+0x54>
	}
 80093d6:	bf00      	nop
 80093d8:	3710      	adds	r7, #16
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
	...

080093e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093e6:	4b0f      	ldr	r3, [pc, #60]	; (8009424 <prvResetNextTaskUnblockTime+0x44>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d101      	bne.n	80093f4 <prvResetNextTaskUnblockTime+0x14>
 80093f0:	2301      	movs	r3, #1
 80093f2:	e000      	b.n	80093f6 <prvResetNextTaskUnblockTime+0x16>
 80093f4:	2300      	movs	r3, #0
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d004      	beq.n	8009404 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80093fa:	4b0b      	ldr	r3, [pc, #44]	; (8009428 <prvResetNextTaskUnblockTime+0x48>)
 80093fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009400:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009402:	e008      	b.n	8009416 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009404:	4b07      	ldr	r3, [pc, #28]	; (8009424 <prvResetNextTaskUnblockTime+0x44>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	4a05      	ldr	r2, [pc, #20]	; (8009428 <prvResetNextTaskUnblockTime+0x48>)
 8009414:	6013      	str	r3, [r2, #0]
}
 8009416:	bf00      	nop
 8009418:	370c      	adds	r7, #12
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop
 8009424:	20000e34 	.word	0x20000e34
 8009428:	20000e9c 	.word	0x20000e9c

0800942c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800942c:	b480      	push	{r7}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009432:	4b0b      	ldr	r3, [pc, #44]	; (8009460 <xTaskGetSchedulerState+0x34>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d102      	bne.n	8009440 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800943a:	2301      	movs	r3, #1
 800943c:	607b      	str	r3, [r7, #4]
 800943e:	e008      	b.n	8009452 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009440:	4b08      	ldr	r3, [pc, #32]	; (8009464 <xTaskGetSchedulerState+0x38>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d102      	bne.n	800944e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009448:	2302      	movs	r3, #2
 800944a:	607b      	str	r3, [r7, #4]
 800944c:	e001      	b.n	8009452 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800944e:	2300      	movs	r3, #0
 8009450:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009452:	687b      	ldr	r3, [r7, #4]
	}
 8009454:	4618      	mov	r0, r3
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr
 8009460:	20000e88 	.word	0x20000e88
 8009464:	20000ea4 	.word	0x20000ea4

08009468 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009468:	b580      	push	{r7, lr}
 800946a:	b086      	sub	sp, #24
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009474:	2300      	movs	r3, #0
 8009476:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d056      	beq.n	800952c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800947e:	4b2e      	ldr	r3, [pc, #184]	; (8009538 <xTaskPriorityDisinherit+0xd0>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	693a      	ldr	r2, [r7, #16]
 8009484:	429a      	cmp	r2, r3
 8009486:	d00a      	beq.n	800949e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948c:	f383 8811 	msr	BASEPRI, r3
 8009490:	f3bf 8f6f 	isb	sy
 8009494:	f3bf 8f4f 	dsb	sy
 8009498:	60fb      	str	r3, [r7, #12]
}
 800949a:	bf00      	nop
 800949c:	e7fe      	b.n	800949c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d10a      	bne.n	80094bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80094a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094aa:	f383 8811 	msr	BASEPRI, r3
 80094ae:	f3bf 8f6f 	isb	sy
 80094b2:	f3bf 8f4f 	dsb	sy
 80094b6:	60bb      	str	r3, [r7, #8]
}
 80094b8:	bf00      	nop
 80094ba:	e7fe      	b.n	80094ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094c0:	1e5a      	subs	r2, r3, #1
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d02c      	beq.n	800952c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d128      	bne.n	800952c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	3304      	adds	r3, #4
 80094de:	4618      	mov	r0, r3
 80094e0:	f7fe fb80 	bl	8007be4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094fc:	4b0f      	ldr	r3, [pc, #60]	; (800953c <xTaskPriorityDisinherit+0xd4>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	429a      	cmp	r2, r3
 8009502:	d903      	bls.n	800950c <xTaskPriorityDisinherit+0xa4>
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009508:	4a0c      	ldr	r2, [pc, #48]	; (800953c <xTaskPriorityDisinherit+0xd4>)
 800950a:	6013      	str	r3, [r2, #0]
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009510:	4613      	mov	r3, r2
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	4413      	add	r3, r2
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	4a09      	ldr	r2, [pc, #36]	; (8009540 <xTaskPriorityDisinherit+0xd8>)
 800951a:	441a      	add	r2, r3
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	3304      	adds	r3, #4
 8009520:	4619      	mov	r1, r3
 8009522:	4610      	mov	r0, r2
 8009524:	f7fe fb01 	bl	8007b2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009528:	2301      	movs	r3, #1
 800952a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800952c:	697b      	ldr	r3, [r7, #20]
	}
 800952e:	4618      	mov	r0, r3
 8009530:	3718      	adds	r7, #24
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	200009a8 	.word	0x200009a8
 800953c:	20000e84 	.word	0x20000e84
 8009540:	200009ac 	.word	0x200009ac

08009544 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800954e:	4b21      	ldr	r3, [pc, #132]	; (80095d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009554:	4b20      	ldr	r3, [pc, #128]	; (80095d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	3304      	adds	r3, #4
 800955a:	4618      	mov	r0, r3
 800955c:	f7fe fb42 	bl	8007be4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009566:	d10a      	bne.n	800957e <prvAddCurrentTaskToDelayedList+0x3a>
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d007      	beq.n	800957e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800956e:	4b1a      	ldr	r3, [pc, #104]	; (80095d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	3304      	adds	r3, #4
 8009574:	4619      	mov	r1, r3
 8009576:	4819      	ldr	r0, [pc, #100]	; (80095dc <prvAddCurrentTaskToDelayedList+0x98>)
 8009578:	f7fe fad7 	bl	8007b2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800957c:	e026      	b.n	80095cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800957e:	68fa      	ldr	r2, [r7, #12]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4413      	add	r3, r2
 8009584:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009586:	4b14      	ldr	r3, [pc, #80]	; (80095d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	68ba      	ldr	r2, [r7, #8]
 800958c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800958e:	68ba      	ldr	r2, [r7, #8]
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	429a      	cmp	r2, r3
 8009594:	d209      	bcs.n	80095aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009596:	4b12      	ldr	r3, [pc, #72]	; (80095e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	4b0f      	ldr	r3, [pc, #60]	; (80095d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	3304      	adds	r3, #4
 80095a0:	4619      	mov	r1, r3
 80095a2:	4610      	mov	r0, r2
 80095a4:	f7fe fae5 	bl	8007b72 <vListInsert>
}
 80095a8:	e010      	b.n	80095cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095aa:	4b0e      	ldr	r3, [pc, #56]	; (80095e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	4b0a      	ldr	r3, [pc, #40]	; (80095d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	3304      	adds	r3, #4
 80095b4:	4619      	mov	r1, r3
 80095b6:	4610      	mov	r0, r2
 80095b8:	f7fe fadb 	bl	8007b72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80095bc:	4b0a      	ldr	r3, [pc, #40]	; (80095e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	68ba      	ldr	r2, [r7, #8]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d202      	bcs.n	80095cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80095c6:	4a08      	ldr	r2, [pc, #32]	; (80095e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	6013      	str	r3, [r2, #0]
}
 80095cc:	bf00      	nop
 80095ce:	3710      	adds	r7, #16
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	20000e80 	.word	0x20000e80
 80095d8:	200009a8 	.word	0x200009a8
 80095dc:	20000e68 	.word	0x20000e68
 80095e0:	20000e38 	.word	0x20000e38
 80095e4:	20000e34 	.word	0x20000e34
 80095e8:	20000e9c 	.word	0x20000e9c

080095ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b08a      	sub	sp, #40	; 0x28
 80095f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80095f2:	2300      	movs	r3, #0
 80095f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80095f6:	f000 facb 	bl	8009b90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80095fa:	4b1c      	ldr	r3, [pc, #112]	; (800966c <xTimerCreateTimerTask+0x80>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d021      	beq.n	8009646 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009602:	2300      	movs	r3, #0
 8009604:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009606:	2300      	movs	r3, #0
 8009608:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800960a:	1d3a      	adds	r2, r7, #4
 800960c:	f107 0108 	add.w	r1, r7, #8
 8009610:	f107 030c 	add.w	r3, r7, #12
 8009614:	4618      	mov	r0, r3
 8009616:	f7fe fa41 	bl	8007a9c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800961a:	6879      	ldr	r1, [r7, #4]
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	68fa      	ldr	r2, [r7, #12]
 8009620:	9202      	str	r2, [sp, #8]
 8009622:	9301      	str	r3, [sp, #4]
 8009624:	2302      	movs	r3, #2
 8009626:	9300      	str	r3, [sp, #0]
 8009628:	2300      	movs	r3, #0
 800962a:	460a      	mov	r2, r1
 800962c:	4910      	ldr	r1, [pc, #64]	; (8009670 <xTimerCreateTimerTask+0x84>)
 800962e:	4811      	ldr	r0, [pc, #68]	; (8009674 <xTimerCreateTimerTask+0x88>)
 8009630:	f7ff f8de 	bl	80087f0 <xTaskCreateStatic>
 8009634:	4603      	mov	r3, r0
 8009636:	4a10      	ldr	r2, [pc, #64]	; (8009678 <xTimerCreateTimerTask+0x8c>)
 8009638:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800963a:	4b0f      	ldr	r3, [pc, #60]	; (8009678 <xTimerCreateTimerTask+0x8c>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d001      	beq.n	8009646 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009642:	2301      	movs	r3, #1
 8009644:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d10a      	bne.n	8009662 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800964c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009650:	f383 8811 	msr	BASEPRI, r3
 8009654:	f3bf 8f6f 	isb	sy
 8009658:	f3bf 8f4f 	dsb	sy
 800965c:	613b      	str	r3, [r7, #16]
}
 800965e:	bf00      	nop
 8009660:	e7fe      	b.n	8009660 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009662:	697b      	ldr	r3, [r7, #20]
}
 8009664:	4618      	mov	r0, r3
 8009666:	3718      	adds	r7, #24
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}
 800966c:	20000ed8 	.word	0x20000ed8
 8009670:	0800a528 	.word	0x0800a528
 8009674:	08009799 	.word	0x08009799
 8009678:	20000edc 	.word	0x20000edc

0800967c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b08a      	sub	sp, #40	; 0x28
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	607a      	str	r2, [r7, #4]
 8009688:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800968a:	2300      	movs	r3, #0
 800968c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d10a      	bne.n	80096aa <xTimerGenericCommand+0x2e>
	__asm volatile
 8009694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009698:	f383 8811 	msr	BASEPRI, r3
 800969c:	f3bf 8f6f 	isb	sy
 80096a0:	f3bf 8f4f 	dsb	sy
 80096a4:	623b      	str	r3, [r7, #32]
}
 80096a6:	bf00      	nop
 80096a8:	e7fe      	b.n	80096a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80096aa:	4b1a      	ldr	r3, [pc, #104]	; (8009714 <xTimerGenericCommand+0x98>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d02a      	beq.n	8009708 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	2b05      	cmp	r3, #5
 80096c2:	dc18      	bgt.n	80096f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80096c4:	f7ff feb2 	bl	800942c <xTaskGetSchedulerState>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b02      	cmp	r3, #2
 80096cc:	d109      	bne.n	80096e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80096ce:	4b11      	ldr	r3, [pc, #68]	; (8009714 <xTimerGenericCommand+0x98>)
 80096d0:	6818      	ldr	r0, [r3, #0]
 80096d2:	f107 0110 	add.w	r1, r7, #16
 80096d6:	2300      	movs	r3, #0
 80096d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096da:	f7fe fc57 	bl	8007f8c <xQueueGenericSend>
 80096de:	6278      	str	r0, [r7, #36]	; 0x24
 80096e0:	e012      	b.n	8009708 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80096e2:	4b0c      	ldr	r3, [pc, #48]	; (8009714 <xTimerGenericCommand+0x98>)
 80096e4:	6818      	ldr	r0, [r3, #0]
 80096e6:	f107 0110 	add.w	r1, r7, #16
 80096ea:	2300      	movs	r3, #0
 80096ec:	2200      	movs	r2, #0
 80096ee:	f7fe fc4d 	bl	8007f8c <xQueueGenericSend>
 80096f2:	6278      	str	r0, [r7, #36]	; 0x24
 80096f4:	e008      	b.n	8009708 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80096f6:	4b07      	ldr	r3, [pc, #28]	; (8009714 <xTimerGenericCommand+0x98>)
 80096f8:	6818      	ldr	r0, [r3, #0]
 80096fa:	f107 0110 	add.w	r1, r7, #16
 80096fe:	2300      	movs	r3, #0
 8009700:	683a      	ldr	r2, [r7, #0]
 8009702:	f7fe fd41 	bl	8008188 <xQueueGenericSendFromISR>
 8009706:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800970a:	4618      	mov	r0, r3
 800970c:	3728      	adds	r7, #40	; 0x28
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	20000ed8 	.word	0x20000ed8

08009718 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b088      	sub	sp, #32
 800971c:	af02      	add	r7, sp, #8
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009722:	4b1c      	ldr	r3, [pc, #112]	; (8009794 <prvProcessExpiredTimer+0x7c>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	68db      	ldr	r3, [r3, #12]
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	3304      	adds	r3, #4
 8009730:	4618      	mov	r0, r3
 8009732:	f7fe fa57 	bl	8007be4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	69db      	ldr	r3, [r3, #28]
 800973a:	2b01      	cmp	r3, #1
 800973c:	d122      	bne.n	8009784 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	699a      	ldr	r2, [r3, #24]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	18d1      	adds	r1, r2, r3
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	683a      	ldr	r2, [r7, #0]
 800974a:	6978      	ldr	r0, [r7, #20]
 800974c:	f000 f8c8 	bl	80098e0 <prvInsertTimerInActiveList>
 8009750:	4603      	mov	r3, r0
 8009752:	2b00      	cmp	r3, #0
 8009754:	d016      	beq.n	8009784 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009756:	2300      	movs	r3, #0
 8009758:	9300      	str	r3, [sp, #0]
 800975a:	2300      	movs	r3, #0
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	2100      	movs	r1, #0
 8009760:	6978      	ldr	r0, [r7, #20]
 8009762:	f7ff ff8b 	bl	800967c <xTimerGenericCommand>
 8009766:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d10a      	bne.n	8009784 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800976e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009772:	f383 8811 	msr	BASEPRI, r3
 8009776:	f3bf 8f6f 	isb	sy
 800977a:	f3bf 8f4f 	dsb	sy
 800977e:	60fb      	str	r3, [r7, #12]
}
 8009780:	bf00      	nop
 8009782:	e7fe      	b.n	8009782 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009788:	6978      	ldr	r0, [r7, #20]
 800978a:	4798      	blx	r3
}
 800978c:	bf00      	nop
 800978e:	3718      	adds	r7, #24
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	20000ed0 	.word	0x20000ed0

08009798 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80097a0:	f107 0308 	add.w	r3, r7, #8
 80097a4:	4618      	mov	r0, r3
 80097a6:	f000 f857 	bl	8009858 <prvGetNextExpireTime>
 80097aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	4619      	mov	r1, r3
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f000 f803 	bl	80097bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80097b6:	f000 f8d5 	bl	8009964 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80097ba:	e7f1      	b.n	80097a0 <prvTimerTask+0x8>

080097bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80097c6:	f7ff fa45 	bl	8008c54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80097ca:	f107 0308 	add.w	r3, r7, #8
 80097ce:	4618      	mov	r0, r3
 80097d0:	f000 f866 	bl	80098a0 <prvSampleTimeNow>
 80097d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d130      	bne.n	800983e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d10a      	bne.n	80097f8 <prvProcessTimerOrBlockTask+0x3c>
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d806      	bhi.n	80097f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80097ea:	f7ff fa41 	bl	8008c70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80097ee:	68f9      	ldr	r1, [r7, #12]
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f7ff ff91 	bl	8009718 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80097f6:	e024      	b.n	8009842 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d008      	beq.n	8009810 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80097fe:	4b13      	ldr	r3, [pc, #76]	; (800984c <prvProcessTimerOrBlockTask+0x90>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	bf0c      	ite	eq
 8009808:	2301      	moveq	r3, #1
 800980a:	2300      	movne	r3, #0
 800980c:	b2db      	uxtb	r3, r3
 800980e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009810:	4b0f      	ldr	r3, [pc, #60]	; (8009850 <prvProcessTimerOrBlockTask+0x94>)
 8009812:	6818      	ldr	r0, [r3, #0]
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	1ad3      	subs	r3, r2, r3
 800981a:	683a      	ldr	r2, [r7, #0]
 800981c:	4619      	mov	r1, r3
 800981e:	f7fe ffb3 	bl	8008788 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009822:	f7ff fa25 	bl	8008c70 <xTaskResumeAll>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d10a      	bne.n	8009842 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800982c:	4b09      	ldr	r3, [pc, #36]	; (8009854 <prvProcessTimerOrBlockTask+0x98>)
 800982e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009832:	601a      	str	r2, [r3, #0]
 8009834:	f3bf 8f4f 	dsb	sy
 8009838:	f3bf 8f6f 	isb	sy
}
 800983c:	e001      	b.n	8009842 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800983e:	f7ff fa17 	bl	8008c70 <xTaskResumeAll>
}
 8009842:	bf00      	nop
 8009844:	3710      	adds	r7, #16
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	20000ed4 	.word	0x20000ed4
 8009850:	20000ed8 	.word	0x20000ed8
 8009854:	e000ed04 	.word	0xe000ed04

08009858 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009858:	b480      	push	{r7}
 800985a:	b085      	sub	sp, #20
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009860:	4b0e      	ldr	r3, [pc, #56]	; (800989c <prvGetNextExpireTime+0x44>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	2b00      	cmp	r3, #0
 8009868:	bf0c      	ite	eq
 800986a:	2301      	moveq	r3, #1
 800986c:	2300      	movne	r3, #0
 800986e:	b2db      	uxtb	r3, r3
 8009870:	461a      	mov	r2, r3
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d105      	bne.n	800988a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800987e:	4b07      	ldr	r3, [pc, #28]	; (800989c <prvGetNextExpireTime+0x44>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	60fb      	str	r3, [r7, #12]
 8009888:	e001      	b.n	800988e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800988a:	2300      	movs	r3, #0
 800988c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800988e:	68fb      	ldr	r3, [r7, #12]
}
 8009890:	4618      	mov	r0, r3
 8009892:	3714      	adds	r7, #20
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr
 800989c:	20000ed0 	.word	0x20000ed0

080098a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b084      	sub	sp, #16
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80098a8:	f7ff fa80 	bl	8008dac <xTaskGetTickCount>
 80098ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80098ae:	4b0b      	ldr	r3, [pc, #44]	; (80098dc <prvSampleTimeNow+0x3c>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	68fa      	ldr	r2, [r7, #12]
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d205      	bcs.n	80098c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80098b8:	f000 f908 	bl	8009acc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2201      	movs	r2, #1
 80098c0:	601a      	str	r2, [r3, #0]
 80098c2:	e002      	b.n	80098ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80098ca:	4a04      	ldr	r2, [pc, #16]	; (80098dc <prvSampleTimeNow+0x3c>)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80098d0:	68fb      	ldr	r3, [r7, #12]
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	20000ee0 	.word	0x20000ee0

080098e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b086      	sub	sp, #24
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	607a      	str	r2, [r7, #4]
 80098ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80098ee:	2300      	movs	r3, #0
 80098f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	68fa      	ldr	r2, [r7, #12]
 80098fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80098fe:	68ba      	ldr	r2, [r7, #8]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	429a      	cmp	r2, r3
 8009904:	d812      	bhi.n	800992c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	1ad2      	subs	r2, r2, r3
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	699b      	ldr	r3, [r3, #24]
 8009910:	429a      	cmp	r2, r3
 8009912:	d302      	bcc.n	800991a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009914:	2301      	movs	r3, #1
 8009916:	617b      	str	r3, [r7, #20]
 8009918:	e01b      	b.n	8009952 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800991a:	4b10      	ldr	r3, [pc, #64]	; (800995c <prvInsertTimerInActiveList+0x7c>)
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	3304      	adds	r3, #4
 8009922:	4619      	mov	r1, r3
 8009924:	4610      	mov	r0, r2
 8009926:	f7fe f924 	bl	8007b72 <vListInsert>
 800992a:	e012      	b.n	8009952 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	429a      	cmp	r2, r3
 8009932:	d206      	bcs.n	8009942 <prvInsertTimerInActiveList+0x62>
 8009934:	68ba      	ldr	r2, [r7, #8]
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	429a      	cmp	r2, r3
 800993a:	d302      	bcc.n	8009942 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800993c:	2301      	movs	r3, #1
 800993e:	617b      	str	r3, [r7, #20]
 8009940:	e007      	b.n	8009952 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009942:	4b07      	ldr	r3, [pc, #28]	; (8009960 <prvInsertTimerInActiveList+0x80>)
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	3304      	adds	r3, #4
 800994a:	4619      	mov	r1, r3
 800994c:	4610      	mov	r0, r2
 800994e:	f7fe f910 	bl	8007b72 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009952:	697b      	ldr	r3, [r7, #20]
}
 8009954:	4618      	mov	r0, r3
 8009956:	3718      	adds	r7, #24
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}
 800995c:	20000ed4 	.word	0x20000ed4
 8009960:	20000ed0 	.word	0x20000ed0

08009964 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b08e      	sub	sp, #56	; 0x38
 8009968:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800996a:	e09d      	b.n	8009aa8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2b00      	cmp	r3, #0
 8009970:	da18      	bge.n	80099a4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009972:	1d3b      	adds	r3, r7, #4
 8009974:	3304      	adds	r3, #4
 8009976:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800997a:	2b00      	cmp	r3, #0
 800997c:	d10a      	bne.n	8009994 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800997e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009982:	f383 8811 	msr	BASEPRI, r3
 8009986:	f3bf 8f6f 	isb	sy
 800998a:	f3bf 8f4f 	dsb	sy
 800998e:	61fb      	str	r3, [r7, #28]
}
 8009990:	bf00      	nop
 8009992:	e7fe      	b.n	8009992 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800999a:	6850      	ldr	r0, [r2, #4]
 800999c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800999e:	6892      	ldr	r2, [r2, #8]
 80099a0:	4611      	mov	r1, r2
 80099a2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	db7e      	blt.n	8009aa8 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80099ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b0:	695b      	ldr	r3, [r3, #20]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d004      	beq.n	80099c0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b8:	3304      	adds	r3, #4
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7fe f912 	bl	8007be4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80099c0:	463b      	mov	r3, r7
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7ff ff6c 	bl	80098a0 <prvSampleTimeNow>
 80099c8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2b09      	cmp	r3, #9
 80099ce:	d86a      	bhi.n	8009aa6 <prvProcessReceivedCommands+0x142>
 80099d0:	a201      	add	r2, pc, #4	; (adr r2, 80099d8 <prvProcessReceivedCommands+0x74>)
 80099d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d6:	bf00      	nop
 80099d8:	08009a01 	.word	0x08009a01
 80099dc:	08009a01 	.word	0x08009a01
 80099e0:	08009a01 	.word	0x08009a01
 80099e4:	08009aa9 	.word	0x08009aa9
 80099e8:	08009a5d 	.word	0x08009a5d
 80099ec:	08009a95 	.word	0x08009a95
 80099f0:	08009a01 	.word	0x08009a01
 80099f4:	08009a01 	.word	0x08009a01
 80099f8:	08009aa9 	.word	0x08009aa9
 80099fc:	08009a5d 	.word	0x08009a5d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009a00:	68ba      	ldr	r2, [r7, #8]
 8009a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a04:	699b      	ldr	r3, [r3, #24]
 8009a06:	18d1      	adds	r1, r2, r3
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a0e:	f7ff ff67 	bl	80098e0 <prvInsertTimerInActiveList>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d047      	beq.n	8009aa8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a1e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a22:	69db      	ldr	r3, [r3, #28]
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d13f      	bne.n	8009aa8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009a28:	68ba      	ldr	r2, [r7, #8]
 8009a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2c:	699b      	ldr	r3, [r3, #24]
 8009a2e:	441a      	add	r2, r3
 8009a30:	2300      	movs	r3, #0
 8009a32:	9300      	str	r3, [sp, #0]
 8009a34:	2300      	movs	r3, #0
 8009a36:	2100      	movs	r1, #0
 8009a38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a3a:	f7ff fe1f 	bl	800967c <xTimerGenericCommand>
 8009a3e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009a40:	6a3b      	ldr	r3, [r7, #32]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d130      	bne.n	8009aa8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8009a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a4a:	f383 8811 	msr	BASEPRI, r3
 8009a4e:	f3bf 8f6f 	isb	sy
 8009a52:	f3bf 8f4f 	dsb	sy
 8009a56:	61bb      	str	r3, [r7, #24]
}
 8009a58:	bf00      	nop
 8009a5a:	e7fe      	b.n	8009a5a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009a5c:	68ba      	ldr	r2, [r7, #8]
 8009a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a60:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a64:	699b      	ldr	r3, [r3, #24]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d10a      	bne.n	8009a80 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8009a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a6e:	f383 8811 	msr	BASEPRI, r3
 8009a72:	f3bf 8f6f 	isb	sy
 8009a76:	f3bf 8f4f 	dsb	sy
 8009a7a:	617b      	str	r3, [r7, #20]
}
 8009a7c:	bf00      	nop
 8009a7e:	e7fe      	b.n	8009a7e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a82:	699a      	ldr	r2, [r3, #24]
 8009a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a86:	18d1      	adds	r1, r2, r3
 8009a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a8e:	f7ff ff27 	bl	80098e0 <prvInsertTimerInActiveList>
					break;
 8009a92:	e009      	b.n	8009aa8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d104      	bne.n	8009aa8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8009a9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009aa0:	f000 fbc6 	bl	800a230 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009aa4:	e000      	b.n	8009aa8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8009aa6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009aa8:	4b07      	ldr	r3, [pc, #28]	; (8009ac8 <prvProcessReceivedCommands+0x164>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	1d39      	adds	r1, r7, #4
 8009aae:	2200      	movs	r2, #0
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f7fe fc01 	bl	80082b8 <xQueueReceive>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f47f af57 	bne.w	800996c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009abe:	bf00      	nop
 8009ac0:	bf00      	nop
 8009ac2:	3730      	adds	r7, #48	; 0x30
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}
 8009ac8:	20000ed8 	.word	0x20000ed8

08009acc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b088      	sub	sp, #32
 8009ad0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009ad2:	e045      	b.n	8009b60 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ad4:	4b2c      	ldr	r3, [pc, #176]	; (8009b88 <prvSwitchTimerLists+0xbc>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	68db      	ldr	r3, [r3, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ade:	4b2a      	ldr	r3, [pc, #168]	; (8009b88 <prvSwitchTimerLists+0xbc>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	68db      	ldr	r3, [r3, #12]
 8009ae4:	68db      	ldr	r3, [r3, #12]
 8009ae6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	3304      	adds	r3, #4
 8009aec:	4618      	mov	r0, r3
 8009aee:	f7fe f879 	bl	8007be4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af6:	68f8      	ldr	r0, [r7, #12]
 8009af8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	69db      	ldr	r3, [r3, #28]
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d12e      	bne.n	8009b60 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	699b      	ldr	r3, [r3, #24]
 8009b06:	693a      	ldr	r2, [r7, #16]
 8009b08:	4413      	add	r3, r2
 8009b0a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009b0c:	68ba      	ldr	r2, [r7, #8]
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d90e      	bls.n	8009b32 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	68ba      	ldr	r2, [r7, #8]
 8009b18:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	68fa      	ldr	r2, [r7, #12]
 8009b1e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b20:	4b19      	ldr	r3, [pc, #100]	; (8009b88 <prvSwitchTimerLists+0xbc>)
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	3304      	adds	r3, #4
 8009b28:	4619      	mov	r1, r3
 8009b2a:	4610      	mov	r0, r2
 8009b2c:	f7fe f821 	bl	8007b72 <vListInsert>
 8009b30:	e016      	b.n	8009b60 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b32:	2300      	movs	r3, #0
 8009b34:	9300      	str	r3, [sp, #0]
 8009b36:	2300      	movs	r3, #0
 8009b38:	693a      	ldr	r2, [r7, #16]
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	68f8      	ldr	r0, [r7, #12]
 8009b3e:	f7ff fd9d 	bl	800967c <xTimerGenericCommand>
 8009b42:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d10a      	bne.n	8009b60 <prvSwitchTimerLists+0x94>
	__asm volatile
 8009b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4e:	f383 8811 	msr	BASEPRI, r3
 8009b52:	f3bf 8f6f 	isb	sy
 8009b56:	f3bf 8f4f 	dsb	sy
 8009b5a:	603b      	str	r3, [r7, #0]
}
 8009b5c:	bf00      	nop
 8009b5e:	e7fe      	b.n	8009b5e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b60:	4b09      	ldr	r3, [pc, #36]	; (8009b88 <prvSwitchTimerLists+0xbc>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d1b4      	bne.n	8009ad4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009b6a:	4b07      	ldr	r3, [pc, #28]	; (8009b88 <prvSwitchTimerLists+0xbc>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009b70:	4b06      	ldr	r3, [pc, #24]	; (8009b8c <prvSwitchTimerLists+0xc0>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a04      	ldr	r2, [pc, #16]	; (8009b88 <prvSwitchTimerLists+0xbc>)
 8009b76:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009b78:	4a04      	ldr	r2, [pc, #16]	; (8009b8c <prvSwitchTimerLists+0xc0>)
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	6013      	str	r3, [r2, #0]
}
 8009b7e:	bf00      	nop
 8009b80:	3718      	adds	r7, #24
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	20000ed0 	.word	0x20000ed0
 8009b8c:	20000ed4 	.word	0x20000ed4

08009b90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009b96:	f000 f965 	bl	8009e64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009b9a:	4b15      	ldr	r3, [pc, #84]	; (8009bf0 <prvCheckForValidListAndQueue+0x60>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d120      	bne.n	8009be4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009ba2:	4814      	ldr	r0, [pc, #80]	; (8009bf4 <prvCheckForValidListAndQueue+0x64>)
 8009ba4:	f7fd ff94 	bl	8007ad0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009ba8:	4813      	ldr	r0, [pc, #76]	; (8009bf8 <prvCheckForValidListAndQueue+0x68>)
 8009baa:	f7fd ff91 	bl	8007ad0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009bae:	4b13      	ldr	r3, [pc, #76]	; (8009bfc <prvCheckForValidListAndQueue+0x6c>)
 8009bb0:	4a10      	ldr	r2, [pc, #64]	; (8009bf4 <prvCheckForValidListAndQueue+0x64>)
 8009bb2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009bb4:	4b12      	ldr	r3, [pc, #72]	; (8009c00 <prvCheckForValidListAndQueue+0x70>)
 8009bb6:	4a10      	ldr	r2, [pc, #64]	; (8009bf8 <prvCheckForValidListAndQueue+0x68>)
 8009bb8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009bba:	2300      	movs	r3, #0
 8009bbc:	9300      	str	r3, [sp, #0]
 8009bbe:	4b11      	ldr	r3, [pc, #68]	; (8009c04 <prvCheckForValidListAndQueue+0x74>)
 8009bc0:	4a11      	ldr	r2, [pc, #68]	; (8009c08 <prvCheckForValidListAndQueue+0x78>)
 8009bc2:	2110      	movs	r1, #16
 8009bc4:	200a      	movs	r0, #10
 8009bc6:	f7fe f89f 	bl	8007d08 <xQueueGenericCreateStatic>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	4a08      	ldr	r2, [pc, #32]	; (8009bf0 <prvCheckForValidListAndQueue+0x60>)
 8009bce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009bd0:	4b07      	ldr	r3, [pc, #28]	; (8009bf0 <prvCheckForValidListAndQueue+0x60>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d005      	beq.n	8009be4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009bd8:	4b05      	ldr	r3, [pc, #20]	; (8009bf0 <prvCheckForValidListAndQueue+0x60>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	490b      	ldr	r1, [pc, #44]	; (8009c0c <prvCheckForValidListAndQueue+0x7c>)
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7fe fd7e 	bl	80086e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009be4:	f000 f96e 	bl	8009ec4 <vPortExitCritical>
}
 8009be8:	bf00      	nop
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	20000ed8 	.word	0x20000ed8
 8009bf4:	20000ea8 	.word	0x20000ea8
 8009bf8:	20000ebc 	.word	0x20000ebc
 8009bfc:	20000ed0 	.word	0x20000ed0
 8009c00:	20000ed4 	.word	0x20000ed4
 8009c04:	20000f84 	.word	0x20000f84
 8009c08:	20000ee4 	.word	0x20000ee4
 8009c0c:	0800a530 	.word	0x0800a530

08009c10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009c10:	b480      	push	{r7}
 8009c12:	b085      	sub	sp, #20
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	60b9      	str	r1, [r7, #8]
 8009c1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	3b04      	subs	r3, #4
 8009c20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009c28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	3b04      	subs	r3, #4
 8009c2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	f023 0201 	bic.w	r2, r3, #1
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	3b04      	subs	r3, #4
 8009c3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009c40:	4a0c      	ldr	r2, [pc, #48]	; (8009c74 <pxPortInitialiseStack+0x64>)
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	3b14      	subs	r3, #20
 8009c4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	3b04      	subs	r3, #4
 8009c56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f06f 0202 	mvn.w	r2, #2
 8009c5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	3b20      	subs	r3, #32
 8009c64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009c66:	68fb      	ldr	r3, [r7, #12]
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3714      	adds	r7, #20
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr
 8009c74:	08009c79 	.word	0x08009c79

08009c78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b085      	sub	sp, #20
 8009c7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009c82:	4b12      	ldr	r3, [pc, #72]	; (8009ccc <prvTaskExitError+0x54>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c8a:	d00a      	beq.n	8009ca2 <prvTaskExitError+0x2a>
	__asm volatile
 8009c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c90:	f383 8811 	msr	BASEPRI, r3
 8009c94:	f3bf 8f6f 	isb	sy
 8009c98:	f3bf 8f4f 	dsb	sy
 8009c9c:	60fb      	str	r3, [r7, #12]
}
 8009c9e:	bf00      	nop
 8009ca0:	e7fe      	b.n	8009ca0 <prvTaskExitError+0x28>
	__asm volatile
 8009ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca6:	f383 8811 	msr	BASEPRI, r3
 8009caa:	f3bf 8f6f 	isb	sy
 8009cae:	f3bf 8f4f 	dsb	sy
 8009cb2:	60bb      	str	r3, [r7, #8]
}
 8009cb4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009cb6:	bf00      	nop
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d0fc      	beq.n	8009cb8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009cbe:	bf00      	nop
 8009cc0:	bf00      	nop
 8009cc2:	3714      	adds	r7, #20
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr
 8009ccc:	20000010 	.word	0x20000010

08009cd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009cd0:	4b07      	ldr	r3, [pc, #28]	; (8009cf0 <pxCurrentTCBConst2>)
 8009cd2:	6819      	ldr	r1, [r3, #0]
 8009cd4:	6808      	ldr	r0, [r1, #0]
 8009cd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cda:	f380 8809 	msr	PSP, r0
 8009cde:	f3bf 8f6f 	isb	sy
 8009ce2:	f04f 0000 	mov.w	r0, #0
 8009ce6:	f380 8811 	msr	BASEPRI, r0
 8009cea:	4770      	bx	lr
 8009cec:	f3af 8000 	nop.w

08009cf0 <pxCurrentTCBConst2>:
 8009cf0:	200009a8 	.word	0x200009a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009cf4:	bf00      	nop
 8009cf6:	bf00      	nop

08009cf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009cf8:	4808      	ldr	r0, [pc, #32]	; (8009d1c <prvPortStartFirstTask+0x24>)
 8009cfa:	6800      	ldr	r0, [r0, #0]
 8009cfc:	6800      	ldr	r0, [r0, #0]
 8009cfe:	f380 8808 	msr	MSP, r0
 8009d02:	f04f 0000 	mov.w	r0, #0
 8009d06:	f380 8814 	msr	CONTROL, r0
 8009d0a:	b662      	cpsie	i
 8009d0c:	b661      	cpsie	f
 8009d0e:	f3bf 8f4f 	dsb	sy
 8009d12:	f3bf 8f6f 	isb	sy
 8009d16:	df00      	svc	0
 8009d18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009d1a:	bf00      	nop
 8009d1c:	e000ed08 	.word	0xe000ed08

08009d20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b086      	sub	sp, #24
 8009d24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009d26:	4b46      	ldr	r3, [pc, #280]	; (8009e40 <xPortStartScheduler+0x120>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a46      	ldr	r2, [pc, #280]	; (8009e44 <xPortStartScheduler+0x124>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d10a      	bne.n	8009d46 <xPortStartScheduler+0x26>
	__asm volatile
 8009d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d34:	f383 8811 	msr	BASEPRI, r3
 8009d38:	f3bf 8f6f 	isb	sy
 8009d3c:	f3bf 8f4f 	dsb	sy
 8009d40:	613b      	str	r3, [r7, #16]
}
 8009d42:	bf00      	nop
 8009d44:	e7fe      	b.n	8009d44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009d46:	4b3e      	ldr	r3, [pc, #248]	; (8009e40 <xPortStartScheduler+0x120>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a3f      	ldr	r2, [pc, #252]	; (8009e48 <xPortStartScheduler+0x128>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d10a      	bne.n	8009d66 <xPortStartScheduler+0x46>
	__asm volatile
 8009d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d54:	f383 8811 	msr	BASEPRI, r3
 8009d58:	f3bf 8f6f 	isb	sy
 8009d5c:	f3bf 8f4f 	dsb	sy
 8009d60:	60fb      	str	r3, [r7, #12]
}
 8009d62:	bf00      	nop
 8009d64:	e7fe      	b.n	8009d64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009d66:	4b39      	ldr	r3, [pc, #228]	; (8009e4c <xPortStartScheduler+0x12c>)
 8009d68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	22ff      	movs	r2, #255	; 0xff
 8009d76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009d80:	78fb      	ldrb	r3, [r7, #3]
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009d88:	b2da      	uxtb	r2, r3
 8009d8a:	4b31      	ldr	r3, [pc, #196]	; (8009e50 <xPortStartScheduler+0x130>)
 8009d8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009d8e:	4b31      	ldr	r3, [pc, #196]	; (8009e54 <xPortStartScheduler+0x134>)
 8009d90:	2207      	movs	r2, #7
 8009d92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d94:	e009      	b.n	8009daa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009d96:	4b2f      	ldr	r3, [pc, #188]	; (8009e54 <xPortStartScheduler+0x134>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	3b01      	subs	r3, #1
 8009d9c:	4a2d      	ldr	r2, [pc, #180]	; (8009e54 <xPortStartScheduler+0x134>)
 8009d9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009da0:	78fb      	ldrb	r3, [r7, #3]
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	005b      	lsls	r3, r3, #1
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009daa:	78fb      	ldrb	r3, [r7, #3]
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009db2:	2b80      	cmp	r3, #128	; 0x80
 8009db4:	d0ef      	beq.n	8009d96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009db6:	4b27      	ldr	r3, [pc, #156]	; (8009e54 <xPortStartScheduler+0x134>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f1c3 0307 	rsb	r3, r3, #7
 8009dbe:	2b04      	cmp	r3, #4
 8009dc0:	d00a      	beq.n	8009dd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc6:	f383 8811 	msr	BASEPRI, r3
 8009dca:	f3bf 8f6f 	isb	sy
 8009dce:	f3bf 8f4f 	dsb	sy
 8009dd2:	60bb      	str	r3, [r7, #8]
}
 8009dd4:	bf00      	nop
 8009dd6:	e7fe      	b.n	8009dd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009dd8:	4b1e      	ldr	r3, [pc, #120]	; (8009e54 <xPortStartScheduler+0x134>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	021b      	lsls	r3, r3, #8
 8009dde:	4a1d      	ldr	r2, [pc, #116]	; (8009e54 <xPortStartScheduler+0x134>)
 8009de0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009de2:	4b1c      	ldr	r3, [pc, #112]	; (8009e54 <xPortStartScheduler+0x134>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009dea:	4a1a      	ldr	r2, [pc, #104]	; (8009e54 <xPortStartScheduler+0x134>)
 8009dec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	b2da      	uxtb	r2, r3
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009df6:	4b18      	ldr	r3, [pc, #96]	; (8009e58 <xPortStartScheduler+0x138>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a17      	ldr	r2, [pc, #92]	; (8009e58 <xPortStartScheduler+0x138>)
 8009dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009e00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009e02:	4b15      	ldr	r3, [pc, #84]	; (8009e58 <xPortStartScheduler+0x138>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4a14      	ldr	r2, [pc, #80]	; (8009e58 <xPortStartScheduler+0x138>)
 8009e08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009e0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009e0e:	f000 f8dd 	bl	8009fcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009e12:	4b12      	ldr	r3, [pc, #72]	; (8009e5c <xPortStartScheduler+0x13c>)
 8009e14:	2200      	movs	r2, #0
 8009e16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009e18:	f000 f8fc 	bl	800a014 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009e1c:	4b10      	ldr	r3, [pc, #64]	; (8009e60 <xPortStartScheduler+0x140>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a0f      	ldr	r2, [pc, #60]	; (8009e60 <xPortStartScheduler+0x140>)
 8009e22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009e26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009e28:	f7ff ff66 	bl	8009cf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009e2c:	f7ff f88c 	bl	8008f48 <vTaskSwitchContext>
	prvTaskExitError();
 8009e30:	f7ff ff22 	bl	8009c78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009e34:	2300      	movs	r3, #0
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3718      	adds	r7, #24
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	e000ed00 	.word	0xe000ed00
 8009e44:	410fc271 	.word	0x410fc271
 8009e48:	410fc270 	.word	0x410fc270
 8009e4c:	e000e400 	.word	0xe000e400
 8009e50:	20000fd4 	.word	0x20000fd4
 8009e54:	20000fd8 	.word	0x20000fd8
 8009e58:	e000ed20 	.word	0xe000ed20
 8009e5c:	20000010 	.word	0x20000010
 8009e60:	e000ef34 	.word	0xe000ef34

08009e64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
	__asm volatile
 8009e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6e:	f383 8811 	msr	BASEPRI, r3
 8009e72:	f3bf 8f6f 	isb	sy
 8009e76:	f3bf 8f4f 	dsb	sy
 8009e7a:	607b      	str	r3, [r7, #4]
}
 8009e7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009e7e:	4b0f      	ldr	r3, [pc, #60]	; (8009ebc <vPortEnterCritical+0x58>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	3301      	adds	r3, #1
 8009e84:	4a0d      	ldr	r2, [pc, #52]	; (8009ebc <vPortEnterCritical+0x58>)
 8009e86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009e88:	4b0c      	ldr	r3, [pc, #48]	; (8009ebc <vPortEnterCritical+0x58>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	d10f      	bne.n	8009eb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009e90:	4b0b      	ldr	r3, [pc, #44]	; (8009ec0 <vPortEnterCritical+0x5c>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d00a      	beq.n	8009eb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9e:	f383 8811 	msr	BASEPRI, r3
 8009ea2:	f3bf 8f6f 	isb	sy
 8009ea6:	f3bf 8f4f 	dsb	sy
 8009eaa:	603b      	str	r3, [r7, #0]
}
 8009eac:	bf00      	nop
 8009eae:	e7fe      	b.n	8009eae <vPortEnterCritical+0x4a>
	}
}
 8009eb0:	bf00      	nop
 8009eb2:	370c      	adds	r7, #12
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr
 8009ebc:	20000010 	.word	0x20000010
 8009ec0:	e000ed04 	.word	0xe000ed04

08009ec4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009eca:	4b12      	ldr	r3, [pc, #72]	; (8009f14 <vPortExitCritical+0x50>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d10a      	bne.n	8009ee8 <vPortExitCritical+0x24>
	__asm volatile
 8009ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed6:	f383 8811 	msr	BASEPRI, r3
 8009eda:	f3bf 8f6f 	isb	sy
 8009ede:	f3bf 8f4f 	dsb	sy
 8009ee2:	607b      	str	r3, [r7, #4]
}
 8009ee4:	bf00      	nop
 8009ee6:	e7fe      	b.n	8009ee6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009ee8:	4b0a      	ldr	r3, [pc, #40]	; (8009f14 <vPortExitCritical+0x50>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	3b01      	subs	r3, #1
 8009eee:	4a09      	ldr	r2, [pc, #36]	; (8009f14 <vPortExitCritical+0x50>)
 8009ef0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ef2:	4b08      	ldr	r3, [pc, #32]	; (8009f14 <vPortExitCritical+0x50>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d105      	bne.n	8009f06 <vPortExitCritical+0x42>
 8009efa:	2300      	movs	r3, #0
 8009efc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	f383 8811 	msr	BASEPRI, r3
}
 8009f04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009f06:	bf00      	nop
 8009f08:	370c      	adds	r7, #12
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	20000010 	.word	0x20000010
	...

08009f20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009f20:	f3ef 8009 	mrs	r0, PSP
 8009f24:	f3bf 8f6f 	isb	sy
 8009f28:	4b15      	ldr	r3, [pc, #84]	; (8009f80 <pxCurrentTCBConst>)
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	f01e 0f10 	tst.w	lr, #16
 8009f30:	bf08      	it	eq
 8009f32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009f36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f3a:	6010      	str	r0, [r2, #0]
 8009f3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009f40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009f44:	f380 8811 	msr	BASEPRI, r0
 8009f48:	f3bf 8f4f 	dsb	sy
 8009f4c:	f3bf 8f6f 	isb	sy
 8009f50:	f7fe fffa 	bl	8008f48 <vTaskSwitchContext>
 8009f54:	f04f 0000 	mov.w	r0, #0
 8009f58:	f380 8811 	msr	BASEPRI, r0
 8009f5c:	bc09      	pop	{r0, r3}
 8009f5e:	6819      	ldr	r1, [r3, #0]
 8009f60:	6808      	ldr	r0, [r1, #0]
 8009f62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f66:	f01e 0f10 	tst.w	lr, #16
 8009f6a:	bf08      	it	eq
 8009f6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009f70:	f380 8809 	msr	PSP, r0
 8009f74:	f3bf 8f6f 	isb	sy
 8009f78:	4770      	bx	lr
 8009f7a:	bf00      	nop
 8009f7c:	f3af 8000 	nop.w

08009f80 <pxCurrentTCBConst>:
 8009f80:	200009a8 	.word	0x200009a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009f84:	bf00      	nop
 8009f86:	bf00      	nop

08009f88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f92:	f383 8811 	msr	BASEPRI, r3
 8009f96:	f3bf 8f6f 	isb	sy
 8009f9a:	f3bf 8f4f 	dsb	sy
 8009f9e:	607b      	str	r3, [r7, #4]
}
 8009fa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009fa2:	f7fe ff13 	bl	8008dcc <xTaskIncrementTick>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d003      	beq.n	8009fb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009fac:	4b06      	ldr	r3, [pc, #24]	; (8009fc8 <SysTick_Handler+0x40>)
 8009fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fb2:	601a      	str	r2, [r3, #0]
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	f383 8811 	msr	BASEPRI, r3
}
 8009fbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009fc0:	bf00      	nop
 8009fc2:	3708      	adds	r7, #8
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	e000ed04 	.word	0xe000ed04

08009fcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009fcc:	b480      	push	{r7}
 8009fce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009fd0:	4b0b      	ldr	r3, [pc, #44]	; (800a000 <vPortSetupTimerInterrupt+0x34>)
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009fd6:	4b0b      	ldr	r3, [pc, #44]	; (800a004 <vPortSetupTimerInterrupt+0x38>)
 8009fd8:	2200      	movs	r2, #0
 8009fda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009fdc:	4b0a      	ldr	r3, [pc, #40]	; (800a008 <vPortSetupTimerInterrupt+0x3c>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a0a      	ldr	r2, [pc, #40]	; (800a00c <vPortSetupTimerInterrupt+0x40>)
 8009fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8009fe6:	099b      	lsrs	r3, r3, #6
 8009fe8:	4a09      	ldr	r2, [pc, #36]	; (800a010 <vPortSetupTimerInterrupt+0x44>)
 8009fea:	3b01      	subs	r3, #1
 8009fec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009fee:	4b04      	ldr	r3, [pc, #16]	; (800a000 <vPortSetupTimerInterrupt+0x34>)
 8009ff0:	2207      	movs	r2, #7
 8009ff2:	601a      	str	r2, [r3, #0]
}
 8009ff4:	bf00      	nop
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop
 800a000:	e000e010 	.word	0xe000e010
 800a004:	e000e018 	.word	0xe000e018
 800a008:	20000004 	.word	0x20000004
 800a00c:	10624dd3 	.word	0x10624dd3
 800a010:	e000e014 	.word	0xe000e014

0800a014 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a014:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a024 <vPortEnableVFP+0x10>
 800a018:	6801      	ldr	r1, [r0, #0]
 800a01a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a01e:	6001      	str	r1, [r0, #0]
 800a020:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a022:	bf00      	nop
 800a024:	e000ed88 	.word	0xe000ed88

0800a028 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a028:	b480      	push	{r7}
 800a02a:	b085      	sub	sp, #20
 800a02c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a02e:	f3ef 8305 	mrs	r3, IPSR
 800a032:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2b0f      	cmp	r3, #15
 800a038:	d914      	bls.n	800a064 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a03a:	4a17      	ldr	r2, [pc, #92]	; (800a098 <vPortValidateInterruptPriority+0x70>)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	4413      	add	r3, r2
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a044:	4b15      	ldr	r3, [pc, #84]	; (800a09c <vPortValidateInterruptPriority+0x74>)
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	7afa      	ldrb	r2, [r7, #11]
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d20a      	bcs.n	800a064 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a052:	f383 8811 	msr	BASEPRI, r3
 800a056:	f3bf 8f6f 	isb	sy
 800a05a:	f3bf 8f4f 	dsb	sy
 800a05e:	607b      	str	r3, [r7, #4]
}
 800a060:	bf00      	nop
 800a062:	e7fe      	b.n	800a062 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a064:	4b0e      	ldr	r3, [pc, #56]	; (800a0a0 <vPortValidateInterruptPriority+0x78>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a06c:	4b0d      	ldr	r3, [pc, #52]	; (800a0a4 <vPortValidateInterruptPriority+0x7c>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	429a      	cmp	r2, r3
 800a072:	d90a      	bls.n	800a08a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a078:	f383 8811 	msr	BASEPRI, r3
 800a07c:	f3bf 8f6f 	isb	sy
 800a080:	f3bf 8f4f 	dsb	sy
 800a084:	603b      	str	r3, [r7, #0]
}
 800a086:	bf00      	nop
 800a088:	e7fe      	b.n	800a088 <vPortValidateInterruptPriority+0x60>
	}
 800a08a:	bf00      	nop
 800a08c:	3714      	adds	r7, #20
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr
 800a096:	bf00      	nop
 800a098:	e000e3f0 	.word	0xe000e3f0
 800a09c:	20000fd4 	.word	0x20000fd4
 800a0a0:	e000ed0c 	.word	0xe000ed0c
 800a0a4:	20000fd8 	.word	0x20000fd8

0800a0a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b08a      	sub	sp, #40	; 0x28
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a0b4:	f7fe fdce 	bl	8008c54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a0b8:	4b58      	ldr	r3, [pc, #352]	; (800a21c <pvPortMalloc+0x174>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d101      	bne.n	800a0c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a0c0:	f000 f910 	bl	800a2e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a0c4:	4b56      	ldr	r3, [pc, #344]	; (800a220 <pvPortMalloc+0x178>)
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	4013      	ands	r3, r2
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	f040 808e 	bne.w	800a1ee <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d01d      	beq.n	800a114 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a0d8:	2208      	movs	r2, #8
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	4413      	add	r3, r2
 800a0de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f003 0307 	and.w	r3, r3, #7
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d014      	beq.n	800a114 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f023 0307 	bic.w	r3, r3, #7
 800a0f0:	3308      	adds	r3, #8
 800a0f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f003 0307 	and.w	r3, r3, #7
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d00a      	beq.n	800a114 <pvPortMalloc+0x6c>
	__asm volatile
 800a0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a102:	f383 8811 	msr	BASEPRI, r3
 800a106:	f3bf 8f6f 	isb	sy
 800a10a:	f3bf 8f4f 	dsb	sy
 800a10e:	617b      	str	r3, [r7, #20]
}
 800a110:	bf00      	nop
 800a112:	e7fe      	b.n	800a112 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d069      	beq.n	800a1ee <pvPortMalloc+0x146>
 800a11a:	4b42      	ldr	r3, [pc, #264]	; (800a224 <pvPortMalloc+0x17c>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	429a      	cmp	r2, r3
 800a122:	d864      	bhi.n	800a1ee <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a124:	4b40      	ldr	r3, [pc, #256]	; (800a228 <pvPortMalloc+0x180>)
 800a126:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a128:	4b3f      	ldr	r3, [pc, #252]	; (800a228 <pvPortMalloc+0x180>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a12e:	e004      	b.n	800a13a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a132:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	429a      	cmp	r2, r3
 800a142:	d903      	bls.n	800a14c <pvPortMalloc+0xa4>
 800a144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d1f1      	bne.n	800a130 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a14c:	4b33      	ldr	r3, [pc, #204]	; (800a21c <pvPortMalloc+0x174>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a152:	429a      	cmp	r2, r3
 800a154:	d04b      	beq.n	800a1ee <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a156:	6a3b      	ldr	r3, [r7, #32]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	2208      	movs	r2, #8
 800a15c:	4413      	add	r3, r2
 800a15e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	6a3b      	ldr	r3, [r7, #32]
 800a166:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16a:	685a      	ldr	r2, [r3, #4]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	1ad2      	subs	r2, r2, r3
 800a170:	2308      	movs	r3, #8
 800a172:	005b      	lsls	r3, r3, #1
 800a174:	429a      	cmp	r2, r3
 800a176:	d91f      	bls.n	800a1b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	4413      	add	r3, r2
 800a17e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a180:	69bb      	ldr	r3, [r7, #24]
 800a182:	f003 0307 	and.w	r3, r3, #7
 800a186:	2b00      	cmp	r3, #0
 800a188:	d00a      	beq.n	800a1a0 <pvPortMalloc+0xf8>
	__asm volatile
 800a18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18e:	f383 8811 	msr	BASEPRI, r3
 800a192:	f3bf 8f6f 	isb	sy
 800a196:	f3bf 8f4f 	dsb	sy
 800a19a:	613b      	str	r3, [r7, #16]
}
 800a19c:	bf00      	nop
 800a19e:	e7fe      	b.n	800a19e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a2:	685a      	ldr	r2, [r3, #4]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	1ad2      	subs	r2, r2, r3
 800a1a8:	69bb      	ldr	r3, [r7, #24]
 800a1aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a1b2:	69b8      	ldr	r0, [r7, #24]
 800a1b4:	f000 f8f8 	bl	800a3a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a1b8:	4b1a      	ldr	r3, [pc, #104]	; (800a224 <pvPortMalloc+0x17c>)
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	1ad3      	subs	r3, r2, r3
 800a1c2:	4a18      	ldr	r2, [pc, #96]	; (800a224 <pvPortMalloc+0x17c>)
 800a1c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a1c6:	4b17      	ldr	r3, [pc, #92]	; (800a224 <pvPortMalloc+0x17c>)
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	4b18      	ldr	r3, [pc, #96]	; (800a22c <pvPortMalloc+0x184>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d203      	bcs.n	800a1da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a1d2:	4b14      	ldr	r3, [pc, #80]	; (800a224 <pvPortMalloc+0x17c>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4a15      	ldr	r2, [pc, #84]	; (800a22c <pvPortMalloc+0x184>)
 800a1d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1dc:	685a      	ldr	r2, [r3, #4]
 800a1de:	4b10      	ldr	r3, [pc, #64]	; (800a220 <pvPortMalloc+0x178>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	431a      	orrs	r2, r3
 800a1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a1ee:	f7fe fd3f 	bl	8008c70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1f2:	69fb      	ldr	r3, [r7, #28]
 800a1f4:	f003 0307 	and.w	r3, r3, #7
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00a      	beq.n	800a212 <pvPortMalloc+0x16a>
	__asm volatile
 800a1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a200:	f383 8811 	msr	BASEPRI, r3
 800a204:	f3bf 8f6f 	isb	sy
 800a208:	f3bf 8f4f 	dsb	sy
 800a20c:	60fb      	str	r3, [r7, #12]
}
 800a20e:	bf00      	nop
 800a210:	e7fe      	b.n	800a210 <pvPortMalloc+0x168>
	return pvReturn;
 800a212:	69fb      	ldr	r3, [r7, #28]
}
 800a214:	4618      	mov	r0, r3
 800a216:	3728      	adds	r7, #40	; 0x28
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}
 800a21c:	20001d90 	.word	0x20001d90
 800a220:	20001d9c 	.word	0x20001d9c
 800a224:	20001d94 	.word	0x20001d94
 800a228:	20001d88 	.word	0x20001d88
 800a22c:	20001d98 	.word	0x20001d98

0800a230 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b086      	sub	sp, #24
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d048      	beq.n	800a2d4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a242:	2308      	movs	r3, #8
 800a244:	425b      	negs	r3, r3
 800a246:	697a      	ldr	r2, [r7, #20]
 800a248:	4413      	add	r3, r2
 800a24a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	685a      	ldr	r2, [r3, #4]
 800a254:	4b21      	ldr	r3, [pc, #132]	; (800a2dc <vPortFree+0xac>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4013      	ands	r3, r2
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d10a      	bne.n	800a274 <vPortFree+0x44>
	__asm volatile
 800a25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a262:	f383 8811 	msr	BASEPRI, r3
 800a266:	f3bf 8f6f 	isb	sy
 800a26a:	f3bf 8f4f 	dsb	sy
 800a26e:	60fb      	str	r3, [r7, #12]
}
 800a270:	bf00      	nop
 800a272:	e7fe      	b.n	800a272 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d00a      	beq.n	800a292 <vPortFree+0x62>
	__asm volatile
 800a27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a280:	f383 8811 	msr	BASEPRI, r3
 800a284:	f3bf 8f6f 	isb	sy
 800a288:	f3bf 8f4f 	dsb	sy
 800a28c:	60bb      	str	r3, [r7, #8]
}
 800a28e:	bf00      	nop
 800a290:	e7fe      	b.n	800a290 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	685a      	ldr	r2, [r3, #4]
 800a296:	4b11      	ldr	r3, [pc, #68]	; (800a2dc <vPortFree+0xac>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4013      	ands	r3, r2
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d019      	beq.n	800a2d4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d115      	bne.n	800a2d4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	685a      	ldr	r2, [r3, #4]
 800a2ac:	4b0b      	ldr	r3, [pc, #44]	; (800a2dc <vPortFree+0xac>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	43db      	mvns	r3, r3
 800a2b2:	401a      	ands	r2, r3
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a2b8:	f7fe fccc 	bl	8008c54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	685a      	ldr	r2, [r3, #4]
 800a2c0:	4b07      	ldr	r3, [pc, #28]	; (800a2e0 <vPortFree+0xb0>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4413      	add	r3, r2
 800a2c6:	4a06      	ldr	r2, [pc, #24]	; (800a2e0 <vPortFree+0xb0>)
 800a2c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a2ca:	6938      	ldr	r0, [r7, #16]
 800a2cc:	f000 f86c 	bl	800a3a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a2d0:	f7fe fcce 	bl	8008c70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a2d4:	bf00      	nop
 800a2d6:	3718      	adds	r7, #24
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}
 800a2dc:	20001d9c 	.word	0x20001d9c
 800a2e0:	20001d94 	.word	0x20001d94

0800a2e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b085      	sub	sp, #20
 800a2e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a2ea:	f640 53ac 	movw	r3, #3500	; 0xdac
 800a2ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a2f0:	4b27      	ldr	r3, [pc, #156]	; (800a390 <prvHeapInit+0xac>)
 800a2f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f003 0307 	and.w	r3, r3, #7
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00c      	beq.n	800a318 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	3307      	adds	r3, #7
 800a302:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f023 0307 	bic.w	r3, r3, #7
 800a30a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a30c:	68ba      	ldr	r2, [r7, #8]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	1ad3      	subs	r3, r2, r3
 800a312:	4a1f      	ldr	r2, [pc, #124]	; (800a390 <prvHeapInit+0xac>)
 800a314:	4413      	add	r3, r2
 800a316:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a31c:	4a1d      	ldr	r2, [pc, #116]	; (800a394 <prvHeapInit+0xb0>)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a322:	4b1c      	ldr	r3, [pc, #112]	; (800a394 <prvHeapInit+0xb0>)
 800a324:	2200      	movs	r2, #0
 800a326:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	68ba      	ldr	r2, [r7, #8]
 800a32c:	4413      	add	r3, r2
 800a32e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a330:	2208      	movs	r2, #8
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	1a9b      	subs	r3, r3, r2
 800a336:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f023 0307 	bic.w	r3, r3, #7
 800a33e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	4a15      	ldr	r2, [pc, #84]	; (800a398 <prvHeapInit+0xb4>)
 800a344:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a346:	4b14      	ldr	r3, [pc, #80]	; (800a398 <prvHeapInit+0xb4>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	2200      	movs	r2, #0
 800a34c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a34e:	4b12      	ldr	r3, [pc, #72]	; (800a398 <prvHeapInit+0xb4>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	2200      	movs	r2, #0
 800a354:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	68fa      	ldr	r2, [r7, #12]
 800a35e:	1ad2      	subs	r2, r2, r3
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a364:	4b0c      	ldr	r3, [pc, #48]	; (800a398 <prvHeapInit+0xb4>)
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	4a0a      	ldr	r2, [pc, #40]	; (800a39c <prvHeapInit+0xb8>)
 800a372:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	4a09      	ldr	r2, [pc, #36]	; (800a3a0 <prvHeapInit+0xbc>)
 800a37a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a37c:	4b09      	ldr	r3, [pc, #36]	; (800a3a4 <prvHeapInit+0xc0>)
 800a37e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a382:	601a      	str	r2, [r3, #0]
}
 800a384:	bf00      	nop
 800a386:	3714      	adds	r7, #20
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr
 800a390:	20000fdc 	.word	0x20000fdc
 800a394:	20001d88 	.word	0x20001d88
 800a398:	20001d90 	.word	0x20001d90
 800a39c:	20001d98 	.word	0x20001d98
 800a3a0:	20001d94 	.word	0x20001d94
 800a3a4:	20001d9c 	.word	0x20001d9c

0800a3a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a3b0:	4b28      	ldr	r3, [pc, #160]	; (800a454 <prvInsertBlockIntoFreeList+0xac>)
 800a3b2:	60fb      	str	r3, [r7, #12]
 800a3b4:	e002      	b.n	800a3bc <prvInsertBlockIntoFreeList+0x14>
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	60fb      	str	r3, [r7, #12]
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d8f7      	bhi.n	800a3b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	68ba      	ldr	r2, [r7, #8]
 800a3d0:	4413      	add	r3, r2
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d108      	bne.n	800a3ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	685a      	ldr	r2, [r3, #4]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	441a      	add	r2, r3
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	68ba      	ldr	r2, [r7, #8]
 800a3f4:	441a      	add	r2, r3
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d118      	bne.n	800a430 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	4b15      	ldr	r3, [pc, #84]	; (800a458 <prvInsertBlockIntoFreeList+0xb0>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	429a      	cmp	r2, r3
 800a408:	d00d      	beq.n	800a426 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	685a      	ldr	r2, [r3, #4]
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	441a      	add	r2, r3
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	601a      	str	r2, [r3, #0]
 800a424:	e008      	b.n	800a438 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a426:	4b0c      	ldr	r3, [pc, #48]	; (800a458 <prvInsertBlockIntoFreeList+0xb0>)
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	601a      	str	r2, [r3, #0]
 800a42e:	e003      	b.n	800a438 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681a      	ldr	r2, [r3, #0]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a438:	68fa      	ldr	r2, [r7, #12]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d002      	beq.n	800a446 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	687a      	ldr	r2, [r7, #4]
 800a444:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a446:	bf00      	nop
 800a448:	3714      	adds	r7, #20
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	20001d88 	.word	0x20001d88
 800a458:	20001d90 	.word	0x20001d90

0800a45c <memset>:
 800a45c:	4402      	add	r2, r0
 800a45e:	4603      	mov	r3, r0
 800a460:	4293      	cmp	r3, r2
 800a462:	d100      	bne.n	800a466 <memset+0xa>
 800a464:	4770      	bx	lr
 800a466:	f803 1b01 	strb.w	r1, [r3], #1
 800a46a:	e7f9      	b.n	800a460 <memset+0x4>

0800a46c <__libc_init_array>:
 800a46c:	b570      	push	{r4, r5, r6, lr}
 800a46e:	4d0d      	ldr	r5, [pc, #52]	; (800a4a4 <__libc_init_array+0x38>)
 800a470:	4c0d      	ldr	r4, [pc, #52]	; (800a4a8 <__libc_init_array+0x3c>)
 800a472:	1b64      	subs	r4, r4, r5
 800a474:	10a4      	asrs	r4, r4, #2
 800a476:	2600      	movs	r6, #0
 800a478:	42a6      	cmp	r6, r4
 800a47a:	d109      	bne.n	800a490 <__libc_init_array+0x24>
 800a47c:	4d0b      	ldr	r5, [pc, #44]	; (800a4ac <__libc_init_array+0x40>)
 800a47e:	4c0c      	ldr	r4, [pc, #48]	; (800a4b0 <__libc_init_array+0x44>)
 800a480:	f000 f826 	bl	800a4d0 <_init>
 800a484:	1b64      	subs	r4, r4, r5
 800a486:	10a4      	asrs	r4, r4, #2
 800a488:	2600      	movs	r6, #0
 800a48a:	42a6      	cmp	r6, r4
 800a48c:	d105      	bne.n	800a49a <__libc_init_array+0x2e>
 800a48e:	bd70      	pop	{r4, r5, r6, pc}
 800a490:	f855 3b04 	ldr.w	r3, [r5], #4
 800a494:	4798      	blx	r3
 800a496:	3601      	adds	r6, #1
 800a498:	e7ee      	b.n	800a478 <__libc_init_array+0xc>
 800a49a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a49e:	4798      	blx	r3
 800a4a0:	3601      	adds	r6, #1
 800a4a2:	e7f2      	b.n	800a48a <__libc_init_array+0x1e>
 800a4a4:	0800a634 	.word	0x0800a634
 800a4a8:	0800a634 	.word	0x0800a634
 800a4ac:	0800a634 	.word	0x0800a634
 800a4b0:	0800a638 	.word	0x0800a638

0800a4b4 <memcpy>:
 800a4b4:	440a      	add	r2, r1
 800a4b6:	4291      	cmp	r1, r2
 800a4b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4bc:	d100      	bne.n	800a4c0 <memcpy+0xc>
 800a4be:	4770      	bx	lr
 800a4c0:	b510      	push	{r4, lr}
 800a4c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4ca:	4291      	cmp	r1, r2
 800a4cc:	d1f9      	bne.n	800a4c2 <memcpy+0xe>
 800a4ce:	bd10      	pop	{r4, pc}

0800a4d0 <_init>:
 800a4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4d2:	bf00      	nop
 800a4d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4d6:	bc08      	pop	{r3}
 800a4d8:	469e      	mov	lr, r3
 800a4da:	4770      	bx	lr

0800a4dc <_fini>:
 800a4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4de:	bf00      	nop
 800a4e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4e2:	bc08      	pop	{r3}
 800a4e4:	469e      	mov	lr, r3
 800a4e6:	4770      	bx	lr
